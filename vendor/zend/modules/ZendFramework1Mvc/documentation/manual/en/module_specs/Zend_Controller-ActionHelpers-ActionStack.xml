<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.controller.actionhelpers.actionstack"><info><title>ActionStack</title></info>
    

    <para>
        The <emphasis>ActionStack</emphasis> helper allows you to push requests to the
        <link linkend="zend.controller.plugins.standard.actionstack">ActionStack</link>
        front controller plugin, effectively helping you create a queue of
        actions to execute during the request. The helper allows you to add
        actions either by specifying new request objects or
        action - controller - module sets.
    </para>

    <note><info><title>Invoking ActionStack Helper Initializes the ActionStack Plugin</title></info>
        

        <para>
            Invoking the <emphasis>ActionStack</emphasis> helper implicitly registers
            the <emphasis>ActionStack</emphasis> plugin -- which means you do not need
            to explicitly register the <emphasis>ActionStack</emphasis> plugin to use
            this functionality.
        </para>
    </note>

    <example xml:id="zend.controller.actionhelpers.actionstack.simple"><info><title>Adding a Task Using Action, Controller and Module Names</title></info>
        

        <para>
            Often, it's simplest to simply specify the action, controller, and
            module (and optional request parameters), much as you would when
            calling <methodname>Zend_Controller_Action::_forward()</methodname>:
        </para>

        <programlisting language="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function barAction()
    {
        // Add two actions to the stack
        // Add call to /foo/baz/bar/baz
        // (FooController::bazAction() with request var bar == baz)
        $this->_helper->actionStack('baz',
                                    'foo',
                                    'default',
                                    array('bar' => 'baz'));

        // Add call to /bar/bat
        // (BarController::batAction())
        $this->_helper->actionStack('bat', 'bar');
    }
}
]]></programlisting>
    </example>

    <example xml:id="zend.controller.actionhelpers.actionstack.simple2"><info><title>Adding a Task Using a Request Object</title></info>
        

        <para>
            Sometimes the <acronym>OOP</acronym> nature of a request object makes most sense; you
            can pass such an object to the <emphasis>ActionStack</emphasis> helper as
            well.
        </para>

        <programlisting language="php"><![CDATA[
class FooController extends Zend_Controller_Action
{
    public function barAction()
    {
        // Add two actions to the stack
        // Add call to /foo/baz/bar/baz
        // (FooController::bazAction() with request var bar == baz)
        $request = clone $this->getRequest();
        // Don't set controller or module; use current values
        $request->setActionName('baz')
                ->setParams(array('bar' => 'baz'));
        $this->_helper->actionStack($request);

        // Add call to /bar/bat
        // (BarController::batAction())
        $request = clone $this->getRequest();
        // don't set module; use current value
        $request->setActionName('bat')
                ->setControllerName('bar');
        $this->_helper->actionStack($request);
    }
}
]]></programlisting>
    </example>
</section>
