<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.controller.router.routes.standard"><info><title>Zend_Controller_Router_Route</title></info>
    

    <para>
        <classname>Zend_Controller_Router_Route</classname> はフレームワークの標準のルートです。
        簡単に利用でき、柔軟なルート定義が可能です。各ルートには、まず
        (静的および動的な) <acronym>URL</acronym> のマッピングが含まれ、
        そしてデフォルト値および変数についての制限を指定して初期化します。
    </para>

    <para>
        とある架空のアプリケーションで、コンテンツの作者情報のページが必要になったとしましょう。
        ブラウザで <filename>http://domain.com/author/martel</filename>
        にアクセスした際に、"martel" とかいう人についての情報を見たいわけです。
        この機能を実現するためのルートは、次のようになります。
    </para>

    <programlisting language="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    'author/:username',
    array(
        'controller' => 'profile',
        'action'     => 'userinfo'
    )
);

$router->addRoute('user', $route);
]]></programlisting>

    <para>
        <classname>Zend_Controller_Router_Route</classname>
        のコンストラクタの最初のパラメータは、ルートの定義です。
        これを <acronym>URL</acronym> にマッチさせます。ルート定義は静的な部分と動的な部分で構成され、
        それをスラッシュ ('/') で連結します。
        静的な部分は単なるテキスト (例. <command>author</command>) です。
        動的な部分を変数と呼び、変数名の前にコロンをつけて
        (例. <command>:username</command>) 表します。
    </para>

    <note><info><title>文字の使用法</title></info>
        

        <para>
            現在の実装では、(スラッシュ以外の)
            任意の文字を変数名として使用できます。しかし、
            <acronym>PHP</acronym> の変数名として使用できる文字だけを用いることを強く推奨します。
            このようにしておくことで、
            将来実装が変更されたときにバグを引き起こす可能性を抑えられます。
        </para>
    </note>

    <para>
        この例のルートは、ブラウザで
        <filename>'http://domain.com/author/martel'</filename> を指した際にマッチします。
        この場合、すべての変数の値が <classname>Zend_Controller_Request</classname>
        オブジェクトに注入され、<classname>ProfileController</classname> からアクセスできるようになります。
        この例が返す変数は、以下のようなキーと値のペアを持つ配列となります。
    </para>

    <programlisting language="php"><![CDATA[
$values = array(
    'username'   => 'martel',
    'controller' => 'profile',
    'action'     => 'userinfo'
);
]]></programlisting>

    <para>
        その後、<classname>Zend_Controller_Dispatcher</classname> は
        (デフォルトモジュールの) <classname>ProfileController</classname> クラスにある
        <methodname>userinfoAction()</methodname> メソッドを実行します。変数にアクセスするには、
        <methodname>Zend_Controller_Action::_getParam()</methodname> あるいは
        <methodname>Zend_Controller_Request::getParam()</methodname> メソッドを使用します。
    </para>

    <programlisting language="php"><![CDATA[
public function userinfoAction()
{
    $request = $this->getRequest();
    $username = $request->getParam('username');

    $username = $this->_getParam('username');
}
]]></programlisting>

    <para>
        ルート定義には、特殊文字 (ワイルドカード)
        を含めることができます。これは '*' 記号で表します。
        これを使用して、Module ルートと同様にパラメータを扱う
        (変数名 =&gt; 値 のペアを <acronym>URI</acronym> で定義する) ことができます。
        次のルートは、Module ルートの挙動をまねたものです。
    </para>

    <programlisting language="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    ':module/:controller/:action/*',
    array('module' => 'default')
);
$router->addRoute('default', $route);
]]></programlisting>

    <section xml:id="zend.controller.router.routes.standard.variable-defaults"><info><title>変数のデフォルト</title></info>
        

        <para>
            ルートで使用するすべての変数についてデフォルト値を指定できます。
            これは、 <classname>Zend_Controller_Router_Route</classname>
            のコンストラクタの 2 番目のパラメータで指定します。
            このパラメータは、変数名をキーとする配列で、
            対応する値にそのデフォルト値を指定します。
        </para>

        <programlisting language="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array('year' => 2006)
);
$router->addRoute('archive', $route);
]]></programlisting>

        <para>
            上のルートは <filename>'http://domain.com/archive/2005'</filename> および
            <filename>'http://example.com/archive'</filename>
            のような <acronym>URL</acronym> にマッチします。後者の場合、変数 year にはデフォルト値である
            2006 が設定されます。
        </para>

        <para>
            この例は、year 変数をリクエストオブジェクトに注入することになります。
            そしてルーティング情報が存在しない
            (コントローラやアクションのパラメータが定義されていない) ので、
            アプリケーションはデフォルトのコントローラのデフォルトアクションメソッド
            (ともに <classname>Zend_Controller_Dispatcher_Abstract</classname> で定義されています)
            にディスパッチします。より使いやすくするには、
            ルートのデフォルトとしてコントローラとアクションを定義しておく必要があります。
        </para>

        <programlisting language="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array(
        'year'       => 2006,
        'controller' => 'archive',
        'action'     => 'show'
    )
);
$router->addRoute('archive', $route);
]]></programlisting>

        <para>
            このルートは、<classname>ArchiveController</classname> の
            <methodname>showAction()</methodname> を実行します。
        </para>

    </section>

    <section xml:id="zend.controller.router.routes.standard.variable-requirements"><info><title>変数の制約</title></info>
        

        <para>
            <classname>Zend_Controller_Router_Route</classname> のコンストラクタの
            三番目のパラメータで、変数の制約を指定できます。
            これは、正規表現で指定します。
        </para>

        <programlisting language="php"><![CDATA[
$route = new Zend_Controller_Router_Route(
    'archive/:year',
    array(
        'year'       => 2006,
        'controller' => 'archive',
        'action'     => 'show'
    ),
    array('year' => '\d+')
);
$router->addRoute('archive', $route);
]]></programlisting>

        <para>
            上の例のルートでは、year 変数の値が数値データである場合にのみ
            Rewrite ルータにマッチします。つまり
            <filename>http://domain.com/archive/2345</filename> はマッチしますが
            <filename>http://example.com/archive/test</filename> はマッチしません。
            この場合はチェイン内の次のルートに処理を移します。
        </para>
    </section>

    <section xml:id="zend.controller.router.routes.standard.translated-segments"><info><title>翻訳済みセグメント</title></info>
        

        <para>
            標準のルートは、翻訳済みセグメントをサポートします。この機能を使用するには、
            次のいずれかの方法で翻訳器 (<classname>Zend_Translator</classname> のインスタンス)
            を定義しなければなりません。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    レジストリに、キー <classname>Zend_Translator</classname> で格納する
                </para>
            </listitem>

            <listitem>
                <para>
                    静的メソッド
                    <methodname>Zend_Controller_Router_Route::setDefaultTranslator()</methodname> で設定する
                </para>
            </listitem>

            <listitem>
                <para>
                    コンストラクタの 4 番目のパラメータとして渡す
                </para>
            </listitem>
        </itemizedlist>

        <para>
            デフォルトでは、<classname>Zend_Translator</classname>
            のインスタンスで指定したロケールを使用します。これを上書きするには、
            (<classname>Zend_Locale</classname> のインスタンスあるいはロケール文字列で)
            次のいずれかの方法で設定します。
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    レジストリに、キー <classname>Zend_Locale</classname> で格納する
                </para>
            </listitem>

            <listitem>
                <para>
                    静的メソッド
                    <methodname>Zend_Controller_Router_Route::setDefaultLocale()</methodname> で設定する
                </para>
            </listitem>

            <listitem>
                <para>
                    コンストラクタの 5 番目のパラメータとして渡す
                </para>
            </listitem>

            <listitem>
                <para>
                    アセンブルメソッドのパラメータ <command>@locale</command> として渡す
                </para>
            </listitem>
        </itemizedlist>

        <para>
            翻訳済みセグメントはふたつの部分に分かれます。
            固定セグメントの前には <emphasis>@</emphasis> 記号がひとつつき、
            アセンブル時に現在のロケールに翻訳され、
            マッチングの際にはメッセージ ID に戻されます。
            動的セグメントの前には <command>:@</command> がつきます。
            アセンブルの際に、指定したパラメータが翻訳され、
            パラメータの位置に挿入されます。
            マッチングの際には、<acronym>URL</acronym> の翻訳済みパラメータが
            メッセージ ID に戻されます。
        </para>

        <note><info><title>メッセージ ID と分割された言語ファイル</title></info>
            

            <para>
                ルートの中で使いたいメッセージ ID が、
                ビュースクリプトやその他の部分ですでに使われていることもあるでしょう。
                <acronym>URL</acronym> の安全性を確保するには、
                ルートで使用するメッセージを別の言語ファイルに分割しなければなりません。
            </para>
        </note>

        <para>
            標準のルートで翻訳済みセグメントを使用するための準備として
            もっともシンプルな方法は、次のようになります。
        </para>

        <programlisting language="php"><![CDATA[
// 翻訳器を準備します
$translator = new Zend_Translator(
    array(
        'adapter' => 'array',
        'content' => array(),
        'locale'  => 'en'
    )
);
$translator->addTranslation(
    array(
        'content' =>
            array(
                'archive' => 'archiv',
                'year'    => 'jahr',
                'month'   => 'monat',
                'index'   => 'uebersicht'
            ),
        'locale'  => 'de'
    )
);

// 現在のロケールを翻訳器に設定します
$translator->setLocale('en');

// ルートのデフォルト翻訳器として設定します
Zend_Controller_Router_Route::setDefaultTranslator($translator);
]]></programlisting>

        <para>
            これは、静的セグメントを使用する例です。
        </para>

        <programlisting language="php"><![CDATA[
// ルートを作成します
$route = new Zend_Controller_Router_Route(
    '@archive',
    array(
        'controller' => 'archive',
        'action'     => 'index'
    )
);
$router->addRoute('archive', $route);

// URL をデフォルトのロケールでアセンブルします: archive
$route->assemble(array());

// URL をドイツ語でアセンブルします: archiv
$route->assemble(array());
]]></programlisting>

        <para>
            動的セグメントを使用すると、
            モジュールルートの翻訳済みバージョンを作ることができます。
        </para>

        <programlisting language="php"><![CDATA[
// ルートを作成します
$route = new Zend_Controller_Router_Route(
    ':@controller/:@action/*',
    array(
        'controller' => 'index',
        'action'     => 'index'
    )
);
$router->addRoute('archive', $route);

// URL をデフォルトのロケールでアセンブルします: archive/index/foo/bar
$route->assemble(array('controller' => 'archive', 'foo' => 'bar'));

// URL をドイツ語でアセンブルします: archiv/uebersicht/foo/bar
$route->assemble(array('controller' => 'archive', 'foo' => 'bar'));
]]></programlisting>

        <para>
            静的セグメントと動的セグメントを同時に使用することもできます。
        </para>

        <programlisting language="php"><![CDATA[
// ルートを作成します
$route = new Zend_Controller_Router_Route(
    '@archive/:@mode/:value',
    array(
        'mode'       => 'year'
        'value'      => 2005,
        'controller' => 'archive',
        'action'     => 'show'
    ),
    array('mode'  => '(month|year)'
          'value' => '\d+')
);
$router->addRoute('archive', $route);

// URL をデフォルトのロケールでアセンブルします: archive/month/5
$route->assemble(array('mode' => 'month', 'value' => '5'));

// URL をドイツ語でアセンブルします: archiv/monat/5
$route->assemble(array('mode' => 'month', 'value' => '5', '@locale' => 'de'));
]]></programlisting>
    </section>
</section>
