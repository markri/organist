<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.feed.custom-feed"><info><title>Własne klasy kanału i wpisu</title></info>
    

    <para>
        Ostatecznie możesz rozszerzyć klasę <code>Zend_Feed</code> jeśli chcesz
        stworzyć swój własny format lub zapewnić automatyczną obsługę elementów,
        które działają w innej przestrzeni nazw.
    </para>

    <para>
        Oto przykład własnej klasy wpisu Atom która obsługuje własną przestrzeń
        nazw <code>myns:</code> wpisów. Zauważ, że ona także wywołuje za Ciebie
        metodę <code>registerNamespace()</code>, dzięki czemu użytkownik końcowy
        nie musi w ogóle martwić się o przestrzenie nazw.
    </para>

    <example xml:id="zend.feed.custom-feed.example.extending"><info><title>Rozszerzanie klasy wpisu Atom z własnymi przestrzeniami nazw</title></info>
        
        <programlisting role="php"><![CDATA[
/**
 * Własna klasa wpisu może automatycznie nadawać adres URI (opcjonalnie)
 * oraz automatycznie dodawać dodatkowe przestrzenie nazw.
 */
class MyEntry extends Zend_Feed_Entry_Atom
{

    public function __construct($uri = 'http://www.example.com/myfeed/',
                                $xml = null)
    {
        parent::__construct($uri, $xml);

        Zend_Feed::registerNamespace('myns',
                                     'http://www.example.com/myns/1.0');
    }

    public function __get($var)
    {
        switch ($var) {
            case 'myUpdated':
                // Tłumaczy myUpdated na myns:updated.
                return parent::__get('myns:updated');

            default:
                return parent::__get($var);
            }
    }

    public function __set($var, $value)
    {
        switch ($var) {
            case 'myUpdated':
                // Tłumaczy myUpdated na myns:updated.
                parent::__set('myns:updated', $value);
                break;

            default:
                parent::__set($var, $value);
        }
    }

    public function __call($var, $unused)
    {
        switch ($var) {
            case 'myUpdated':
                // Tłumaczy myUpdated na myns:updated.
                return parent::__call('myns:updated', $unused);

            default:
                return parent::__call($var, $unused);
        }
    }

}

        ]]></programlisting>
        <para>
            Teraz aby użyć tej klasy, musisz po prostu bezpośrednio utworzyć jej
            instancję i przypisać wartość właściwości <code>myUpdated</code>:
        </para>
        <programlisting role="php"><![CDATA[
$entry = new MyEntry();
$entry->myUpdated = '2005-04-19T15:30';

// wywołanie w stylu metody jest obsługiwane przez funkcję __call
$entry->myUpdated();
// wywołanie w stylu właściwości jest obsługiwane przez funkcję __get
$entry->myUpdated;

        ]]></programlisting>
    </example>

</section>
