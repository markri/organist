<?xml version="1.0" encoding="utf-8"?>
<article xmlns="http://docbook.org/ns/docbook" version="5.0">
<section xml:id="learning.di.very-brief-introduction-to-di"><info><title>Very brief introduction to Di.</title></info>
  
  <para>
    <emphasis>Dependency Injection</emphasis> is a concept that has been
    talked about in numerous places over the web. For the purposes of
    this quickstart, we'll explain the act of injecting dependencies
    simply with this below code:
  </para>
  <programlisting language="php"><![CDATA[
$b = new B(new A));
]]></programlisting>
  <para>
    Above, A is a dependency of B, and A was
    <emphasis>injected</emphasis> into B. If you are not familar with
    the concept of dependency injection, here are a couple of great
    reads: Matthew Weier O'Phinney's
    <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://weierophinney.net/matthew/archives/260-Dependency-Injection-An-analogy.html">Analogy</link>,
    Ralph Schindler's
    <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://ralphschindler.com/2011/05/18/learning-about-dependency-injection-and-php">Learning
    DI</link>, or Fabien Potencier's
    <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://fabien.potencier.org/article/11/what-is-dependency-injection">Series
    on DI</link>.
  </para>
</section>
<section xml:id="learning.di.very-brief-introduction-to-di-container"><info><title>Very brief introduction to Di Container.</title></info>
  
  <programlisting language="php"><![CDATA[
TBD.
]]></programlisting>
</section>
<section xml:id="learning.di.simplest-usage-case-2-classes-one-consumes-the-other"><info><title>Simplest usage case (2 classes, one consumes the other)</title></info>
  
  <para>
    In the simplest use case, a developer might have one class
    (<literal>A</literal>) that is consumed by another class
    (<literal>B</literal>) through the constructor. By having the
    dependency injected through the constructor, this requires an object
    of type <literal>A</literal> be instantiated before an object of
    type <literal>B</literal> so that <literal>A</literal> can be
    injected into <literal>B</literal>.
  </para>
  <programlisting language="php"><![CDATA[
namespace My {

    class A
    {
        /* Some useful functionality */
    }

    class B
    {
        protected $a = null;
        public function __construct(A $a)
        {
            $this->a = $a;
        }
    }
}
]]></programlisting>
  <para>
    To create <literal>B</literal> by hand, a developer would follow
    this work flow, or a similar workflow to this:
  </para>
  <programlisting language="php"><![CDATA[
$b = new B(new A());
]]></programlisting>
  <para>
    If this workflow becomes repeated throughout your application
    multiple times, this creates an opportunity where one might want to
    DRY up the code. While there are several ways to do this, using a
    dependency injection container is one of these solutions. With
    Zend's dependency injection container
    <literal>Zend\Di\DependencyInjector</literal>, the above use case
    can be taken care of with no configuration (provided all of your
    autoloading is already configured properly) with the following
    usage:
  </para>
  <programlisting language="php"><![CDATA[
$di = new Zend\Di\DependencyInjector;
$b = $di->get('My\B'); // will produce a B object that is consuming an A object
]]></programlisting>
  <para>
    Moreover, by using the <literal>DependencyInjector::get()</literal>
    method, you are ensuring that the same exact object is returned on
    subsequent calls. To force new objects to be created on each and
    every request, one would use the
    <literal>DependencyInjector::newInstance()</literal> method:
  </para>
  <programlisting language="php"><![CDATA[
$b = $di->newInstance('My\B');
]]></programlisting>
  <para>
    Let's assume for a moment that <literal>A</literal> requires some
    configuration before it can be created. Our previous use case is
    expanded to this (we'll throw a 3rd class in for good measure):
  </para>
  <programlisting language="php"><![CDATA[
namespace My {

    class A
    {
        protected $username = null;
        protected $password = null;
        public function __construct($username, $password)
        {
            $this->username = $username;
            $this->password = $password;
        }
    }

    class B
    {
        protected $a = null;
        public function __construct(A $a)
        {
            $this->a = $a;
        }
    }

    class C
    {
        protected $b = null;
        public function __construct(B $b)
        {
            $this->b = $b;
        }
    }

}
]]></programlisting>
  <para>
    With the above, we need to ensure that our
    <literal>DependencyInjector</literal> is capable of seeing the
    <literal>A</literal> class with a few configuration values (which
    are generally scalar in nature). To do this, we need to interact
    with the <literal>InstanceManager</literal>:
  </para>
  <programlisting language="php"><![CDATA[
$di = new Zend\Di\DependencyInjector;
$di->getInstanceManager()->setProperty('A', 'username', 'MyUsernameValue');
$di->getInstanceManager()->setProperty('A', 'password', 'MyHardToGuessPassword%$#');
]]></programlisting>
  <para>
    Now that our container has values it can use when creating
    <literal>A</literal>, and our new goal is to have a
    <literal>C</literal> object that consumes <literal>B</literal> and
    in turn consumes <literal>A</literal>, the usage scenario is still
    the same:
  </para>
  <programlisting language="php"><![CDATA[
$c = $di->get('My\C');
// or
$c = $di->newInstance('My\C');
]]></programlisting>
  <para>
    Simple enough, but what if we wanted to pass in these parameters at
    call time? Assuming a default <literal>DependencyInjector</literal>
    object (<literal>$di = new Zend\Di\DependencyInjector()</literal>
    without any configuration to the
    <literal>InstanceManager</literal>), we could do the following:
  </para>
  <programlisting language="php"><![CDATA[
$parameters = array(
    'username' => 'MyUsernameValue',
    'password' => 'MyHardToGuessPassword%$#',
);

$c = $di->get('My\C', $parameters);
// or
$c = $di->newInstance('My\C', $parameters);
]]></programlisting>
  <para>
    Constructor injection is not the only supported type of injection.
    The other most popular method of injection is also supported: setter
    injection. Setter injection allows one to have a usage scenario that
    is the same as our previous example with the exception, for example,
    of our <literal>B</literal> class now looking like this:
  </para>
  <programlisting language="php"><![CDATA[
namespace My {
    class B
    {
        protected $a;
        public function setA(A $a)
        {
            $this->a = $a;
        }
    }
}
]]></programlisting>
  <para>
    Since the method is prefixed with set, and is followed by a capital
    letter, the <literal>DependencyInjector</literal> knows that this
    method is used for setter injection, and again, the use case
    <literal>$c = $di-&gt;get('C')</literal>, will once again know how
    to fill the dependencies when needed to create an object of type
    <literal>C</literal>.
  </para>
  <para>
    Other methods are being created to determine what the wirings
    between classes are, such as interface injection and annotation
    based injection.
  </para>
</section>
<section xml:id="learning.di.simplest-usage-case-without-type-hints"><info><title>Simplest Usage Case Without Type-hints</title></info>
  
  <para>
    If your code does not have type-hints or you are using 3rd party
    code that does not have type-hints but does practice dependency
    injection, you can still use the
    <literal>DependencyInjector</literal>, but you might find you need
    to describe your dependencies explicitly. To do this, you will need
    to interact with one of the definitions that is capable of letting a
    developer describe, with objects, the map between classes. This
    particular definition is called the
    <literal>BuilderDefinition</literal> and can work with, or in place
    of, the default <literal>RuntimeDefinition</literal>.
  </para>
  <para>
    Definitions are a part of the <literal>DependencyInjector</literal>
    that attempt to describe the relationship between classes so that
    <literal>DependencyInjector::newInstance()</literal> and
    <literal>DependencyInjector::get()</literal> can know what the
    dependencies are that need to be filled for a particular
    class/object. With no configuration,
    <literal>DependencyInjector</literal> will use the
    <literal>RuntimeDefinition</literal> which uses reflection and the
    type-hints in your code to determine the dependency map. Without
    type-hints, it will assume that all dependencies are scalar or
    required configuration parameters.
  </para>
  <para>
    The <literal>BuilderDefinition</literal>, which can be used in
    tandem with the <literal>RuntimeDefinition</literal> (technically,
    it can be used in tandem with any definition by way of the
    <literal>AggregateDefinition</literal>), allows you to
    programmatically describe the mappings with objects. Let's say for
    example, our above <literal>A/B/C</literal> usage scenario, were
    altered such that class <literal>B</literal> now looks like this:
  </para>
  <programlisting language="php"><![CDATA[
namespace My {
    class B
    {
        protected $a;
        public function setA($a)
        {
            $this->a = $a;
        }
    }
}
]]></programlisting>
  <para>
    You'll notice the only change is that setA now does not include any
    type-hinting information.
  </para>
  <programlisting language="php"><![CDATA[
use Zend\Di\DependencyInjector,
    Zend\Di\Definition,
    Zend\Di\Definition\Builder;

// Describe this class:
$builder = new Definition\BuilderDefinition;
$builder->addClass(($class = new Builder\PhpClass));

$class->setName('My\B');
$class->addInjectableMethod(($im = new Builder\InjectibleMethod));

$im->setName('setA');
$im->addParameter('a', 'My\A');

// Use both our Builder Definition as well as the default 
// RuntimeDefinition, builder first
$aDef = new Definition\AggregateDefinition;
$aDef->addDefinition($builder);
$aDef->addDefinition(new Definition\RuntimeDefinition);

// Now make sure the DependencyInjector understands it
$di = new DependencyInjector;
$di->setDefinition($aDef);

// and finally, create C
$parameters = array(
    'username' => 'MyUsernameValue',
    'password' => 'MyHardToGuessPassword%$#',
);

$c = $di->get('My\C', $parameters);
]]></programlisting>
  <para>
    This above usage scenario provides that whatever the code looks
    like, you can ensure that it works with the dependency injection
    container. In an ideal world, all of your code would have the proper
    type hinting and/or would be using a mapping strategy that reduces
    the amount of bootstrapping work that needs to be done in order to
    have a full definition that is capable of instantiating all of the
    objects you might require.
  </para>
</section>
<section xml:id="learning.di.simplest-usage-case-with-compiled-definition"><info><title>Simplest usage case with Compiled Definition</title></info>
  
  <para>
    Without going into the gritty details, as you might expect, PHP at
    its core is not DI friendly. Out-of-the-box, the
    <literal>DependencyInjector</literal> uses a
    <literal>RuntimeDefinition</literal> which does all class map
    resolution via PHP's <literal>Reflection</literal> extension. Couple
    that with the fact that PHP does not have a true application layer
    capable of storing objects in-memory between requests, and you get a
    recipe that is less performant than similar solutions you'll find in
    Java and .Net (where there is an application layer with in-memory
    object storage.)
  </para>
  <para>
    To mitigate this shortcoming, <literal>Zend\Di</literal> has several
    features built in capable of pre-compiling the most expensive tasks
    that surround dependency injection. It is worth noting that the
    <literal>RuntimeDefition</literal>, which is used by default, is the
    <emphasis role="strong">only</emphasis> definition that does lookups
    on-demand. The rest of the <literal>Definition</literal> objects are
    capable of being aggregated and stored to disk in a very performant
    way.
  </para>
  <para>
    Ideally, 3rd party code will ship with a pre-compiled
    <literal>Definition</literal> that will describe the various
    relationships and parameter/property needs of each class that is to
    be instantiated. This <literal>Definition</literal> would have been
    built as part of some deployment or packaging task by this 3rd
    party. When this is not the case, you can create these
    <literal>Definitions</literal> via any of the
    <literal>Definition</literal> types provided with the exception of
    the <literal>RuntimeDefinition</literal>. Here is a breakdown of the
    job of each definition type:
  </para>
  <itemizedlist>
    <listitem>
      <para>
        <literal>AggregateDefinition</literal> - Aggregates multiple
        definitions of various types. When looking for a class, it looks
        it up in the order the definitions were provided to this
        aggregate.
      </para>
    </listitem>
    <listitem>
      <para>
        <literal>ArrayDefinition</literal> - This definition takes an
        array of information and exposes it via the interface provided
        by <literal>Zend\Di\Definition</literal> suitable for usage by
        <literal>DependencyInjector</literal> or an
        <literal>AggregateDefinition</literal>
      </para>
    </listitem>
    <listitem>
      <para>
        <literal>BuilderDefinition</literal> - Creates a definition
        based on an object graph consisting of various
        <literal>Builder\PhpClass</literal> objects and
        <literal>Builder\InectionMethod</literal> objects that describe
        the mapping needs of the target codebase and …
      </para>
    </listitem>
    <listitem>
      <para>
        <literal>Compiler</literal> - This is not actually a definition,
        but produces an <literal>ArrayDefinition</literal> based off of
        a code scanner
        (<literal>Zend\Code\Scanner\DirectoryScanner</literal> or
        <literal>Zend\Code\Scanner\FileScanner</literal>).
      </para>
    </listitem>
  </itemizedlist>
  <para>
    The following is an example of producing a definition via a
    <literal>DirectoryScanner</literal>:
  </para>
  <programlisting language="php"><![CDATA[
$compiler = new Zend\Di\Definition\Compiler();
$compiler->addCodeScannerDirectory(
    new Zend\Code\Scanner\ScannerDirectory('path/to/library/My/')
);
$definition = $compiler->compile();
]]></programlisting>
  <para>
    This definition can then be directly used by the
    <literal>DependencyInjector</literal> (assuming the above
    <literal>A, B, C</literal> scenario was actually a file per class on
    disk):
  </para>
  <programlisting language="php"><![CDATA[
$di = new Zend\Di\DependencyInjector;
$di->setDefinition($definition);
$di->getInstanceManager()->setProperty('My\A', 'username', 'foo');
$di->getInstanceManager()->setProperty('My\A', 'password', 'bar');
$c = $di->get('My\C');
]]></programlisting>
  <para>
    One strategy for persisting these compiled definitions would be the
    following:
  </para>
  <programlisting language="php"><![CDATA[
if (!file_exists(__DIR__ . '/di-definition.php') && $isProduction) {
    $compiler = new Zend\Di\Definition\Compiler();
    $compiler->addCodeScannerDirectory(
        new Zend\Code\Scanner\ScannerDirectory('path/to/library/My/')
    );
    $definition = $compiler->compile();
    file_put_contents(
        __DIR__ . '/di-definition.php', 
        '<?php return ' . var_export($definition->toArray(), true) . ';'
    );
} else {
    $definition = new Zend\Di\Definition\ArrayDefinition(
        include __DIR__ . '/di-definition.php'
    );
}

// $definition can now be used; in a production system it will be written 
// to disk.
]]></programlisting>
  <para>
    Since <literal>Zend\Code\Scanner</literal> does not include files,
    the classes contained within are not loaded into memory. Instead,
    <literal>Zend\Code\Scanner</literal> uses tokenization to determine
    the structure of your files. This makes this suitable to use this
    solution during development and within the same request as any one
    of your application's dispatched actions.
  </para>
</section>
<section xml:id="learning.di.creating-a-precompiled-definition-for-others-to-use"><info><title>Creating a precompiled definition for others to use</title></info>
  
  <para>
    If you are a 3rd party code developer, it makes sense to produce a
    <literal>Definition</literal> file that describes your code so that
    others can utilize this <literal>Definition</literal> without having
    to <literal>Reflect</literal> it via the
    <literal>RuntimeDefintion</literal>, or create it via the
    <literal>Compiler</literal>. To do this, use the same technique as
    above. Instead of writing the resulting array to disk, you would
    write the information into a definition directly, by way of
    <literal>Zend\CodeGenerator</literal>:
  </para>
  <programlisting language="php"><![CDATA[
// First, compile the information
$compiler = new Zend\Di\Definition\Compiler();
$compiler->addCodeScannerDirectory(new Zend\Code\Scanner\DirectoryScanner(__DIR__ . '/My/'));
$definition = $compiler->compile();

// Now, create a Definition class for this information
$codeGenerator = new Zend\CodeGenerator\Php\PhpFile();
$codeGenerator->setClass(($class = new Zend\CodeGenerator\Php\PhpClass()));
$class->setNamespaceName('My');
$class->setName('DiDefinition');
$class->setExtendedClass('\Zend\Di\Definition\ArrayDefinition');
$class->setMethod(array(
    'name' => '__construct',
    'body' => 'parent::__construct(' . var_export($definition->toArray(), true) . ');'
));
file_put_contents(__DIR__ . '/My/DiDefinition.php', $codeGenerator->generate());
]]></programlisting>
</section>
<section xml:id="learning.di.using-multiple-definitions-from-multiple-sources"><info><title>Using Multiple Definitions From Multiple Sources</title></info>
  
  <para>
    In all actuality, you will be using code from multiple places, some
    Zend Framework code, some other 3rd party code, and of course, your
    own code that makes up your application. Here is a method for
    consuming definitions from multiple places:
  </para>
  <programlisting language="php"><![CDATA[
use Zend\Di\DependencyInjector,
    Zend\Di\Definition,
    Zend\Di\Definition\Builder;

$di = new DependencyInjector;
$diDefAggregate = new Definition\Aggregate();

// first add in provided Definitions, for example
$diDefAggregate->addDefinition(new ThirdParty\Dbal\DiDefinition());
$diDefAggregate->addDefinition(new Zend\Controller\DiDefinition());

// for code that does not have TypeHints
$builder = new Definition\BuilderDefinition();
$builder->addClass(($class = Builder\PhpClass));
$class->addInjectionMethod(
    ($injectMethod = new Builder\InjectionMethod())
);
$injectMethod->setName('injectImplementation');
$injectMethod->addParameter(
'implementation', 'Class\For\Specific\Implementation'
);

// now, your application code
$compiler = new Definition\Compiler()
$compiler->addCodeScannerDirectory(
    new Zend\Code\Scanner\DirectoryScanner(__DIR__ . '/App/')
);
$appDefinition = $compiler->compile();
$diDefAggregate->addDefinition($appDefinition);

// now, pass in properties
$im = $di->getInstanceManager();

// this could come from Zend\Config\Config::toArray
$propertiesFromConfig = array( 
    'ThirdParty\Dbal\DbAdapter' => array(
        'username' => 'someUsername', 
        'password' => 'somePassword'
    ),
    'Zend\Controller\Helper\ContentType' => array(
        'default' => 'xhtml5'
    ),
);
$im->setProperties($propertiesFromConfig);
]]></programlisting>
</section>
<section xml:id="learning.di.generating-service-locators"><info><title>Generating Service Locators</title></info>
    

    <para>
        In production, you want things to be as fast as possible. The Dependency
        Injection Container, while engineered for speed, still must do a fair
        bit of work resolving parameters and dependencies at runtime. What if
        you could speed things up and remove those lookups?
    </para>

    <para>
        The <classname>Zend\Di\ServiceLocator\Generator</classname> component
        can do just that. It takes a configured DI instance, and generates a
        service locator class for you from it. That class will manage instances
        for you, as well as provide hard-coded, lazy-loading instantiation of
        instances.
    </para>

    <para>
        The method <methodname>getCodeGenerator()</methodname> returns an
        instance of <classname>Zend\CodeGenerator\Php\PhpFile</classname>, from
        which you can then write a class file with the new Service Locator.
        Methods on the <classname>Generator</classname> class allow you to
        specify the namespace and class for the generated Service Locator.
    </para>

    <para>
        As an example, consider the following:
    </para>

    <programlisting language="php"><![CDATA[
use Zend\Di\ServiceLocator\Generator;

// $di is a fully configured DI instance
$generator = new Generator($di);

$generator->setNamespace('Application')
          ->setContainerClass('Context');
$file = $generator->getCodeGenerator();
$file->setFilename(__DIR__ . '/../Application/Context.php');
$file->write();
]]></programlisting>

    <para>
        The above code will write to
        <filename>../Application/Context.php</filename>, and that file will
        contain the class <classname>Application\Context</classname>. That file
        might look like the following:
    </para>

    <programlisting language="php"><![CDATA[
<?php

namespace Application;

use Zend\Di\ServiceLocator;

class Context extends ServiceLocator
{

    public function get($name, array $params = array())
    {
        switch ($name) {
            case 'composed':
            case 'My\ComposedClass':
                return $this->getMyComposedClass();
        
            case 'struct':
            case 'My\Struct':
                return $this->getMyStruct();
        
            default:
                return parent::get($name, $params);
        }
    }

    public function getComposedClass()
    {
        if (isset($this->services['My\ComposedClass'])) {
            return $this->services['My\ComposedClass'];
        }
        
        $object = new \My\ComposedClass();
        $this->services['My\ComposedClass'] = $object;
        return $object;
    }
    public function getMyStruct()
    {
        if (isset($this->services['My\Struct'])) {
            return $this->services['My\Struct'];
        }
        
        $object = new \My\Struct();
        $this->services['My\Struct'] = $object;
        return $object;
    }

    public function getComposed()
    {
        return $this->get('My\ComposedClass');
    }

    public function getStruct()
    {
        return $this->get('My\Struct');
    }
}
]]></programlisting>

    <para>
        To use this class, you simply consume it as you would a DI container:
    </para>

    <programlisting language="php"><![CDATA[
$container = new Application\Context;

$struct = $container->get('struct'); // My\Struct instance
]]></programlisting>

    <para>
        One note about this functionality in its current incarnation.
        Configuration is per-environment only at this time. This means that you
        will need to generate a container per execution environment. Our
        recommendation is that you do so, and then in your environment, specify
        the container class to use.
    </para>
</section>
</article>
