<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.module.intro">
    <info>
        <title>Introduction to the Module System</title>
    </info>

    <para>
        Zend Framework 2.0 introduces a new and powerful approach to modules.  This new module
        system is designed with flexibility, simplicity, and re-usability in mind. A module may
        contain just about anything: PHP code, including MVC functionality; library code; view
        scripts; and/or public assets such as images, CSS, and JavaScript. The possibilities are
        endless.
    </para>

    <note>
        <para>
            The module system in ZF2 has been designed to be useful as a generic and powerful
            foundation from which developers and other projects can build their own module or plugin
            systems.
        </para>

        <para>
            For a better understanding of the event-driven concepts behind the ZF2 module system, it
            may be helpful to read the <link linkend="zend.event-manager.event-manager">EventManager
                documentation.</link>.
        </para>
    </note>

    <para>
        The module system is made up of the following:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <emphasis role="strong">The Module Autoloader</emphasis> -
                <classname>Zend\Loader\ModuleAutoloader</classname> is a specialized autoloader that
                is responsible for the locating and loading of modules'
                <classname>Module</classname> classes from a variety of sources.
            </para>
        </listitem>

        <listitem>
            <para>
                <link linkend="zend.module.module-manager"><emphasis role="strong">The Module
                        Manager</emphasis></link> - <classname>Zend\Module\Manager</classname>
                simply takes an array of module names and fires a sequence of events for each one,
                allowing the behavior of the module system to be defined entirely by the listeners
                which are attached to the module manager.
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">Module Manager Listeners</emphasis> - Event listeners can be
                attached to the module manager's various events. These listeners can do everything
                from resolving and loading modules to performing complex initialization tasks and
                introspection into each returned module object.
            </para>
        </listitem>
    </itemizedlist>

    <note>
        <para>
            The name of a module in a typical Zend Framework 2 application is simply a <link
                xlink:href="http://php.net/namespaces"><acronym>PHP</acronym> namespace</link> and
            must follow all of the same rules for naming.
        </para>
    </note>

    <para>
        The recommended structure of a typical MVC-oriented ZF2 module is as follows:
    </para>

    <literallayout>
module_root/
    Module.php
    autoload_classmap.php
    autoload_function.php
    autoload_register.php
    config/
        module.config.php
    public/
        images/
        css/
        js/
    src/
        &lt;module_namespace&gt;/
            &lt;code files&gt;
    tests/
        phpunit.xml
        bootstrap.php
        &lt;module_namespace&gt;/
            &lt;test code files&gt;
    views/
        &lt;dir-named-after-a-controller/
            &lt;.phtml files&gt;
</literallayout>

    <section xml:id="zend.module.intro.the-autoload-files">
        <info>
            <title>The autoload_*.php Files</title>
        </info>

        <para>
            The three <filename>autoload_*.php</filename> files are not required, but recommended.
            They provide the following:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <filename>autoload_classmap.php</filename> should return an array classmap of
                    class name/filename pairs (with the filenames resolved via the
                    <varname>__DIR__</varname> magic constant).
                </para>
            </listitem>

            <listitem>
                <para>
                    <filename>autoload_function.php</filename> should return a PHP callback that can
                    be passed to <methodname>spl_autoload_register()</methodname>.  Typically, this
                    callback should utilize the map returned by
                    <filename>autoload_classmap.php</filename>.
                </para>
            </listitem>

            <listitem>
                <para>
                    <filename>autoload_register.php</filename> should register a PHP callback
                    (typically that returned by <filename>autoload_function.php</filename> with
                    <methodname>spl_autoload_register()</methodname>.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            The purpose of these three files is to provide reasonable default mechanisms for
            autoloading the classes contained in the module, thus providing a trivial way to consume
            the module without requiring <classname>Zend\Module</classname> (e.g., for use outside a
            ZF2 application).
        </para>
    </section>
</section>
