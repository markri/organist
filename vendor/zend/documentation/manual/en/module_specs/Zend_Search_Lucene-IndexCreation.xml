<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.search.lucene.index-creation"><info><title>Building Indexes</title></info>
    

    <section xml:id="zend.search.lucene.index-creation.creating"><info><title>Creating a New Index</title></info>
        

        <para>
            Index creation and updating capabilities are implemented within the
            <classname>Zend_Search_Lucene</classname> component, as well as the Java Lucene project.
            You can use either of these options to create indexes that
            <classname>Zend_Search_Lucene</classname> can search.
        </para>

        <para>
            The <acronym>PHP</acronym> code listing below provides an example of how to index a file
            using <classname>Zend_Search_Lucene</classname> indexing <acronym>API</acronym>:
        </para>

        <programlisting language="php"><![CDATA[
// Create index
$index = Zend_Search_Lucene::create('/data/my-index');

$doc = new Zend_Search_Lucene_Document();

// Store document URL to identify it in the search results
$doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));

// Index document contents
$doc->addField(Zend_Search_Lucene_Field::UnStored('contents', $docContent));

// Add document to the index
$index->addDocument($doc);
]]></programlisting>

        <para>
            Newly added documents are immediately searchable in the index.
        </para>
    </section>

    <section xml:id="zend.search.lucene.index-creation.updating"><info><title>Updating Index</title></info>
        

        <para>
            The same procedure is used to update an existing index. The only difference
            is that the open() method is called instead of the create() method:
        </para>

        <programlisting language="php"><![CDATA[
// Open existing index
$index = Zend_Search_Lucene::open('/data/my-index');

$doc = new Zend_Search_Lucene_Document();
// Store document URL to identify it in search result.
$doc->addField(Zend_Search_Lucene_Field::Text('url', $docUrl));
// Index document content
$doc->addField(Zend_Search_Lucene_Field::UnStored('contents',
                                                  $docContent));

// Add document to the index.
$index->addDocument($doc);
]]></programlisting>
    </section>

    <section xml:id="zend.search.lucene.index-creation.document-updating"><info><title>Updating Documents</title></info>
        

        <para>
            The Lucene index file format doesn't support document updating.
            Documents should be removed and re-added to the index to effectively update them.
        </para>

        <para>
            <methodname>Zend_Search_Lucene::delete()</methodname> method operates with an internal
            index document id. It can be retrieved from a query hit by 'id' property:
        </para>

        <programlisting language="php"><![CDATA[
$removePath = ...;
$hits = $index->find('path:' . $removePath);
foreach ($hits as $hit) {
    $index->delete($hit->id);
}
]]></programlisting>
    </section>

    <section xml:id="zend.search.lucene.index-creation.counting"><info><title>Retrieving Index Size</title></info>
        

        <para>
            There are two methods to retrieve the size of an index in
            <classname>Zend_Search_Lucene</classname>.
        </para>

        <para>
             <methodname>Zend_Search_Lucene::maxDoc()</methodname> returns one greater than the
             largest possible document number. It's actually the overall number of the documents in
             the index including deleted documents, so it has a synonym:
             <methodname>Zend_Search_Lucene::count()</methodname>.
        </para>

        <para>
             <methodname>Zend_Search_Lucene::numDocs()</methodname> returns the total number of
             non-deleted documents.
        </para>

        <programlisting language="php"><![CDATA[
$indexSize = $index->count();
$documents = $index->numDocs();
]]></programlisting>

        <para>
            <methodname>Zend_Search_Lucene::isDeleted($id)</methodname> method may be used to check
            if a document is deleted.
        </para>

        <programlisting language="php"><![CDATA[
for ($count = 0; $count < $index->maxDoc(); $count++) {
    if ($index->isDeleted($count)) {
        echo "Document #$id is deleted.\n";
    }
}
]]></programlisting>

        <para>
            Index optimization removes deleted documents and squeezes documents' IDs in to a smaller
            range. A document's internal id may therefore change during index optimization.
        </para>
    </section>

    <section xml:id="zend.search.lucene.index-creation.optimization"><info><title>Index optimization</title></info>
        

        <para>
            A Lucene index consists of many segments. Each segment is a completely independent set
            of data.
        </para>

        <para>
            Lucene index segment files can't be updated by design. A segment update needs full
            segment reorganization. See Lucene index file formats for details (<link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://lucene.apache.org/java/2_3_0/fileformats.html">http://lucene.apache.org/java/2_3_0/fileformats.html</link>)

            <footnote>
                <para>
                    The currently supported Lucene index file format is version 2.3 (starting from
                    Zend Framework 1.6).
                </para>
            </footnote>.

            New documents are added to the index by creating new segment.
        </para>

        <para>
            Increasing number of segments reduces quality of the index, but index optimization
            restores it. Optimization essentially merges several segments into a new one. This
            process also doesn't update segments. It generates one new large segment and updates
            segment list ('segments' file).
        </para>

        <para>
            Full index optimization can be trigger by calling the
            <methodname>Zend_Search_Lucene::optimize()</methodname> method. It merges all index
            segments into one new segment:
        </para>

        <programlisting language="php"><![CDATA[
// Open existing index
$index = Zend_Search_Lucene::open('/data/my-index');

// Optimize index.
$index->optimize();
]]></programlisting>

        <para>
            Automatic index optimization is performed to keep indexes in a consistent state.
        </para>

        <para>
            Automatic optimization is an iterative process managed by several index options. It
            merges very small segments into larger ones, then merges these larger segments into even
            larger segments and so on.
        </para>

        <section xml:id="zend.search.lucene.index-creation.optimization.maxbuffereddocs"><info><title>MaxBufferedDocs auto-optimization option</title></info>
            

            <para>
                <emphasis>MaxBufferedDocs</emphasis> is a minimal number of documents required
                before the buffered in-memory documents are written into a new segment.
            </para>

            <para>
                <emphasis>MaxBufferedDocs</emphasis> can be retrieved or set by
                <code>$index-&gt;getMaxBufferedDocs()</code> or
                <code>$index-&gt;setMaxBufferedDocs($maxBufferedDocs)</code> calls.
            </para>

            <para>
                Default value is 10.
            </para>
        </section>

        <section xml:id="zend.search.lucene.index-creation.optimization.maxmergedocs"><info><title>MaxMergeDocs auto-optimization option</title></info>
            

            <para>
                <emphasis>MaxMergeDocs</emphasis> is a largest number of documents ever merged by
                addDocument(). Small values (e.g., less than 10.000) are best for interactive
                indexing, as this limits the length of pauses while indexing to a few seconds.
                Larger values are best for batched indexing and speedier searches.
            </para>

            <para>
                <emphasis>MaxMergeDocs</emphasis> can be retrieved or set by
                <code>$index-&gt;getMaxMergeDocs()</code> or
                <code>$index-&gt;setMaxMergeDocs($maxMergeDocs)</code> calls.
            </para>

            <para>
                Default value is PHP_INT_MAX.
            </para>
        </section>

        <section xml:id="zend.search.lucene.index-creation.optimization.mergefactor"><info><title>MergeFactor auto-optimization option</title></info>
            

            <para>
                <emphasis>MergeFactor</emphasis> determines how often segment indices are merged by
                addDocument(). With smaller values, less <acronym>RAM</acronym> is used while
                indexing, and searches on unoptimized indices are faster, but indexing speed is
                slower. With larger values, more <acronym>RAM</acronym> is used during indexing, and
                while searches on unoptimized indices are slower, indexing is faster. Thus larger
                values (&gt; 10) are best for batch index creation, and smaller values (&lt; 10) for
                indices that are interactively maintained.
            </para>

            <para>
                <emphasis>MergeFactor</emphasis> is a good estimation for average number of segments
                merged by one auto-optimization pass. Too large values produce large number of
                segments while they are not merged into new one. It may be a cause of "failed to
                open stream: Too many open files" error message. This limitation is system
                dependent.
            </para>

            <para>
                <emphasis>MergeFactor</emphasis> can be retrieved or set by
                <code>$index-&gt;getMergeFactor()</code> or
                <code>$index-&gt;setMergeFactor($mergeFactor)</code> calls.
            </para>

            <para>
                Default value is 10.
            </para>

            <para>
                Lucene Java and Luke (Lucene Index Toolbox - <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.getopt.org/luke/">http://www.getopt.org/luke/</link>) can also
                be used to optimize an index. Latest Luke release (v0.8) is based on Lucene v2.3 and
                compatible with current implementation of <classname>Zend_Search_Lucene</classname>
                component (Zend Framework 1.6). Earlier versions of
                <classname>Zend_Search_Lucene</classname> implementations need another versions of
                Java Lucene tools to be compatible:

                <itemizedlist>
                    <listitem>
                        <para>
                            Zend Framework 1.5 - Java Lucene 2.1 (Luke tool v0.7.1 - <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.getopt.org/luke/luke-0.7.1/">http://www.getopt.org/luke/luke-0.7.1/</uri>)
                        </para>
                    </listitem>

                    <listitem>
                        <para>
                            Zend Framework 1.0 - Java Lucene 1.4 - 2.1 (Luke tool v0.6 - <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.getopt.org/luke/luke-0.6/">http://www.getopt.org/luke/luke-0.6/</uri>)
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </section>

    <section xml:id="zend.search.lucene.index-creation.permissions"><info><title>Permissions</title></info>
        

        <para>
            By default, index files are available for reading and writing by everyone.
        </para>

        <para>
            It's possible to override this with the
            <methodname>Zend_Search_Lucene_Storage_Directory_Filesystem::setDefaultFilePermissions()</methodname>
            method:
        </para>

        <programlisting language="php"><![CDATA[
// Get current default file permissions
$currentPermissions =
    Zend_Search_Lucene_Storage_Directory_Filesystem::getDefaultFilePermissions();

// Give read-writing permissions only for current user and group
Zend_Search_Lucene_Storage_Directory_Filesystem::setDefaultFilePermissions(0660);
]]></programlisting>
    </section>

    <section xml:id="zend.search.lucene.index-creation.limitations"><info><title>Limitations</title></info>
        

        <section xml:id="zend.search.lucene.index-creation.limitations.index-size"><info><title>Index size</title></info>
            

            <para>
                Index size is limited by 2GB for 32-bit platforms.
            </para>

            <para>
                Use 64-bit platforms for larger indices.
            </para>
        </section>

        <section xml:id="zend.search.lucene.index-creation.limitations.filesystems"><info><title>Supported Filesystems</title></info>
            

            <para>
                <classname>Zend_Search_Lucene</classname> uses <methodname>flock()</methodname> to
                provide concurrent searching, index updating and optimization.
            </para>

            <para>
                According to the <acronym>PHP</acronym> <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.php.net/manual/en/function.flock.php">documentation</link>,
                "<methodname>flock()</methodname> will not work on NFS and many other networked file
                systems".
            </para>

            <para>
                Do not use networked file systems with <classname>Zend_Search_Lucene</classname>.
            </para>
        </section>
    </section>
</section>
