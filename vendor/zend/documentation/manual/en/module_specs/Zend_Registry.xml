<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.registry.using"><info><title>Using the Registry</title></info>
    

    <para>
        A registry is a container for storing objects and values in the
        application space. By storing the value in a registry, the same
        object is always available throughout your application.
        This mechanism is an alternative to using global storage.
    </para>

    <para>
        The typical method to use registries with Zend Framework is through static methods in the
        <classname>Zend_Registry</classname> class. Alternatively, the registry can be used as an
        array object, so you can access elements stored within it with a convenient array-like
        interface.
    </para>

    <section xml:id="zend.registry.using.storing"><info><title>Setting Values in the Registry</title></info>
        

        <para>
            Use the static method <methodname>set()</methodname> to store an entry in the registry.
        </para>

        <example xml:id="zend.registry.using.storing.example"><info><title>Example of set() Method Usage</title></info>
            

            <programlisting language="php"><![CDATA[
Zend_Registry::set('index', $value);
]]></programlisting>
        </example>

        <para>
            The value returned can be an object, an array, or a scalar.
            You can change the value stored in a specific entry of
            the registry by calling the <methodname>set()</methodname> method to set the entry
            to a new value.
        </para>

        <para>
            The index can be a scalar (<constant>NULL</constant>, string, or number), like an
            ordinary array.
        </para>
    </section>

    <section xml:id="zend.registry.using.retrieving"><info><title>Getting Values from the Registry</title></info>
        

        <para>
            To retrieve an entry from the registry, use the static
            <methodname>get()</methodname> method.
        </para>

        <example xml:id="zend.registry.using.retrieving.example"><info><title>Example of get() Method Usage</title></info>
            

            <programlisting language="php"><![CDATA[
$value = Zend_Registry::get('index');
]]></programlisting>
        </example>

        <para>
            The <methodname>getInstance()</methodname> method returns the singleton registry object.
            This registry object is iterable, making all values stored in the registry easily
            accessible.
        </para>

        <example xml:id="zend.registry.using.retrieving.example-iterating"><info><title>Example of Iterating over the Registry</title></info>
            

            <programlisting language="php"><![CDATA[
$registry = Zend_Registry::getInstance();

foreach ($registry as $index => $value) {
    echo "Registry index $index contains:\n";
    var_dump($value);
}
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.registry.using.constructing"><info><title>Constructing a Registry Object</title></info>
        

        <para>
            In addition to accessing the static registry via
            static methods, you can create an instance directly and
            use it as an object.
        </para>

        <para>
            The registry instance you access through the
            static methods is simply one such instance. It is
            for convenience that it is stored statically, so that it is
            accessible from anywhere in an application.
        </para>

        <para>
            Use the traditional <emphasis>new</emphasis> operator to instantiate
            <classname>Zend_Registry</classname>. Instantiating <classname>Zend_Registry</classname>
            using its constructor also makes initializing the entries in the registry simple by
            taking an associative array as an argument.
        </para>

        <example xml:id="zend.registry.using.constructing.example"><info><title>Example of Constructing a Registry</title></info>
            

            <programlisting language="php"><![CDATA[
$registry = new Zend_Registry(array('index' => $value));
]]></programlisting>
        </example>

        <para>
            Once such a <classname>Zend_Registry</classname> object is instantiated,
            you can use it by calling any array object method or by setting it
            as the singleton instance for <classname>Zend_Registry</classname> with the static
            method <methodname>setInstance()</methodname>.
        </para>

        <example xml:id="zend.registry.using.constructing.example-setinstance"><info><title>Example of Initializing the Singleton Registry</title></info>
            

            <programlisting language="php"><![CDATA[
$registry = new Zend_Registry(array('index' => $value));

Zend_Registry::setInstance($registry);
]]></programlisting>
        </example>

        <para>
            The <methodname>setInstance()</methodname> method throws a
            <classname>Zend_Exception</classname> if the static registry has already been
            initialized.
        </para>
    </section>

    <section xml:id="zend.registry.using.array-access"><info><title>Accessing the Registry as an Array</title></info>
        

        <para>
            If you have several values to get or set, you may find it
            convenient to access the registry with array notation.
        </para>

        <example xml:id="zend.registry.using.array-access.example"><info><title>Example of Array Access</title></info>
            

            <programlisting language="php"><![CDATA[
$registry = Zend_Registry::getInstance();

$registry['index'] = $value;

var_dump( $registry['index'] );
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.registry.using.array-object"><info><title>Accessing the Registry as an Object</title></info>
        

        <para>
            You may also find it convenient to access the registry
            in an object-oriented fashion by using index names as object
            properties.
            You must specifically construct the registry
            object using the <constant>ArrayObject::ARRAY_AS_PROPS</constant> option
            and initialize the static instance to enable this functionality.

            <note>
                <para>You must set the <constant>ArrayObject::ARRAY_AS_PROPS</constant> option
                <emphasis>before</emphasis> the static registry has been accessed for
                the first time.</para>
            </note>
        </para>

        <warning><info><title>Known Issues with the ArrayObject::ARRAY_AS_PROPS Option</title></info>
            

            <para>
                Some versions of <acronym>PHP</acronym> have proven very buggy when using the
                registry with the <constant>ArrayObject::ARRAY_AS_PROPS</constant> option.
            </para>
        </warning>

        <example xml:id="zend.registry.using.array-object.example"><info><title>Example of Object Access</title></info>
            

            <programlisting language="php"><![CDATA[
// in your application bootstrap:
$registry = new Zend_Registry(array(), ArrayObject::ARRAY_AS_PROPS)
Zend_Registry::setInstance($registry);
$registry->tree = 'apple';

.
.
.

// in a different function, elsewhere in your application:
$registry = Zend_Registry::getInstance();

echo $registry->tree; // echo's "apple"

$registry->index = $value;

var_dump($registry->index);
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.registry.using.isset"><info><title>Querying if an Index Exists</title></info>
        

        <para>
            To find out if a particular index in the registry
            has been set, use the static method <methodname>isRegistered()</methodname>.
        </para>

        <example xml:id="zend.registry.using.isset.example-isregistered"><info><title>Example of isRegistered() Method Usage</title></info>
            

            <programlisting language="php"><![CDATA[
if (Zend_Registry::isRegistered($index)) {
    $value = Zend_Registry::get($index);
}
]]></programlisting>
        </example>

        <para>
            To find out if a particular index in a registry
            array or object has a value, use the <methodname>isset()</methodname> function
            as you would with an ordinary array.
        </para>

        <example xml:id="zend.registry.using.isset.example-isset"><info><title>Example of isset() Method Usage</title></info>
            

            <programlisting language="php"><![CDATA[
$registry = Zend_Registry::getInstance();

// using array access syntax
if (isset($registry['index'])) {
    var_dump( $registry['index'] );
}

// using object access syntax
if (isset($registry->index)) {
    var_dump( $registry->index );
}
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.registry.using.subclassing"><info><title>Extending the Registry</title></info>
        

        <para>
            The static registry is an instance of the class <classname>Zend_Registry</classname>.
            If you want to add functionality to the registry, you should
            create a class that extends <classname>Zend_Registry</classname> and
            specify this class to instantiate for the singleton in the static registry.
            Use the static method <methodname>setClassName()</methodname> to specify
            the class.

            <note>
                <para>The class must be a subclass of <classname>Zend_Registry</classname>.</para>
            </note>
        </para>

        <example xml:id="zend.registry.using.subclassing.example"><info><title>Example of Specifying the Singleton Registry's Class Name</title></info>
            

            <programlisting language="php"><![CDATA[
Zend_Registry::setClassName('My_Registry');

Zend_Registry::set('index', $value);
]]></programlisting>
        </example>

        <para>
            The registry throws a <classname>Zend_Exception</classname> if you attempt to set the
            classname after the registry has been accessed for the first time.
            It is therefore recommended that you specify the class name for your
            static registry in your application bootstrap.
        </para>
    </section>

    <section xml:id="zend.registry.using.unsetting"><info><title>Unsetting the Static Registry</title></info>
        

        <para>
            Although it is not normally necessary, you can
            unset the singleton instance of the registry, if desired.
            Use the static method <methodname>_unsetInstance()</methodname> to do so.
        </para>

        <warning><info><title>Data Loss Risk</title></info>
            

            <para>
                When you use <methodname>_unsetInstance()</methodname>,
                all data in the static registry are
                discarded and cannot be recovered.
            </para>
        </warning>

        <para>
            You might use this method, for example, if you want to
            use <methodname>setInstance()</methodname> or <methodname>setClassName()</methodname>
            after the singleton registry object has been initialized.
            Unsetting the singleton instance allows you to use these methods
            even after the singleton registry object has been set. Using
            <classname>Zend_Registry</classname> in this manner is not recommended for typical
            applications and environments.
        </para>

        <example xml:id="zend.registry.using.unsetting.example"><info><title>Example of _unsetInstance() Method Usage</title></info>
            

            <programlisting language="php"><![CDATA[
Zend_Registry::set('index', $value);

Zend_Registry::_unsetInstance();

// change the class
Zend_Registry::setClassName('My_Registry');

Zend_Registry::set('index', $value);
]]></programlisting>
        </example>
    </section>
</section>
