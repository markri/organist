<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.http.client">
    <info>
        <title>Zend\Http\Client</title>
    </info>

    <section xml:id="zend.http.client.intro">

        <info>
            <title>Overview</title>
        </info>

        <para>
            <classname>Zend\Http\Client</classname> provides an easy interface for preforming Hyper-Text
            Transfer Protocol (HTTP) requests. <classname>Zend\Http\Client</classname> supports most
            simple features expected from an <acronym>HTTP</acronym> client, as well as some more
            complex features such as <acronym>HTTP</acronym> authentication and file uploads. Successful
            requests (and most unsuccessful ones too) return a <classname>Zend\Http\Response</classname>
            object, which provides access to the response's headers and body (see
            <link linkend="zend.http.response">this section</link>).
        </para>

    </section>

    <section xml:id="zend.http.client.quick-start">
        <info>
            <title>Quick Start</title>
        </info>

        <para>
            The class constructor optionally accepts a URL as its first parameter
            (can be either a string or a <classname>Zend\Uri\Http</classname> object), and an array
            or <classname>Zend\Config\Config</classname> object containing configuration options. Both can
            be left out, and set later using the setUri() and setConfig() methods.
        </para>

        <programlisting language="php"><![CDATA[
use Zend\Http\Client;
$client = new Client('http://example.org', array(
    'maxredirects' => 0,
    'timeout'      => 30
));

// This is actually exactly the same:
$client = new Client();
$client->setUri('http://example.org');
$client->setConfig(array(
    'maxredirects' => 0,
    'timeout'      => 30
));

// You can also use a Zend\Config\Ini object to set the client's configuration
$config = new Zend\Config\Ini('httpclient.ini', 'secure');
$client->setConfig($config);
]]></programlisting>

        <note>
            <para>
                <classname>Zend\Http\Client</classname> uses
                <classname>Zend\Uri\Http</classname> to validate URLs. This means
                that some special characters like the pipe symbol ('|') or the
                caret symbol ('^') will not be accepted in the URL by default.
                This can be modified by setting the 'allowunwise' option of
                <classname>Zend\Uri</classname> to '<constant>TRUE</constant>'.
                See <link linkend="zend.uri.validation.allowunwise">this section</link> for more
                information.
            </para>
        </note>

    </section>

    <section xml:id="zend.http.client.options">

        <info>
            <title>Configuration Options</title>
        </info>

        <para>
            The constructor and setConfig() method accept an associative array
            of configuration parameters, or a <classname>Zend\Config\Config</classname> object. Setting
            these parameters is optional, as they all have default values.

            <table xml:id="zend.http.client.configuration.table"><info><title>Zend\Http\Client configuration parameters</title></info>


                <tgroup cols="4">
                    <thead>
                        <row>
                            <entry>Parameter</entry>
                            <entry>Description</entry>
                            <entry>Expected Values</entry>
                            <entry>Default Value</entry>
                        </row>
                    </thead>

                    <tbody>
                        <row>
                            <entry>maxredirects</entry>
                            <entry>Maximum number of redirections to follow (0 = none)</entry>
                            <entry>integer</entry>
                            <entry>5</entry>
                        </row>

                        <row>
                            <entry>strict</entry>

                            <entry>
                                Whether perform validation on header names. When set to
                                <constant>FALSE</constant>, validation functions will be skipped.
                                Usually this should not be changed
                            </entry>

                            <entry>boolean</entry>
                            <entry><constant>TRUE</constant></entry>
                        </row>

                        <row>
                            <entry>strictredirects</entry>

                            <entry>
                                Whether to strictly follow the <acronym>RFC</acronym> when
                                redirecting (see <link linkend="zend.http.client.redirections">this section</link>)
                            </entry>

                            <entry>boolean</entry>
                            <entry><constant>FALSE</constant></entry>
                        </row>

                        <row>
                            <entry>useragent</entry>
                            <entry>User agent identifier string (sent in request headers)</entry>
                            <entry>string</entry>
                            <entry>'Zend\Http\Client'</entry>
                        </row>

                        <row>
                            <entry>timeout</entry>
                            <entry>Connection timeout (seconds)</entry>
                            <entry>integer</entry>
                            <entry>10</entry>
                        </row>

                        <row>
                            <entry>httpversion</entry>
                            <entry>HTTP protocol version (usually '1.1' or '1.0')</entry>
                            <entry>string</entry>
                            <entry>'1.1'</entry>
                        </row>

                        <row>
                            <entry>adapter</entry>

                            <entry>
                                Connection adapter class to use (see <link linkend="zend.http.client.adapters">this section</link>)
                            </entry>

                            <entry>mixed</entry>
                            <entry>'Zend\Http\Client\Adapter\Socket'</entry>
                        </row>

                        <row>
                            <entry>keepalive</entry>

                            <entry>
                                Whether to enable keep-alive connections with the server. Useful and
                                might improve performance if several consecutive requests to the
                                same server are performed.
                            </entry>

                            <entry>boolean</entry>
                            <entry><constant>FALSE</constant></entry>
                        </row>

                        <row>
                            <entry>storeresponse</entry>

                            <entry>
                                Whether to store last response for later retrieval with
                                <methodname>getLastResponse()</methodname>. If set to
                                <constant>FALSE</constant>
                                <methodname>getLastResponse()</methodname> will return
                                <constant>NULL</constant>.
                            </entry>

                            <entry>boolean</entry>
                            <entry><constant>TRUE</constant></entry>
                        </row>
                        <row>
                            <entry>encodecookies</entry>

                            <entry>
                                Whether to pass the cookie value through urlencode/urldecode.
                                Enabling this breaks support with some web servers.
                                Disabling this limits the range of values the cookies can contain.
                            </entry>

                            <entry>boolean</entry>
                            <entry><constant>TRUE</constant></entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>

    </section>

    <section xml:id="zend.http.client.methods">
        <info>
            <title>Available Methods</title>
        </info>

        <variablelist>
            <varlistentry xml:id="zend.http.client.methods.__construct">
                <term>
                    <methodsynopsis>
                        <methodname>__construct</methodname>
                        <methodparam>
                            <funcparams>string $uri, array $config</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Constructor</para>
                    <para></para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-config">
                <term>
                    <methodsynopsis>
                        <methodname>setConfig</methodname>
                        <methodparam>
                            <funcparams>Config|array $config = array (
)</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set configuration parameters for this HTTP client</para>
                    <para></para>
                    <para>Returns Zend\Http\Client</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-adapter">
                <term>
                    <methodsynopsis>
                        <methodname>setAdapter</methodname>
                        <methodparam>
                            <funcparams>Zend\Http\Client\Adapter|string $adapter</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Load the connection adapter</para>
                    <para>While this method is not called more than one for a client, it is
seperated from -&gt;request() to preserve logic and readability</para>
                    <para>Returns null</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-adapter">
                <term>
                    <methodsynopsis>
                        <methodname>getAdapter</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Load the connection adapter</para>
                    <para></para>
                    <para>Returns Zend\Http\Client\Adapter</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-request">
                <term>
                    <methodsynopsis>
                        <methodname>getRequest</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get Request</para>
                    <para></para>
                    <para>Returns Request</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-response">
                <term>
                    <methodsynopsis>
                        <methodname>getResponse</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get Response</para>
                    <para></para>
                    <para>Returns Response</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-request">
                <term>
                    <methodsynopsis>
                        <methodname>setRequest</methodname>
                        <methodparam>
                            <funcparams>Zend\Http\Zend\Http\Request $request</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set request</para>
                    <para></para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-response">
                <term>
                    <methodsynopsis>
                        <methodname>setResponse</methodname>
                        <methodparam>
                            <funcparams>Zend\Http\Zend\Http\Response $response</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set response</para>
                    <para></para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-last-request">
                <term>
                    <methodsynopsis>
                        <methodname>getLastRequest</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get the last request (as a string)</para>
                    <para></para>
                    <para>Returns string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-last-response">
                <term>
                    <methodsynopsis>
                        <methodname>getLastResponse</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get the last response (as a string)</para>
                    <para></para>
                    <para>Returns string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-redirections-count">
                <term>
                    <methodsynopsis>
                        <methodname>getRedirectionsCount</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get the redirections count</para>
                    <para></para>
                    <para>Returns integer</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-uri">
                <term>
                    <methodsynopsis>
                        <methodname>setUri</methodname>
                        <methodparam>
                            <funcparams>string|Zend\Http\Zend\Uri\Http $uri</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set Uri (to the request)</para>
                    <para></para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-uri">
                <term>
                    <methodsynopsis>
                        <methodname>getUri</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get uri (from the request)</para>
                    <para></para>
                    <para>Returns Zend\Http\Zend\Uri\Http</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-method">
                <term>
                    <methodsynopsis>
                        <methodname>setMethod</methodname>
                        <methodparam>
                            <funcparams>string $method</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set the HTTP method (to the request)</para>
                    <para></para>
                    <para>Returns Zend\Http\Client</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-method">
                <term>
                    <methodsynopsis>
                        <methodname>getMethod</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get the HTTP method</para>
                    <para></para>
                    <para>Returns string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-enc-type">
                <term>
                    <methodsynopsis>
                        <methodname>setEncType</methodname>
                        <methodparam>
                            <funcparams>string $encType, string $boundary</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set the encoding type and the boundary (if any)</para>
                    <para></para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-enc-type">
                <term>
                    <methodsynopsis>
                        <methodname>getEncType</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get the encoding type</para>
                    <para></para>
                    <para>Returns type</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-raw-body">
                <term>
                    <methodsynopsis>
                        <methodname>setRawBody</methodname>
                        <methodparam>
                            <funcparams>string $body</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set raw body (for advanced use cases)</para>
                    <para></para>
                    <para>Returns Zend\Http\Client</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-parameter-post">
                <term>
                    <methodsynopsis>
                        <methodname>setParameterPost</methodname>
                        <methodparam>
                            <funcparams>array $post</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set the POST parameters</para>
                    <para></para>
                    <para>Returns Zend\Http\Client</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-parameter-get">
                <term>
                    <methodsynopsis>
                        <methodname>setParameterGet</methodname>
                        <methodparam>
                            <funcparams>array $query</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set the GET parameters</para>
                    <para></para>
                    <para>Returns Zend\Http\Client</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-cookies">
                <term>
                    <methodsynopsis>
                        <methodname>getCookies</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Return the current cookies</para>
                    <para></para>
                    <para>Returns array</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.add-cookie">
                <term>
                    <methodsynopsis>
                        <methodname>addCookie</methodname>
                        <methodparam>
                            <funcparams>ArrayIterator|SetCookie|string $cookie, string $value, string $domain, string $expire, string $path, boolean $secure = false, boolean $httponly = true</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Add a cookie</para>
                    <para></para>
                    <para>Returns Zend\Http\Client</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-cookies">
                <term>
                    <methodsynopsis>
                        <methodname>setCookies</methodname>
                        <methodparam>
                            <funcparams>array $cookies</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set an array of cookies</para>
                    <para></para>
                    <para>Returns Zend\Http\Client</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.clear-cookies">
                <term>
                    <methodsynopsis>
                        <methodname>clearCookies</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Clear all the cookies</para>
                    <para></para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-headers">
                <term>
                    <methodsynopsis>
                        <methodname>setHeaders</methodname>
                        <methodparam>
                            <funcparams>Headers|array $headers</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set the headers (for the request)</para>
                    <para></para>
                    <para>Returns Zend\Http\Client</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.has-header">
                <term>
                    <methodsynopsis>
                        <methodname>hasHeader</methodname>
                        <methodparam>
                            <funcparams>string $name</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Check if exists the header type specified</para>
                    <para></para>
                    <para>Returns boolean</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-header">
                <term>
                    <methodsynopsis>
                        <methodname>getHeader</methodname>
                        <methodparam>
                            <funcparams>string $name</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get the header value of the request</para>
                    <para></para>
                    <para>Returns string|boolean</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-stream">
                <term>
                    <methodsynopsis>
                        <methodname>setStream</methodname>
                        <methodparam>
                            <funcparams>string|boolean $streamfile = true</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set streaming for received data</para>
                    <para></para>
                    <para>Returns Zend\Http\Client</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.get-stream">
                <term>
                    <methodsynopsis>
                        <methodname>getStream</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Get status of streaming for received data</para>
                    <para></para>
                    <para>Returns boolean|string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-auth">
                <term>
                    <methodsynopsis>
                        <methodname>setAuth</methodname>
                        <methodparam>
                            <funcparams>string $user, string $password, string $type = 'basic'</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Create a HTTP authentication "Authorization:" header according to the
specified user, password and authentication method.</para>
                    <para></para>
                    <para>Returns Zend\Http\Client</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.reset-parameters">
                <term>
                    <methodsynopsis>
                        <methodname>resetParameters</methodname>
                        <methodparam>
                            <funcparams></funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Reset all the HTTP parameters (auth,cookies,request, response, etc)</para>
                    <para></para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.send">
                <term>
                    <methodsynopsis>
                        <methodname>send</methodname>
                        <methodparam>
                            <funcparams>Request $request</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Send HTTP request</para>
                    <para></para>
                    <para>Returns Response</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.set-file-upload">
                <term>
                    <methodsynopsis>
                        <methodname>setFileUpload</methodname>
                        <methodparam>
                            <funcparams>string $filename, string $formname, string $data, string $ctype</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Set a file to upload (using a POST request)</para>
                    <para>Can be used in two ways:

1. $data is null (default): $filename is treated as the name if a local file which
will be read and sent. Will try to guess the content type using mime_content_type().
2. $data is set - $filename is sent as the file name, but $data is sent as the file
contents and no file is read from the file system. In this case, you need to
manually set the Content-Type ($ctype) or it will default to
application/octet-stream.</para>
                    <para>Returns Zend\Http\Client</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.remove-file-upload">
                <term>
                    <methodsynopsis>
                        <methodname>removeFileUpload</methodname>
                        <methodparam>
                            <funcparams>string $filename</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Remove a file to upload</para>
                    <para></para>
                    <para>Returns boolean</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.client.methods.encode-form-data">
                <term>
                    <methodsynopsis>
                        <methodname>encodeFormData</methodname>
                        <methodparam>
                            <funcparams>string $boundary, string $name, mixed $value, string $filename, array $headers = array (
)</funcparams>
                        </methodparam>
                    </methodsynopsis>
                </term>

                <listitem>
                    <para>Encode data to a multipart/form-data part suitable for a POST request.</para>
                    <para></para>
                    <para>Returns string</para>
                </listitem>
            </varlistentry>

        </variablelist>
    </section>

    <section xml:id="zend.http.client.examples">
        <info>
            <title>Examples</title>
        </info>

        <example xml:id="zend.http.client.basic-requests.example-1"><info><title>Performing a Simple GET Request</title></info>
            <para>
                Performing simple <acronym>HTTP</acronym> requests is very easily done using the
                request() method, and rarely needs more than three lines of code:
            </para>

            <programlisting language="php"><![CDATA[
use Zend\Config\Client;
$client = new Client('http://example.org');
$response = $client->send();
]]></programlisting>

            <para>
                The request() method takes one optional parameter - the request method.
                This can be either <property>GET</property>, <property>POST</property>,
                <property>PUT</property>, <property>HEAD</property>, <property>DELETE</property>,
                <property>TRACE</property>, <property>OPTIONS</property> or <property>CONNECT</property>
                as defined by the <acronym>HTTP</acronym> protocol

                <footnote>
                  <para>
                    See RFC 2616 - <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">http://www.w3.org/Protocols/rfc2616/rfc2616.html</uri>.
                  </para>
                </footnote>.

            </para>
        </example>


        <example xml:id="zend.http.client.basic-requests.example-2">
            <info><title>Using Request Methods Other Than GET</title></info>

            <para>
                For convenience, these are all defined as class constants:
                Zend\Http\Client::GET, Zend\Http\Client::POST and so on.
            </para>

            <para>
                If no method is specified, the method set by the last
                <methodname>setMethod()</methodname> call is used. If
                <methodname>setMethod()</methodname> was never called, the default request
                method is <constant>GET</constant> (see the above example).
            </para>

            <programlisting language="php"><![CDATA[
use Zend\Http\Client;
$client = new Client();
// Preforming a POST request
$response = $client->request('POST');

// Yet another way of preforming a POST request
$client->setMethod(Client::POST);
$response = $client->request();
]]></programlisting>

        </example>

        <example xml:id="zend.http.client.parameters.example-1">

            <info>
                <title>Adding GET and POST parameters </title>
            </info>

            <para>
                Adding <constant>GET</constant> parameters to an <acronym>HTTP</acronym> request is
                quite simple, and can be done either by specifying them as part of the URL, or by using
                the setParameterGet() method.
                This method takes the <constant>GET</constant> parameter's name as its first parameter,
                and the <constant>GET</constant> parameter's value as its second parameter.
                For convenience, the setParameterGet() method can also accept a
                single associative array of name =&gt; value <constant>GET</constant> variables - which may
                be more comfortable when several <constant>GET</constant> parameters need to be set.
            </para>

            <programlisting language="php"><![CDATA[
use Zend\Http\Client;
$client = new Client();

// Setting a get parameter using the setParameterGet method
$client->setParameterGet('knight', 'lancelot');

// This is equivalent to setting such URL:
$client->setUri('http://example.com/index.php?knight=lancelot');

// Adding several parameters with one call
$client->setParameterGet(array(
    'first_name'  => 'Bender',
    'middle_name' => 'Bending'
    'made_in'     => 'Mexico',
));
]]></programlisting>

        </example>

        <example xml:id="zend.http.client.parameters.example-2">

            <info>
                <title>Setting POST Parameters</title>
            </info>

            <para>
                While <constant>GET</constant> parameters can be sent with every request method, POST
                parameters are only sent in the body of POST requests. Adding POST
                parameters to a request is very similar to adding <constant>GET</constant> parameters,
                and can be done with the setParameterPost() method, which is
                similar to the setParameterGet() method in structure.
            </para>

            <programlisting language="php"><![CDATA[
use Zend\Http\Client;
$client = new Client();
// Setting a POST parameter
$client->setParameterPost('language', 'fr');

// Setting several POST parameters, one of them with several values
$client->setParameterPost(array(
    'language'  => 'es',
    'country'   => 'ar',
    'selection' => array(45, 32, 80)
));
]]></programlisting>

            <para>
                Note that when sending POST requests, you can set both <constant>GET</constant> and
                POST parameters. On the other hand, while setting POST parameters
                for a non-POST request will not trigger and error, it is useless.
                Unless the request is a POST request, POST parameters are simply
                ignored.
            </para>
        </example>

        <example xml:id="zend.http.client.request-object-usage">

            <info>
                <title>Using A Request Object With The Client</title>
            </info>

            <para></para>

            <programlisting language="php" role="php"><![CDATA[
use Zend\Http\Request,
    Zend\Http\Client;
$request = new Request();
$request->setUri('http://www.test.com');
$request->setMethod('POST');
$request->setParameterPost(array('foo' => 'bar));

$client = new Client();
$response = $client->dispatch($request);

if ($response->isSuccess()) {
    //  the POST was successfull
}
]]></programlisting>


        </example>


    </section>
</section>
