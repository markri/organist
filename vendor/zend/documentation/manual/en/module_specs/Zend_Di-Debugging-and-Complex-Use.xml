<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.di.debugging-and-complex-use-cases">
    <info><title>Zend\Di Debugging &amp; Complex Use Cases</title></info>

    <section xml:id="zend.di.zend.di.debugging-and-complex-use-cases.debugging">
        <info><title>Debugging a DiC</title></info>

        <para>
            It is possible to dump the information contained within both the
            Definition and InstanceManager for a Di instance.
        </para>

        <para>
            The easiest way is to do the following:
        </para>


        <programlisting language="php"><![CDATA[
    Zend\Di\Display\Console::export($di);
    ]]></programlisting>

        <para>
            If you are using a RuntimeDefinition where upon you expect a
            particular definition to be resolve at the first-call, you can see
            that information to the console display to force it to read that class:
        </para>


        <programlisting language="php"><![CDATA[
        Zend\Di\Display\Console::export($di, array('A\ClassIWantTo\GetTheDefinitionFor'));
    ]]></programlisting>

    </section>

    <section xml:id="zend.di.zend.di.debugging-and-complex-use-cases.complex-use-cases">
        <info><title>Complex Use Cases</title></info>

        <section xml:id="zend.di.zend.di.debugging-and-complex-use-cases.complex-use-cases.interface-injection">
            <info><title>Interface Injection</title></info>

            <programlisting language="php"><![CDATA[
namespace Foo\Bar {
    class Baz implements BamAwareInterface {
        public $bam;
        public function setBam(Bam $bam){
            $this->bam = $bam;
        }
    }
    class Bam {
    }
    interface BamAwareInterface
    {
        public function setBam(Bam $bam);
    }
}

namespace {
    include 'zf2bootstrap.php';
    $di = new Zend\Di\Di;
    $baz = $di->get('Foo\Bar\Baz');
}
]]></programlisting>


        </section>


        <section xml:id="zend.di.zend.di.debugging-and-complex-use-cases.complex-use-cases.setter-injection-with-class-definition">
            <info><title>Setter Injection with Class Definition</title></info>

            <programlisting language="php"><![CDATA[
namespace Foo\Bar {
    class Baz {
        public $bam;
        public function setBam(Bam $bam){
            $this->bam = $bam;
        }
    }
    class Bam {
    }
}

namespace {
    $di = new Zend\Di\Di;
    $di->configure(new Zend\Di\Configuration(array(
        'definition' => array(
            'class' => array(
                'Foo\Bar\Baz' => array(
                    'setBam' => array('required' => true)
                )
            )
        )
    )));
    $baz = $di->get('Foo\Bar\Baz');
}
]]></programlisting>

        </section>


        <section xml:id="zend.di.zend.di.debugging-and-complex-use-cases.complex-use-cases.multiple-injections">
            <info><title>Multiple Injections To A Single Injection Point</title></info>


            <programlisting language="php"><![CDATA[
namespace Application {
    class Page {
        public $blocks;
        public function addBlock(Block $block){
            $this->blocks[] = $block;
        }
    }
    interface Block {
    }
}

namespace MyModule {
    class BlockOne implements \Application\Block {}
    class BlockTwo implements \Application\Block {}
}

namespace {
    include 'zf2bootstrap.php';
    $di = new Zend\Di\Di;
    $di->configure(new Zend\Di\Configuration(array(
        'definition' => array(
            'class' => array(
                'Application\Page' => array(
                    'addBlock' => array(
                        'block' => array('type' => 'Application\Block', 'required' => true)
                    )
                )
            )
        ),
        'instance' => array(
            'Application\Page' => array(
                'injections' => array(
                    'MyModule\BlockOne',
                    'MyModule\BlockTwo'
                )
            )
        )
    )));
    $page = $di->get('Application\Page');
}
]]></programlisting>

        </section>

    </section>

</section>
