<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.soap.autodiscovery"><info><title>AutoDiscovery</title></info>


    <section xml:id="zend.soap.autodiscovery.introduction"><info><title>AutoDiscovery Introduction</title></info>


        <para>
            <acronym>SOAP</acronym> functionality implemented within Zend Framework is intended to
            make all steps required for <acronym>SOAP</acronym> communications more simple.
        </para>

        <para>
            <acronym>SOAP</acronym> is language independent protocol. So it may be used not only for
            <acronym>PHP</acronym>-to-PHP communications.
        </para>

        <para>
            There are three configurations for <acronym>SOAP</acronym> applications where Zend
            Framework may be utilized:

            <orderedlist>
                <listitem>
                    <simpara>
                        SOAP server <acronym>PHP</acronym> application &lt;---&gt;
                        <acronym>SOAP</acronym> client <acronym>PHP</acronym> application
                    </simpara>
                </listitem>

                <listitem>
                    <simpara>
                        SOAP server non-PHP application &lt;---&gt; <acronym>SOAP</acronym>
                        client <acronym>PHP</acronym> application
                    </simpara>
                </listitem>

                <listitem>
                    <simpara>
                        SOAP server <acronym>PHP</acronym> application &lt;---&gt;
                        <acronym>SOAP</acronym> client non-PHP application
                    </simpara>
                </listitem>
            </orderedlist>
        </para>

        <para>
            We always have to know, which functionality is provided by <acronym>SOAP</acronym>
            server to operate with it. <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.w3.org/TR/wsdl">WSDL</link> is used
            to describe network service <acronym>API</acronym> in details.
        </para>

        <para>
            WSDL language is complex enough (see <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.w3.org/TR/wsdl">http://www.w3.org/TR/wsdl</link>
            for the details). So it's difficult to prepare correct WSDL description.
        </para>

        <para>
            Another problem is synchronizing changes in network service <acronym>API</acronym> with
            already existing WSDL.
        </para>

        <para>
            Both these problem may be solved by WSDL autogeneration. A prerequisite for this is a
            <acronym>SOAP</acronym> server autodiscovery. It constructs object similar to object
            used in <acronym>SOAP</acronym> server application, extracts necessary information and
            generates correct WSDL using this information.
        </para>

        <para>
            There are two ways for using Zend Framework for <acronym>SOAP</acronym> server
            application:

            <itemizedlist>
                <listitem>
                    <para>Use separated class.</para>
                </listitem>

                <listitem>
                    <para>Use set of functions</para>
                </listitem>
            </itemizedlist>
        </para>

        <para>
            Both methods are supported by Zend Framework Autodiscovery functionality.
        </para>

        <para>
            The<classname>Zend\Soap\AutoDiscover</classname> class also supports datatypes mapping
            from <acronym>PHP</acronym> to <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.w3.org/TR/xmlschema-2/">XSD types</link>.
        </para>

        <para>
            Here is an example of common usage of the autodiscovery functionality. The
            <methodname>handle()</methodname> function generates the WSDL file and posts it to the
            browser.
        </para>

        <programlisting language="php"><![CDATA[
class MySoapServerClass {
...
}

$autodiscover = new Zend\Soap\AutoDiscover();
$autodiscover->setClass('MySoapServerClass')
             ->setUri('http://localhost/server.php')
             ->setServiceName('MySoapService');
$wsdl = $autodiscover->generate();
echo $wsdl->toXml();
$wsdl->dump("/path/to/file.wsdl");
$dom = $wsdl->toDomDocument();
]]></programlisting>

        <note xml:id="zend.soap.autodiscovery.introduction.noserver"><info><title>Zend\Soap\Autodiscover is not a Soap Server</title></info>

            <para>
                It is very important to note, that the class
                <classname>Zend\Soap\AutoDiscover</classname> does not act as a
                <acronym>SOAP</acronym> Server on its own.
            </para>

            <programlisting language="php"><![CDATA[
if(isset($_GET['wsdl'])) {
    $autodiscover = new Zend\Soap\AutoDiscover();
    $autodiscover->setClass('HelloWorldService')
                 ->setUri('http://example.com/soap.php');
    echo $autodiscover->toXml();
} else {
    // pointing to the current file here
    $soap = new Zend\Soap\Server("http://example.com/soap.php?wsdl");
    $soap->setClass('HelloWorldService');
    $soap->handle();
}
]]></programlisting>
        </note>
    </section>

    <section xml:id="zend.soap.autodiscovery.class"><info><title>Class autodiscovering</title></info>


        <para>
            If a class is used to provide SOAP server functionality, then the same class should be
            provided to <classname>Zend\Soap\AutoDiscover</classname> for WSDL generation:
        </para>

        <programlisting language="php"><![CDATA[
$autodiscover = new Zend\Soap\AutoDiscover();
$autodiscover->setClass('My_SoapServer_Class')
             ->setUri('http://localhost/server.php')
             ->setServiceName('MySoapService');
$wsdl = $autodiscover->generate();
]]></programlisting>

        <para>
            The following rules are used while WSDL generation:

            <itemizedlist>
                <listitem>
                    <para>
                        Generated WSDL describes an RPC/Encoded style Web Service. If you want to use a document/literal
                        server use the <methodname>setBindingStyle()</methodname> and
                        <methodname>setOperationBodyStyle()</methodname> methods.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        Class name is used as a name of the Web Service being described unless
                        <methodname>setServiceName()</methodname> is used explicitly to set the name.
                        When only functions are used for generation the service name has to be set
                        explicitly or an exception is thrown during generation of the WSDL document.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        You can set the endpoint of the actual SOAP Server via the <methodname>setUri()</methodname> method.
                        This is a required option.
                    </para>

                    <para>
                         It's also used as a target namespace for all service related names
                         (including described complex types).
                    </para>
                </listitem>

                <listitem>
                    <para>
                        Class methods are joined into one <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.w3.org/TR/wsdl#_porttypes">Port Type</link>.
                    </para>

                    <para>
                        <code>$serviceName . 'Port'</code> is used as Port Type name.
                    </para>
                </listitem>

                <listitem>
                    <para>Each class method/function is registered as a corresponding port operation.</para>
                </listitem>

                <listitem>
                    <para>
                        Only the "longest" available method prototype is used for generation of the WSDL.
                    </para>
                </listitem>

            <listitem>
                <para>
                    WSDL autodiscover utilizes the <acronym>PHP</acronym> docblocks provided by the
                    developer to determine the parameter and return types. In fact, for scalar types,
                    this is the only way to determine the parameter types, and for return types, this is
                    the only way to determine them.
                </para>

                <para>
                    That means, providing correct and fully detailed docblocks is not only best
                    practice, but is required for discovered class.
                </para>
            </listitem>
            </itemizedlist>
        </para>
    </section>

    <section xml:id="zend.soap.autodiscovery.functions"><info><title>Functions autodiscovering</title></info>

        <para>
            If set of functions are used to provide SOAP server functionality, then the same set
            should be provided to <classname>Zend\Soap\AutoDiscovery</classname> for WSDL
            generation:
        </para>

        <programlisting language="php"><![CDATA[
$autodiscover = new Zend\Soap\AutoDiscover();
$autodiscover->addFunction('function1');
$autodiscover->addFunction('function2');
$autodiscover->addFunction('function3');
...
$wsdl = $autodiscover->generate();
]]></programlisting>

        <para>The same rules apply to generation as described in the class audodiscover seection above.</para>
    </section>

    <section xml:id="zend.soap.autodiscovery.datatypes"><info><title>Autodiscovering Datatypes</title></info>


        <para>
            Input/output datatypes are converted into network service types using the following
            mapping:

            <itemizedlist>
                <listitem>
                    <para>PHP strings &lt;-&gt; <code>xsd:string</code>.</para>
                </listitem>

                <listitem>
                    <para>PHP integers &lt;-&gt; <code>xsd:int</code>.</para>
                </listitem>

                <listitem>
                    <para>PHP floats and doubles &lt;-&gt; <code>xsd:float</code>.</para>
                </listitem>

                <listitem>
                    <para>PHP booleans &lt;-&gt; <code>xsd:boolean</code>.</para>
                </listitem>

                <listitem>
                    <para>PHP arrays &lt;-&gt; <code>soap-enc:Array</code>.</para>
                </listitem>

                <listitem>
                    <para>PHP object &lt;-&gt; <code>xsd:struct</code>.</para>
                </listitem>

                <listitem>
                    <para>
                        <acronym>PHP</acronym> class &lt;-&gt; based on complex type strategy (See:
                        <link linkend="zend.soap.wsdl.types.add_complex">this section</link>)

                        <footnote>
                            <para>
                                <classname>Zend\Soap\AutoDiscover</classname> will be created with
                                the
                                <classname>Zend\Soap\Wsdl\ComplexTypeStrategy\DefaultComplexType</classname>
                                class as detection algorithm for complex types. The first parameter
                                of the AutoDiscover constructor takes any complex type strategy
                                implementing
                                <classname>Zend\Soap\Wsdl\ComplexTypeStrategy\Interface</classname> or a string
                                with the name of the class. See the
                                <link linkend="zend.soap.wsdl.types.add_complex"><classname>Zend\Soap\Wsdl</classname>
                                    manual on adding complex</link> types for more information.
                            </para>
                        </footnote>.
                    </para>
                </listitem>

                <listitem>
                    <para>
                        type[] or object[] (ie. int[]) &lt;-&gt; based on complex type strategy
                    </para>
                </listitem>

                <listitem>
                    <para>PHP void &lt;-&gt; empty type.</para>
                </listitem>

                <listitem>
                    <para>
                        If type is not matched to any of these types by some reason, then
                        <code>xsd:anyType</code> is used.
                    </para>
                </listitem>
            </itemizedlist>

            Where <code>xsd:</code> is "http://www.w3.org/2001/XMLSchema" namespace,
            <code>soap-enc:</code> is a "http://schemas.xmlsoap.org/soap/encoding/" namespace,
            <code>tns:</code> is a "target namespace" for a service.
        </para>
    </section>

    <section xml:id="zend.soap.autodiscovery.wsdlstyles"><info><title>WSDL Binding Styles</title></info>


        <para>
            WSDL offers different transport mechanisms and styles. This affects the
            <code>soap:binding</code> and <code>soap:body</code> tags within the Binding
            section of WSDL. Different clients have different requirements as to what options
            really work. Therefore you can set the styles before you call any <code>setClass</code>
            or <code>addFunction</code> method on the AutoDiscover class.
        </para>

        <programlisting language="php"><![CDATA[
$autodiscover = new Zend\Soap\AutoDiscover();
// Default is 'use' => 'encoded' and
// 'encodingStyle' => 'http://schemas.xmlsoap.org/soap/encoding/'
$autodiscover->setOperationBodyStyle(
                    array('use' => 'literal',
                          'namespace' => 'http://framework.zend.com')
                );

// Default is 'style' => 'rpc' and
// 'transport' => 'http://schemas.xmlsoap.org/soap/http'
$autodiscover->setBindingStyle(
                    array('style' => 'document',
                          'transport' => 'http://framework.zend.com')
                );
...
$autodiscover->addFunction('myfunc1');
$wsdl = $autodiscover->generate();
]]></programlisting>
    </section>
</section>
