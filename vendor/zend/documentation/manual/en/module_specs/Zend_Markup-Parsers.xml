<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.markup.parsers"><info><title>Zend_Markup Parsers</title></info>
    

    <para>
        <classname>Zend_Markup</classname> is currently shipped with two parsers, a BBCode parser
        and a Textile parser.
    </para>

    <section xml:id="zend.markup.parsers.theory"><info><title>Theory of Parsing</title></info>
        

        <para>
            The parsers of <classname>Zend_Markup</classname> are classes that convert text with
            markup to a token tree. Although we are using the BBCode parser as example here, the
            idea of the token tree remains the same across all parsers. We will start with this
            piece of BBCode for example:
        </para>

        <programlisting><![CDATA[
[b]foo[i]bar[/i][/b]baz
]]></programlisting>

        <para>
            Then the BBCode parser will take that value, tear it apart and create the following
            tree:
        </para>

        <itemizedlist>
            <listitem>
                <para>[b]</para>

                <itemizedlist>
                    <listitem>
                        <para>foo</para>
                    </listitem>

                    <listitem>
                        <para>[i]</para>

                        <itemizedlist>
                            <listitem>
                                <para>bar</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem>
                <para>baz</para>
            </listitem>
        </itemizedlist>

        <para>
            You will notice that the closing tags are gone, they don't show up as content in the
            tree structure. This is because the closing tag isn't part of the actual content.
            Although, this does not mean that the closing tag is just lost, it is stored inside the
            tag information for the tag itself. Also, please note that this is just a simplified
            view of the tree itself. The actual tree contains a lot more information, like the tag's
            attributes and its name.
        </para>
    </section>

    <section xml:id="zend.markup.parsers.bbcode"><info><title>The BBCode parser</title></info>
        

        <para>
            The BBCode parser is a <classname>Zend_Markup</classname> parser that converts BBCode to
            a token tree. The syntax of all BBCode tags is:
        </para>

        <programlisting language="text"><![CDATA[
[name(=(value|"value"))( attribute=(value|"value"))*]
]]></programlisting>

        <para>
            Some examples of valid BBCode tags are:
        </para>

        <programlisting><![CDATA[
[b]
[list=1]
[code file=Zend/Markup.php]
[url="http://framework.zend.com/" title="Zend Framework!"]
]]></programlisting>

        <para>
            By default, all tags are closed by using the format '[/tagname]'.
        </para>
    </section>

    <section xml:id="zend.markup.parsers.textile"><info><title>The Textile parser</title></info>
        

        <para>
            The Textile parser is a <classname>Zend_Markup</classname> parser that converts Textile
            to a token tree. Because Textile doesn't have a tag structure, the following is a list
            of example tags:
        </para>

        <table xml:id="zend.markup.parsers.textile.tags"><info><title>List of basic Textile tags</title></info>
            

            <tgroup cols="2" align="left" colsep="1" rowsep="1">
                <thead>
                    <row>
                        <entry>Sample input</entry>
                        <entry>Sample output</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry>*foo*</entry>
                        <entry>&lt;strong&gt;foo&lt;/strong&gt;</entry>
                    </row>

                    <row>
                        <entry>_foo_</entry>
                        <entry>&lt;em&gt;foo&lt;/em&gt;</entry>
                    </row>

                    <row>
                        <entry>??foo??</entry>
                        <entry>&lt;cite&gt;foo&lt;/cite&gt;</entry>
                    </row>

                    <row>
                        <entry>-foo-</entry>
                        <entry>&lt;del&gt;foo&lt;/del&gt;</entry>
                    </row>

                    <row>
                        <entry>+foo+</entry>
                        <entry>&lt;ins&gt;foo&lt;/ins&gt;</entry>
                    </row>

                    <row>
                        <entry>^foo^</entry>
                        <entry>&lt;sup&gt;foo&lt;/sup&gt;</entry>
                    </row>

                    <row>
                        <entry>~foo~</entry>
                        <entry>&lt;sub&gt;foo&lt;/sub&gt;</entry>
                    </row>

                    <row>
                        <entry>%foo%</entry>
                        <entry>&lt;span&gt;foo&lt;/span&gt;</entry>
                    </row>

                    <row>
                        <entry>PHP(PHP Hypertext Preprocessor)</entry>

                        <entry>
                            &lt;acronym title="PHP Hypertext Preprocessor"&gt;PHP&lt;/acronym&gt;
                        </entry>
                    </row>

                    <row>
                        <entry>"Zend Framework":http://framework.zend.com/</entry>

                        <entry>
                            &lt;a href="http://framework.zend.com/"&gt;Zend Framework&lt;/a&gt;
                        </entry>
                    </row>

                    <row>
                        <entry>h1. foobar</entry>
                        <entry>&lt;h1&gt;foobar&lt;/h1&gt;</entry>
                    </row>

                    <row>
                        <entry>h6. foobar</entry>
                        <entry>&lt;h6&gt;foobar&lt;/h6&gt;</entry>
                    </row>

                    <row>
                        <entry>!http://framework.zend.com/images/logo.gif!</entry>

                        <entry>
                            &lt;img src="http://framework.zend.com/images/logo.gif" /&gt;
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            Also, the Textile parser wraps all tags into paragraphs; a paragraph ends with two
            newlines, and if there are more tags, a new paragraph will be added.
        </para>

        <section xml:id="zend.markup.parsers.textile.lists"><info><title>Lists</title></info>
            

            <para>
                The Textile parser also supports two types of lists. The numeric type, using the "#"
                character and bullit-lists using the "*" character. An example of both lists:
            </para>

            <programlisting><![CDATA[
# Item 1
# Item 2

* Item 1
* Item 2
]]></programlisting>

            <para>
                The above will generate two lists: the first, numbered; and the second, bulleted.
                Inside list items, you can use normal tags like strong (*), and emphasized (_). Tags
                that need to start on a new line (like 'h1' etc.) cannot be used inside lists.
            </para>
        </section>
    </section>
</section>
