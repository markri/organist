<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.service.recaptcha"><info><title>Zend_Service_ReCaptcha</title></info>
    

    <section xml:id="zend.service.recaptcha.introduction"><info><title>Introduction</title></info>
        

        <para>
            <classname>Zend_Service_ReCaptcha</classname> provides a client for the <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://recaptcha.net/">reCAPTCHA Web Service</link>.
            Per the reCAPTCHA site, "reCAPTCHA is a free CAPTCHA service that
            helps to digitize books." Each reCAPTCHA requires the user to input
            two words, the first of which is the actual CAPTCHA, and the second
            of which is a word from some scanned text that Optical Character
            Recognition (OCR) software has been unable to identify.
            The assumption is that if a user correctly provides the first
            word, the second is likely correctly entered as well, and can be
            used to improve OCR software for digitizing books.
        </para>

        <para>
            In order to use the reCAPTCHA service, you will need to <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://recaptcha.net/whyrecaptcha.html">sign up for an
                account</link> and register one or more domains with the
            service in order to generate public and private keys.
        </para>
    </section>

    <section xml:id="zend.service.recaptcha.simplestuse"><info><title>Simplest use</title></info>
        

        <para>
            Instantiate a <classname>Zend_Service_ReCaptcha</classname> object, passing it
            your public and private keys:
        </para>

        <example xml:id="zend.service.recaptcha.example-1"><info><title>Creating an instance of the reCAPTCHA service</title></info>
            

            <programlisting language="php"><![CDATA[
$recaptcha = new Zend_Service_ReCaptcha($pubKey, $privKey);
]]></programlisting>
        </example>

        <para>
            To render the reCAPTCHA, simply call the <methodname>getHTML()</methodname>
            method:
        </para>

        <example xml:id="zend.service.recaptcha.example-2"><info><title>Displaying the reCAPTCHA</title></info>
            

            <programlisting language="php"><![CDATA[
echo $recaptcha->getHTML();
]]></programlisting>
        </example>

        <para>
            When the form is submitted, you should receive two fields,
            'recaptcha_challenge_field' and 'recaptcha_response_field'. Pass
            these to the reCAPTCHA object's <methodname>verify()</methodname> method:
        </para>

        <example xml:id="zend.service.recaptcha.example-3"><info><title>Verifying the form fields</title></info>
            

            <programlisting language="php"><![CDATA[
$result = $recaptcha->verify(
    $_POST['recaptcha_challenge_field'],
    $_POST['recaptcha_response_field']
);
]]></programlisting>
        </example>

        <para>
            Once you have the result, test against it to see if it is valid. The
            result is a <classname>Zend_Service_ReCaptcha_Response</classname> object,
            which provides an <methodname>isValid()</methodname> method.
        </para>

        <example xml:id="zend.service.recaptcha.example-4"><info><title>Validating the reCAPTCHA</title></info>
            

            <programlisting language="php"><![CDATA[
if (!$result->isValid()) {
    // Failed validation
}
]]></programlisting>
        </example>

        <para>
            It is even simpler to use <link linkend="zend.captcha.adapters.recaptcha">the reCAPTCHA</link>
            <classname>Zend_Captcha</classname> adapter, or to use that adapter as a
            backend for the <link linkend="zend.form.standardElements.captcha">CAPTCHA form
                element</link>. In each case, the details of rendering and
            validating the reCAPTCHA are automated for you.
        </para>
    </section>

    <section xml:id="zend.service.recaptcha.mailhide"><info><title>Hiding email addresses</title></info>
        

        <para>
            <classname>Zend_Service_ReCaptcha_MailHide</classname> can be used to hide email
            addresses. It will replace a part of an email address with a link that opens a popup
            window with a reCAPTCHA challenge. Solving the challenge will reveal the complete
            email address.
        </para>

        <para>
            In order to use this component you will need
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://recaptcha.net/whyrecaptcha.html">an account</link> to generate
            public and private keys for the mailhide <acronym>API</acronym>.
        </para>

        <example xml:id="zend.service.recaptcha.mailhide.example-1"><info><title>Using the mail hide component</title></info>
            

            <programlisting language="php"><![CDATA[
// The mail address we want to hide
$mail = 'mail@example.com';

// Create an instance of the mailhide component, passing it your public
// and private keys, as well as the mail address you want to hide
$mailHide = new Zend_Service_ReCaptcha_Mailhide();
$mailHide->setPublicKey($pubKey);
$mailHide->setPrivateKey($privKey);
$mailHide->setEmail($mail);

// Display it
print($mailHide);
]]></programlisting>
        </example>

        <para>
            The example above will display "m...@example.com" where "..." has a link that opens up
            a popup window with a reCAPTCHA challenge.
        </para>

        <para>
            The public key, private key, and the email address can also be specified in the
            constructor of the class. A fourth argument also exists that enables you to set some
            options for the component. The available options are listed in the following table:

            <table xml:id="zend.service.recaptcha.mailhide.options.table"><info><title>Zend_Service_ReCaptcha_MailHide options</title></info>
                

                <tgroup cols="4">
                    <thead>
                        <row>
                            <entry>Option</entry>
                            <entry>Description</entry>
                            <entry>Expected Values</entry>
                            <entry>Default Value</entry>
                        </row>
                    </thead>

                    <tbody>
                        <row>
                            <entry>linkTitle</entry>
                            <entry>The title attribute of the link</entry>
                            <entry>string</entry>
                            <entry>'Reveal this e-mail address'</entry>
                        </row>

                        <row>
                            <entry>linkHiddenText</entry>
                            <entry>The text that includes the popup link</entry>
                            <entry>string</entry>
                            <entry>'...'</entry>
                        </row>

                        <row>
                            <entry>popupWidth</entry>
                            <entry>The width of the popup window</entry>
                            <entry>int</entry>
                            <entry>500</entry>
                        </row>

                        <row>
                            <entry>popupHeight</entry>
                            <entry>The height of the popup window</entry>
                            <entry>int</entry>
                            <entry>300</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
        </para>

        <para>
            The configuration options can be set by sending them as the fourth argument to the
            constructor or by calling <methodname>setOptions($options)</methodname>, which takes
            an associative array or an instance of <link linkend="zend.config">Zend_Config</link>.
        </para>

        <example xml:id="zend.service.recaptcha.mailhide.example-2"><info><title>Generating many hidden email addresses</title></info>
            

            <programlisting language="php"><![CDATA[
// Create an instance of the mailhide component, passing it your public
// and private keys, as well as some configuration options
$mailHide = new Zend_Service_ReCaptcha_Mailhide();
$mailHide->setPublicKey($pubKey);
$mailHide->setPrivateKey($privKey);
$mailHide->setOptions(array(
    'linkTitle' => 'Click me',
    'linkHiddenText' => '+++++',
));

// The mail addresses we want to hide
$mailAddresses = array(
    'mail@example.com',
    'johndoe@example.com',
    'janedoe@example.com',
);

foreach ($mailAddresses as $mail) {
    $mailHide->setEmail($mail);
    print($mailHide);
}
]]></programlisting>
        </example>
    </section>
</section>
