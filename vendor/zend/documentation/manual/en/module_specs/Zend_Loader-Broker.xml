<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.loader.broker"><info><title>The Broker Interface</title></info>
    

    <section xml:id="zend.loader.broker.intro"><info><title>Overview</title></info>
        

        <para>
            Withing Zend Framework, a number of components have a need to:
        </para>

        <itemizedlist>
            <listitem><para>Dynamically load adapters, helpers, or other plugins</para></listitem>

            <listitem>
                <para>
                    Allow specifying such adapters, helpers, and plugins by a "short name" variant,
                    in order to allow overriding defaults; in other words, to allow slipstreaming
                    custom variants into the component.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            The <interfacename>Broker</interfacename> interface provides a simple contract for
            managing these extensions. At its simplest, it allows you to register and unregister
            concrete extension instances, mapping them to a short name. For added flexibility, it
            allows specifying a <link linkend="zend.loader.short-name-locater">plugin class
                loader</link> that may be used to resolve the short names to class names, and thus
            dynamically resolve the name to a new class instance.
        </para>

        <para>
            A concrete implementation of this interface is provided with <link linkend="zend.loader.plugin-broker">the PluginBroker class</link>.
        </para>
    </section>

    <section xml:id="zend.loader.broker.quick-start"><info><title>Quick Start</title></info>
        

        <para>
            A concrete interface must simply follow the contract as specified in the interface:
        </para>

        <programlisting language="php"><![CDATA[
namespace Zend\Loader;
interface Broker
{
    public function load($plugin, array $options = null);
    public function register($name, $plugin);
    public function unregister($name);
    public function setClassLoader(ShortNameLocater $loader);
    public function getClassLoader();
}
]]></programlisting>
    </section>

    <section xml:id="zend.loader.broker.options"><info><title>Configuration Options</title></info>
        

        <para>
            This component defines no configuration options, as it is an interface.
        </para>
    </section>

    <section xml:id="zend.loader.broker.methods"><info><title>Available Methods</title></info>
        

        <refentry xml:id="zend.loader.broker.methods.load">
            <refnamediv>
                <refname>load</refname>
                <refpurpose>Locate and return a plugin instance</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>load</methodname>
                    <methodparam>
                        <funcparams>$plugin, array $options = null</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsection><info><title>load()</title></info>
                

                <para>
                    <methodname>load()</methodname> is intended to do the heavy lifting of the
                    broker. The <varname>$plugin</varname> argument should be a short name,
                    preferably case-insensitive, describing the plugin to load. The broker's
                    responsibility is then to return an instance of the appropriate plugin. For new
                    instances, the <varname>$options</varname> argument can be used to seed and
                    configure the plugin.
                </para>
            </refsection>
        </refentry>

        <refentry xml:id="zend.loader.broker.methods.register">
            <refnamediv>
                <refname>register</refname>
                <refpurpose>Register a plugin</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>register</methodname>
                    <methodparam>
                        <funcparams>$name, $plugin</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsection><info><title>register()</title></info>
                

                <para>
                    <methodname>register()</methodname> allows explicitly registering a plugin with
                    the broker. The provided <varname>$name</varname> will be used to refer to the
                    plugin later via <methodname>load()</methodname> or
                    <methodname>unregister()</methodname>. <varname>$plugin</varname> may be either
                    a string class name or an object instance; the implementation will determine
                    usage.
                </para>
            </refsection>
        </refentry>

        <refentry xml:id="zend.loader.broker.methods.unregister">
            <refnamediv>
                <refname>unregister</refname>
                <refpurpose>Unregister a plugin from the broker</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>unregister</methodname>
                    <methodparam>
                        <funcparams>$name</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsection><info><title>unregister()</title></info>
                

                <para>
                    Used to remove a plugin from the broker. Based on the implementation, this may
                    simply remove a previous instance registered in the broker, or it may prevent
                    ever loading it again.
                </para>
            </refsection>
        </refentry>

        <refentry xml:id="zend.loader.broker.methods.set-class-loader">
            <refnamediv>
                <refname>setClassLoader</refname>
                <refpurpose>Specify a class loader to be used for plugin class lookups</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>setClassLoader</methodname>
                    <methodparam>
                        <funcparams>Zend\Loader\ShortNameLocater $loader</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsection><info><title>setClassLoader()</title></info>
                

                <para>
                    Plugins are supposed to be dynamic, overridable functionality. A class loader is
                    used to dynamically determine what plugin class to use when a given plugin is
                    retrieved from the broker. This method allows you to specify what implementation
                    to utilize.
                </para>
            </refsection>
        </refentry>

        <refentry xml:id="zend.loader.broker.methods.get-class-loader">
            <refnamediv>
                <refname>getClassLoader</refname>
                <refpurpose>Retrieve the plugin class loader</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getClassLoader</methodname>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsection><info><title>getClassLoader()</title></info>
                

                <para>
                    Retrieves the currently registered plugin class loader.
                </para>
            </refsection>
        </refentry>
    </section>

    <section xml:id="zend.loader.broker.examples"><info><title>Examples</title></info>
        

        <para>
            Please see the <link linkend="zend.loader.broker.quick-start">Quick Start</link> for the
            interface specification.
        </para>
    </section>
</section>
