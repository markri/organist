<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.module.best-practices">

    <info>
        <title>Best Practices when Creating Modules</title>
    </info>

    <para>
        When creating a ZF2 module, there are some best practices you should keep in mind.
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <emphasis role="strong">Keep the <methodname>init()</methodname> method
                    lightweight.</emphasis> Be conservative with the actions you perform in the
                <methodname>init()</methodname> method of your <classname>Module</classname> class.
                This method is run for <emphasis>every</emphasis> page request, and should not
                perform anything heavy. As a rule of thumb, registering event listeners is an
                appropriate task to perform in the <methodname>init()</methodname> method. Such
                lightweight tasks will generally not have a measurable impact on the performance of
                your application, even with many modules enabled. It is considered bad practice to
                utilize the <methodname>init()</methodname> method for setting up or configuring
                instances of application resources such as a database connection, application
                logger, or mailer.  Tasks such as these are better served through the dependency
                injection capabilities of Zend Framework 2.
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">Do not perform writes within a module.</emphasis> You should
                <emphasis>never</emphasis> code your module to perform or expect any writes within
                the module's directory. Once installed, the files within a module's directory should
                always match the distribution verbatim. Any user-provided configuration should be
                performed via overrides in the Application module or via application-level
                configuration files. Any other required filesystem writes should be performed in
                some writeable path that is outside of the module's directory. 
            </para>
                
            <para>
                There are two primary advantages to following this rule. First, any modules which
                attempt to write within themselves will not be compatible with phar packaging.
                Second, by keeping the module in sync with the upstream distribution, updates via
                mechanisms such as Git will be simple and trouble-free. Of course, the Application
                module is a special exception to this rule, as there is typically no upstream
                distribution for this module, and it's unlikely you would want to run this package
                from within a phar archive.
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis role="strong">Utilize a vendor prefix for module names.</emphasis> To
                avoid module naming conflicts, you are encouraged to prefix your module namespace
                with a vendor prefix. As an example, the (incomplete) developer tools module
                distributed by Zend is named "ZendDeveloperTools" instead of simply
                "DeveloperTools".
            </para>
        </listitem>
    </itemizedlist>
</section>
