<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.mvc.intro">
  <info><title>Introduction to the MVC Layer</title></info>

  <para>
    <classname>Zend\Mvc</classname> is a brand new MVC implementation
    designed from the ground up for Zend Framework 2.0. The focus of
    this implementation is performance and flexibility.
  </para>

  <para>
    The MVC layer is built on top of the following components:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <classname>Zend\Di</classname>, specifically its
        <classname>Locator</classname> interface, but by default the dependency
        injection container
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\EventManager</classname>
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\Http</classname>, specifically the request and response
        objects, which are used with:
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\Stdlib\Dispatchable</classname>; all
        "controllers" are simply dispatchable objects
      </para>
    </listitem>
  </itemizedlist>

  <para>
    Within the MVC layer, several subcomponents are exposed:
  </para>

  <itemizedlist>
    <listitem>
      <para>
        <classname>Zend\Mvc\Router</classname> contains classes pertaining to
        routing a request (the act of matching a request to a controller,
        or dispatchable)
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\Mvc\PhpEnvironment</classname>, a set of decorators for
        the HTTP <classname>Request</classname> and <classname>Response</classname>
        objects that ensure the request is injected with the current
        environment (including query parameters, POST parameters, HTTP
        headers, etc.)
      </para>
    </listitem>

    <listitem>
      <para>
        <classname>Zend\Mvc\Controller</classname>, a set of abstract
        "controller" classes with basic responsibilities such as
        event wiring, action dispatching, etc.
      </para>
    </listitem>
  </itemizedlist>

  <para>
    The gateway to the MVC is the
    <classname>Zend\Mvc\Application</classname> object (referred to simply
    as <classname>Application</classname> from this point forward). Its
    primary responsibilities are to <emphasis>route</emphasis> the
    request, and to retrieve and <emphasis>dispatch</emphasis> the
    controller discovered. Once accomplished, it returns a response,
    which can then be <emphasis>sent</emphasis>.
  </para>

  <section xml:id="zend.mvc.intro.basic-application-structure">
    <info><title>Basic Application Structure</title></info>

    <para>
      The basic structure of an application is as follows:
    </para>

    <literallayout>
application_root/
    config/
        application.config.php
    data/
    module/
    vendor/
    public/
        .htaccess
        index.php
</literallayout>

    <para>
      The <filename>public/index.php</filename> performs the basic work of
      martialling configuration and configuring the
      <classname>Application</classname>. Once done, it
      <methodname>run()</methodname>s the <classname>Application</classname> and
      <methodname>send()</methodname>s the response returned.
    </para>

    <para>
      The <filename>config</filename> directory will typically contain
      configuration used by <classname>Zend\Module\Manager</classname> in
      order to load modules and merge configuration; we will detail this
      more later.
    </para>

    <para>
      The <filename>vendor</filename> subdirectory should contain any
      third-party modules or libraries on which your application depends. This
      might include Zend Framework, custom libraries from your organization, or
      other third-party libraries from other projects. Libraries and modules
      placed in the <filename>vendor</filename> subdirectory should not be
      modified from their original, distributed state.
    </para>

    <para>
      Finally, the <filename>module</filename> directory will contain one
      or more modules delivering your application's functionality.
    </para>

    <para>
      Let's now turn to modules, as they are the basic units of a web
      application.
    </para>
  </section>

  <section xml:id="zend.mvc.intro.basic-module-structure">
    <info><title>Basic Module Structure</title></info>

    <para>
      A module may contain just about anything: PHP code, including MVC
      functionality; library code; view scripts; and/or or public assets
      such as images, CSS, and JavaScript. The one requirement -- and
      even this is optional -- is that a module acts as a PHP namespace
      and that it contains a <classname>Module</classname> class under that
      namespace. This class will then be consumed by
      <classname>Zend\Module\Manager</classname> in order to perform a number
      of tasks.
    </para>

    <para>
      The recommended structure of a module is as follows:
    </para>

    <literallayout>
module_root/
    Module.php
    autoload_classmap.php
    autoload_function.php
    autoload_register.php
    config/
        module.config.php
    public/
        images/
        css/
        js/
    src/
        &lt;module_namespace&gt;/
            &lt;code files&gt;
    tests/
        phpunit.xml
        bootstrap.php
        &lt;module_namespace&gt;/
            &lt;test code files&gt;
    views/
        &lt;dir-named-after-a-controller/
            &lt;.phtml files&gt;
</literallayout>

    <para>
      Since a module acts as a namespace, the module root directory
      should be that namespace. Typically, this namespace will also
      include a vendor prefix of sorts. As an example a module centered
      around "User" functionality delivered by Zend might be
      named "ZendUser", and this is also what the module root
      directory will be named.
    </para>

    <para>
      The <filename>Module.php</filename> file directly under the module
      root directory will be in the module namespace.
    </para>

    <programlisting language="php"><![CDATA[
namespace ZendUser;

class Module
{
}
]]></programlisting>

    <para>
      By default, if an <methodname>init()</methodname> method is defined, this
      method will be triggered by a <classname>Zend\Module\Manager</classname>
      listener when it loads the module class, and passed an instance of the
      manager. This allows you to perform tasks such as setting up
      module-specific event listeners. The <methodname>init()</methodname>
      method is called for <emphasis>every</emphasis> module on
      <emphasis>every</emphasis> page request and should
      <emphasis>only</emphasis> be used for performing
      <emphasis>lightweight</emphasis> tasks such as registering event
      listeners.
    </para>

    <para>
      The three <filename>autoload_*.php</filename> files are not
      required, but recommended. They provide the following:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <filename>autoload_classmap.php</filename> should return an array
          classmap of class name/filename pairs (with the filenames resolved
          via the <varname>__DIR__</varname> magic constant).
        </para>
      </listitem>

      <listitem>
        <para>
          <filename>autoload_function.php</filename> should return a PHP
          callback that can be passed to
          <methodname>spl_autoload_register()</methodname>. Typically, this
          callback should utilize the map returned by
          <filename>autoload_filemap.php</filename>.
        </para>
      </listitem>

      <listitem>
        <para>
          <filename>autoload_register.php</filename> should register a PHP
          callback (typically that returned by
          <filename>autoload_function.php</filename> with
          <methodname>spl_autoload_register()</methodname>.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      The point of these three files is to provide reasonable default
      mechanisms for autoloading the classes contained in the module,
      thus providing a trivial way to consume the module without
      requiring <classname>Zend\Module</classname> (e.g., for use outside a
      ZF2 application).
    </para>

    <para>
      The <filename>config</filename> directory should contain any
      module-specific configuration. These files may be in any format
      <classname>Zend\Config</classname> supports. We recommend naming the main
      configuration "module.format", and for PHP-based configuration,
      "module.config.php". Typically, you will create configuration for the
      router as well as for the dependency injector.
    </para>

    <para>
      The <filename>src</filename> directory should be a
      <link xlink:href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md">PSR-0 compliant directory structure</link>
      with your module's source code. Typically, you should at least have
      one subdirectory named after your module namespace; however, you
      can ship code from multiple namespaces if desired.
    </para>

    <para>
      The <filename>tests</filename> directory should contain your unit
      tests. Typically, these will be written using
      <link xlink:href="http://phpunit.de">PHPUnit</link>, and contain
      artifacts related to its configuration (e.g.,
      <filename>phpunit.xml</filename>, <filename>bootstrap.php</filename>).
    </para>

    <para>
      The <filename>public</filename> directory can be used for assets that
      you may want to expose in your application's document root. These
      might include images, CSS files, JavaScript files, etc. How these
      are exposed is left to the developer.
    </para>

    <para>
      The <filename>views</filename> contains view scripts related to your
      controllers.
    </para>
  </section>

  <section xml:id="zend.mvc.intro.bootstrapping-an-application">
    <info><title>Bootstrapping an Application</title></info>

    <para>
      An <classname>Application</classname> composes several objects, but the
      ones of particular interest to the developer are the Router and the
      Locator. These will always need to be configured and injected in
      order for the <classname>Application</classname> to run. Thus,
      bootstrapping consists of configuring and injecting the router, as
      well as the locator.
    </para>

    <para>
      Zend Framework ships a default bootstrap implementation in
      <classname>Zend\Mvc\Bootstrap</classname>. This class accepts an
      instance of <classname>Zend\Config\Config</classname> to its constructor;
      once you have an instance, you then call its
      <methodname>bootstrap()</methodname> method, passing it the
      <classname>Application</classname> instance. It will then configure your
      locator (using <classname>Zend\Di\Di</classname> by default) and your
      router (using <classname>Zend\Mvc\Router\Http\TreeRouteStack</classname>
      by default).
    </para>

    <para>
      Once those two tasks are accomplished, it then triggers a "bootstrap"
      event on its attached <classname>EventManager</classname> instance. This
      allows your modules to attach listeners, and thus perform additional, 
      module-specific, bootstrapping tasks (which might include registering
      ACLs, setting up cache or log listeners, etc.).
    </para>

    <para>
      Usage would then be as follows:
    </para>

    <programlisting language="php"><![CDATA[
// Assuming $config is the merged config from all modules
$bootstrap   = new Bootstrap($config);
$application = new Application();
$bootstrap->bootstrap($application);
]]></programlisting>

    <para>
      At this point, your <classname>Application</classname> would be ready
      to run:
    </para>

    <programlisting language="php"><![CDATA[
$response = $application->run();
$response->send();
]]></programlisting>

    <para>
      The <methodname>run()</methodname> method does basically four things:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          It martials the <classname>Request</classname> object, ensuring that it
          is fully configured based on the current request environment (this
          includes injecting headers, query and POST parameters, and more).
        </para>
      </listitem>

      <listitem>
        <para>
          It triggers a "route" event. By default, the
          <methodname>route()</methodname> method of the
          <classname>Application</classname> is registered as a listener, but you
          can provide your own listeners to either replace it or intercept
          before or after it executes.
        </para>
      </listitem>

      <listitem>
        <para>
          It triggers a "dispatch" event. By default, the
          <methodname>dispatch()</methodname> method of the
          <classname>Application</classname> is registered as a listener, but you
          can provide your own listeners to either replace it or intercept
          before or after it executes.
        </para>
      </listitem>

      <listitem>
        <para>
          It martials a <classname>Response</classname> object capable of sending
          itself from the return values of the "dispatch" event.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      You'll note that you have a great amount of control over the
      workflow. Using the EventManager's priority system, you can
      intercept the "route" and "dispatch" events
      anywhere during execution, allowing you to craft your own
      application workflows as needed.
    </para>
  </section>

  <section xml:id="zend.mvc.intro.bootstrapping-a-modular-application">
    <info><title>Bootstrapping a Modular Application</title></info>

    <para>
      While the previous approach largely works, where does the
      configuration come from? When we create a modular application, the
      assumption will be that it's from the modules themselves. How do we
      get that information and aggregate it, then?
    </para>

    <para>
      The answer is via <classname>Zend\Module\Manager</classname>. This
      component allows you to specify where modules exist, and it will
      then locate each module and initialize it. If a module's
      <classname>Module</classname> class has a
      <methodname>getConfig()</methodname> method, it will retrieve its
      configuration and merge it with the application configuration.
      Sound complicated? It's not.
    </para>

    <section xml:id="zend.mvc.intro.bootstrapping-a-modular-application.configuring-the-module-manager">
      <info><title>Configuring the Module Manager</title></info>

      <para>
          The first step is configuring the module manager. The easiest way to
          do this is to utilize the provided
          <classname>Zend\Module\Listener\DefaultListenerAggregate</classname>.
          Then you simply inform the module manager which modules to load and
          attach the listener aggregate.
      </para>

      <para>
        Remember the <filename>application.config.php</filename> from
        earlier? We're going to provide some configuration.
      </para>

      <programlisting language="php"><![CDATA[
<?php
// config/application.config.php
return array(
    'modules' => array(
        /* ... */
    ),
    'module_listener_options' => array( 
        'module_paths' => array(
            './module',
            './vendor',
        ),
    ),
);
]]></programlisting>

      <para>
        As we add modules to the system, we'll add items to the
        <varname>modules</varname> array.
      </para>

      <para>
        Now, within our <filename>public/index.php</filename>, we can setup
        the <classname>DefaultListenerAggregate</classname>:
      </para>

      <programlisting language="php"><![CDATA[
use Zend\Module\Listener;

$moduleConfig     = include __DIR__ . '/../configs/application.config.php';
$listenerOptions  = new Listener\ListenerOptions($moduleConfig['module_listener_options']);
$defaultListeners = new Listener\DefaultListenerAggregate($listenerOptions);
]]></programlisting>

      <para>
        Once we have that out of the way, we can instantiate our module
        manager:
      </para>

      <programlisting language="php"><![CDATA[
use Zend\Module\Manager as ModuleManager;

$moduleManager = new ModuleManager(
    $moduleConfig['modules']
);
$moduleManager->events()->attachAggregate($defaultListeners);
]]></programlisting>

      <para>
        Each <classname>Module</classname> class that has configuration it wants
        the <classname>Application</classname> to know about should define a
        <methodname>getConfig()</methodname> method. That method should return
        an array or <classname>Traversable</classname> object such as
        <classname>Zend\Config\Config</classname>. As an example:
      </para>

      <programlisting language="php"><![CDATA[
namespace ZendUser;

class Module
{
    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php'
    }
}
]]></programlisting>
    </section>
  </section>

  <section xml:id="zend.mvc.intro.conclusion">
    <info><title>Conclusion</title></info>

    <para>
      The ZF2 MVC layer is incredibly flexible, offering an opt-in, easy
      to create modular infrastructure, as well as the ability to craft
      your own application workflows via the EventManager system.
      Bootstrapping, while largely left to the developer, is
      straight-forward and provides a simple methodology for configuring
      the application and informing it of the various routes and services
      in play. The module manager is a lightweight and simple approach to
      enforcing a modular architecture that encourages clean separation
      of concerns and code re-use.
    </para>
  </section>
</section>
