<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.loader.plugin-class-locater"><info><title>The PluginClassLocater interface</title></info>
    

    <section xml:id="zend.loader.plugin-class-locater.intro"><info><title>Overview</title></info>
        

        <para>
            The <interfacename>PluginClassLocater</interfacename> interface describes a component
            capable of maintaining an internal map of plugin names to actual class names. Classes
            implementing this interface can register and unregister plugin/class associations, and
            return the entire map.
        </para>
    </section>

    <section xml:id="zend.loader.plugin-class-locater.quick-start"><info><title>Quick Start</title></info>
        

        <para>
            Classes implementing the <interfacename>PluginClassLocater</interfacename> need to
            implement only three methods, as illustrated below.
        </para>

        <programlisting language="php"><![CDATA[
namespace Zend\Loader;

interface PluginClassLocater
{
    public function registerPlugin($shortName, $className);
    public function unregisterPlugin($shortName);
    public function getRegisteredPlugins();
}
]]></programlisting>
    </section>

    <section xml:id="zend.loader.plugin-class-locater.options"><info><title>Configuration Options</title></info>
        

        <para>
            This component defines no configuration options, as it is an interface.
        </para>
    </section>

    <section xml:id="zend.loader.plugin-class-locater.methods"><info><title>Available Methods</title></info>
        

        <refentry xml:id="zend.loader.plugin-class-locater.methods.register-plugin">
            <refnamediv>
                <refname>registerPlugin</refname>
                <refpurpose>Register a mapping of plugin name to class name</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>registerPlugin</methodname>
                    <methodparam>
                        <funcparams>$shortName, $className</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsection><info><title>registerPlugin()</title></info>
                

                <para>
                    Implement this method to add or overwrite plugin name/class name associations in
                    the internal plugin map. <varname>$shortName</varname> will be aliased to
                    <varname>$className</varname>.
                </para>
            </refsection>
        </refentry>

        <refentry xml:id="zend.loader.plugin-class-locater.methods.unregister-plugin">
            <refnamediv>
                <refname>unregisterPlugin</refname>
                <refpurpose>Remove a plugin/class name association</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>unregisterPlugin</methodname>
                    <methodparam>
                        <funcparams>$shortName</funcparams>
                    </methodparam>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsection><info><title>unregisterPlugin()</title></info>
                

                <para>
                    Implement this to allow removing an existing plugin mapping corresponding to
                    <varname>$shortName</varname>.
                </para>
            </refsection>
        </refentry>

        <refentry xml:id="zend.loader.plugin-class-locater.methods.get-registered-plugins">
            <refnamediv>
                <refname>getRegisteredPlugins</refname>
                <refpurpose>Retrieve the map of plugin name/class name associations</refpurpose>
            </refnamediv>

            <refsynopsisdiv>
                <methodsynopsis>
                    <methodname>getRegisteredPlugins</methodname>
                </methodsynopsis>
            </refsynopsisdiv>

            <refsection><info><title>getRegisteredPlugins()</title></info>
                

                <para>
                    Implement this to allow returning the plugin name/class name map.
                </para>
            </refsection>
        </refentry>

    </section>

    <section xml:id="zend.loader.plugin-class-locater.examples"><info><title>Examples</title></info>
        


        <para>
            Please see the <link linkend="zend.loader.plugin-class-locater.quick-start">Quick
                Start</link> for the interface specification.
        </para>
    </section>
</section>
