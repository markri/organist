<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.filter.introduction"><info><title>Introduction</title></info>


    <para>
        The <classname>Zend_Filter</classname> component provides a set of commonly needed data
        filters. It also provides a simple filter chaining mechanism by which
        multiple filters may be applied to a single datum in a user-defined
        order.
    </para>

    <section xml:id="zend.filter.introduction.definition"><info><title>What is a filter?</title></info>


        <para>
            In the physical world, a filter is typically used for removing
            unwanted portions of input, and the desired portion of the input
            passes through as filter output (e.g., coffee). In such scenarios,
            a filter is an operator that produces a subset of the input. This
            type of filtering is useful for web applications - removing illegal
            input, trimming unnecessary white space, etc.
        </para>

        <para>
            This basic definition of a filter may be extended to include
            generalized transformations upon input. A common transformation
            applied in web applications is the escaping of <acronym>HTML</acronym> entities. For
            example, if a form field is automatically populated with untrusted
            input (e.g., from a web browser), this value should either be free
            of <acronym>HTML</acronym> entities or contain only escaped <acronym>HTML</acronym>
            entities, in order to prevent undesired behavior and security vulnerabilities. To meet
            this requirement, <acronym>HTML</acronym> entities that appear in the input must
            either be removed or escaped. Of course, which approach is more
            appropriate depends on the situation. A filter that removes the
            <acronym>HTML</acronym> entities operates within the scope of the first definition of
            filter - an operator that produces a subset of the input. A filter
            that escapes the <acronym>HTML</acronym> entities, however, transforms the input
            (e.g., "&amp;" is transformed to
            "&amp;amp;"). Supporting such use cases for web
            developers is important, and "to filter," in the context of using
            <classname>Zend_Filter</classname>, means to perform some transformations upon input
            data.
        </para>
    </section>

    <section xml:id="zend.filter.introduction.using"><info><title>Basic usage of filters</title></info>


        <para>
            Having this filter definition established provides the foundation
            for <classname>Zend_Filter_Interface</classname>, which requires a single
            method named <methodname>filter()</methodname> to be implemented by a filter
            class.
        </para>

        <para>
            Following is a basic example of using a filter upon two input data,
            the ampersand (<emphasis>&amp;</emphasis>) and double quote
            (<emphasis>"</emphasis>) characters:
        </para>

        <programlisting language="php"><![CDATA[
$htmlEntities = new Zend_Filter_HtmlEntities();

echo $htmlEntities->filter('&'); // &
echo $htmlEntities->filter('"'); // "
]]></programlisting>
    </section>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude" href="Zend_Filter-StaticFilter.xml"/>

    <section xml:id="zend.filter.introduction.caveats"><info><title>Double filtering</title></info>


        <para>
            When using two filters after each other you have to keep in mind that it is often not
            possible to get the original output by using the opposite filter. Take the following
            example:
        </para>

        <programlisting language="php"><![CDATA[
$original = "my_original_content";

// Attach a filter
$filter   = new Zend_Filter_Word_UnderscoreToCamelCase();
$filtered = $filter->filter($original);

// Use it's opposite
$filter2  = new Zend_Filter_Word_CamelCaseToUnderscore();
$filtered = $filter2->filter($filtered)
]]></programlisting>

        <para>
            The above code example could lead to the impression that you will get the original
            output after the second filter has been applied. But thinking logically this is not the
            case. After applying the first filter <emphasis>my_original_content</emphasis> will be
            changed to <emphasis>MyOriginalContent</emphasis>. But after applying the second filter
            the result is <emphasis>My_Original_Content</emphasis>.
        </para>

        <para>
            As you can see it is not always possible to get the original output by using a filter
            which seems to be the opposite. It depends on the filter and also on the given input.
        </para>
    </section>
</section>
