<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.module.module-autoloader">

    <info>
        <title>The Module Autoloader</title>
    </info>

    <para>
        Zend Framework 2 ships with a default module autoloader.
        <classname>Zend\Loader\ModuleAutoloader</classname> is a specialized autoloader that is
        responsible for location of, and on-demand loading of, the <classname>Module</classname>
        classes from a variety of sources.
    </para>

    <section xml:id="zend.module.module-autoloader.usage">
        <info>
            <title>Module Autoloader Usage</title>
        </info>

        <para>
            If you are using the provided
            <classname>Zend\Module\Listener\DefaultListenerAggregate</classname>, then it is very
            simple to set up the module autoloader. You simply need to provide an array of module
            paths, either absolute or relative to the application's root, for the module autoloader
            to check when loading modules. The default listener aggregate will take care of
            instantiating and registering the module autoloader for you.
        </para>

        <para>
            Keep in mind that in order for paths relative to your application directory to work, you
            must have the directive <code>chdir(dirname(__DIR__));</code> in your
            <filename>public/index.php</filename>.
        </para>

        <example xml:id="zend.module.module-autoloader.example.module-autoloading">
            <info>
                <title>Registering module paths with the default listener aggregate</title>
            </info>

            <para>
                The following example will search for modules in three different paths. Two are
                local directories for this application, and the third is a system-wide shared
                directory.
            </para>

            <programlisting language="php"><![CDATA[
// public/index.php
use Zend\Module\Listener,
    Zend\Module\Manager;

chdir(dirname(__DIR__));

// Instantiate and configure the default listener aggregate
$listenerOptions = new Listener\ListenerOptions(array(
    'module_paths' => array(
        './module',
        './vendor',
        '/usr/share/zfmodules',
    )
));
$defaultListeners = new Listener\DefaultListenerAggregate($listenerOptions);

// Instantiate the module manager
$moduleManager = new Manager(array(
    'Application',
    'FooModule',
    'BarModule',
));

// Attach the default listener aggregate and load the modules
$moduleManager->events()->attachAggregate($defaultListeners);
$moduleManager->loadModules();
]]></programlisting>
        </example>

        <note>
            <para>
                Module paths behave very similar to the PHP include path, and are searched in the
                order they are defined. If you have modules with the same name in more than one
                registered module path, the module autoloader will return the first one it finds.
            </para>
        </note>

    </section>
    
    <section xml:id="zend.module.module-autoloader.non-standard-module-paths">
        <info>
            <title>Non-Standard / Explicit Module Paths</title>
        </info>

        <para>
            Sometimes you may want to specify exactly where a module is instead of having
            <classname>Zend\Loader\ModuleAutoloader</classname> try to find it in the registered
            paths.
        </para>

        <example xml:id="zend.module.module-autoloader.example.module-loading-nonstandard-paths">
            <info>
                <title>Registering a Non-Standard / Explicit Module Path</title>
            </info>

            <para>
                In this example, the autoloader will first check for
                <classname>MyModule\Module</classname> in
                <filename>/path/to/mymoduledir-v1.2/Module.php</filename>. If it's not found, then
                it will fall back to searching any other registered module paths.
            </para>

            <programlisting language="php"><![CDATA[
// ./public/index.php
use Zend\Loader\ModuleAutoloader,
    Zend\Module\Listener,
    Zend\Module\Manager;

chdir(dirname(__DIR__));

// Instantiate and configure the default listener aggregate
$listenerOptions = new Listener\ListenerOptions(array(
    'module_paths' => array(
        './module',
        './vendor',
        '/usr/share/zfmodules',
        'MyModule' => '/path/to/mymoduledir-v1.2',
    )
));
$defaultListeners = new Listener\DefaultListenerAggregate($listenerOptions);

/**
 * Without DefaultListenerAggregate:
 *
 * $moduleAutoloader = new ModuleAutoloader(array(
 *     './module',
 *     './vendor',
 *     '/usr/share/zfmodules',
 *     'MyModule' => '/path/to/mymoduledir-v1.2',
 * ));
 * $moduleAutoloader->register();
 *
 */

// Instantiate the module manager
$moduleManager = new Manager(array(
    'MyModule',
    'FooModule',
    'BarModule',
));

// Attach the default listener aggregate and load the modules
$moduleManager->events()->attachAggregate($defaultListeners);
$moduleManager->loadModules();
]]></programlisting>
        </example>

        <para>
            This same method works if you provide the path to a phar archive.
        </para>
    </section>

    <section xml:id="zend.module.module-autoloader.packaging-modules-with-phar">
        <info>
            <title>Packaging Modules with Phar</title>
        </info>

        <para>
            If you prefer, you may easily package your module as a <link
                xlink:href="http://php.net/phar">phar archive</link>. The module autoloader is able
            to autoload modules in the following archive formats: .phar, .phar.gz, .phar.bz2,
            .phar.tar, .phar.tar.gz, .phar.tar.bz2, .phar.zip, .tar, .tar.gz, .tar.bz2, and .zip.
        </para>

        <para>
            The easiest way to package your module is to simply tar the module directory. You can
            then replace the <filename>MyModule/</filename> directory with
            <filename>MyModule.tar</filename>, and it should still be autoloaded without any
            additional changes!
        </para>

        <note>
            <para>
                If possible, avoid using any type of compression (bz2, gz, zip) on your phar
                archives, as it introduces unnecessary CPU overhead to each request.
            </para>
        </note>
    </section>
</section>
