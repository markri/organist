<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.validate.set.int"><info><title>Int</title></info>
    

    <para>
        <classname>Zend_Validate_Int</classname> prüft ob ein angegebener Wert ein Integer
        (Ganzzahl) ist. Auch lokalisierte Integerwerte werden erkannt und können geprüft werden.
    </para>

    <section xml:id="zend.validate.set.int.options"><info><title>Unterstützte Optionen für Zend_Validate_Int</title></info>
        

        <para>
            Die folgenden Optionen werden für <classname>Zend_Validate_Int</classname> unterstützt:
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis><property>locale</property></emphasis>: Setzt das Gebietsschema
                    welches verwendet wird um lokalisierte Integerwerte zu prüfen.
                </para>
            </listitem>
        </itemizedlist>
    </section>

    <section xml:id="zend.validate.set.int.basic"><info><title>Einfache Integer Prüfung</title></info>
        

        <para>
            Der einfachste Weg um einen Integerwert zu prüfen ist die Verwendung der
            Systemeinstellungen. Wenn keine Optionen angegeben werden, dann wird das Gebietsschema
            der Umgebung für die Prüfung verwendet:
        </para>

        <programlisting language="php"><![CDATA[
$validator = new Zend_Validate_Int();

$validator->isValid(1234);   // Gibt true zurück
$validator->isValid(1234.5); // Gibt false zurück
$validator->isValid('1,234'); // Gibt true zurück
]]></programlisting>

        <para>
            Um obigen Beispiel haben wir angenommen das unsere Umgebung auf "en" als Gebietsschema
            gesetzt ist. Wie man im dritten Beispiel sieht wird auch die Gruppierung erkannt.
        </para>
    </section>

    <section xml:id="zend.validate.set.int.localized"><info><title>Lokalisierte Integer Prüfung</title></info>
        

        <para>
            Oft ist es nützlich dazu in der Lage zu sein lokalisierte Werte zu prüfen. Integerwerte
            werden in anderen Ländern oft unterschiedlich geschrieben. Zum Beispiel kann man im
            Englischen  "1234" oder "1,234" schreiben. Beides sind Integerwerte, aber die
            Gruppierung ist optional. Im Deutschen kann man zum Beispiel "1.234" schreiben und im
            Französischen "1 234".
        </para>

        <para>
            <classname>Zend_Validate_Int</classname> ist in der Lage solche Schreibweisen zu prüfen.
            Das bedeutet, das es nicht einfach das Trennzeichen entfernt, sondern auch prüft ob das
            richtige Trennzeichen verwendet wird. Siehe den folgenden Code:
        </para>

        <programlisting language="php"><![CDATA[
$validator = new Zend_Validate_Int(array('locale' => 'de'));

$validator->isValid(1234); // Gibt true zurück
$validator->isValid("1,234"); // Gibt false zurück
$validator->isValid("1.234"); // Gibt true zurück
]]></programlisting>

        <para>
            Wie man sieht wird die Eingabe, bei Verwendung eines Gebietsschemas, lokalisiert
            geprüft. Bei Verwendung der englischen Schreibweise erhält man
            <constant>FALSE</constant> wenn das Gebietsschema eine andere Schreibweise erzwingt.
        </para>

        <para>
            Das Gebietsschema kann auch im Nachhinein gesetzt werden indem
            <methodname>setLocale()</methodname> verwendet wird, und empfangen indem man
            <methodname>getLocale()</methodname> verwendet.
        </para>
    </section>
</section>
