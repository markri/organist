<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.locale.parsing"><info><title>Normalisierung und Lokalisierung</title></info>
    

    <para>
        <classname>Zend_Locale_Format</classname> ist eine interne Komponente welche von
        <classname>Zend_Locale</classname> verwendet wird. Alle lokalisierbaren Klassen benutzen
        <classname>Zend_Locale_Format</classname> für Normalisierung und Lokalisierung von Nummern
        und Daten. Normalisierung beinhaltet das Analysieren von Eingaben von einer Vielfalt von
        Werten wie Datumswerte in eine standardisierten, strukturieren Art wie zum Beispiel ein
        <acronym>PHP</acronym> Array mit Jahr, Monat und Tages Elementen.
    </para>

    <para>
        Genau die gleiche Zeichenkette die eine Zahl oder ein Datum enthält meint etwas ganz anderes
        für Leute mit anderen Regeln und Konventionen. Die Erkennung von Nummern und Daten benötigt
        Regeln darüber wie diese Zeichenketten zu interpretieren sind um diese Werte in eine
        standardisierte Form zu bringen. Deswegen benötigen alle Methoden in
        <classname>Zend_Locale_Format</classname> ein Gebietsschema um Eingabedaten analysieren zu
        können.

        <note><info><title>Standard "root" Gebietsschema</title></info>
            

            <para>
                Wenn kein Gebietsschema spezifiziert wurde, wird die Normalisierung und
                Lokalisierung das Standard "root" Gebietsschema verwenden, was zu unerwarteten
                Ergebnissen führen kann wenn die Eingabe in einem anderen Gebietsschema angegeben
                oder die Ausgabe für ein anderes Gebietsschema erwartet wurde.
            </para>
        </note>
    </para>

    <section xml:id="zend.locale.number.normalize"><info><title>Normalisierung von Nummern: getNumber($input, Array $options)</title></info>
        

        <para>
            Es gibt viele
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://en.wikipedia.org/wiki/Numeral">Ziffernsysteme</link>
            welche siche vom üblichen
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://en.wikipedia.org/wiki/Decimal">Dezimalsystem</link>
            unterscheiden (z.B. "3.14"). Nummern können mit der Funktion
            <methodname>getNumber()</methodname> normalisiert werden um ein gleichwertiges Ergebnis
            in einer Schreibweise des Standard Dezimalsystems zu erhalten. Für alle
            Ziffern-Relevanten Diskussionen in diesem Handbuch werden die
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://en.wikipedia.org/wiki/Arabic_numerals">Arabisch/Europäischen Ziffern
                 (0,1,2,3,4,5,6,7,8,9)</link> verwendet, ausser es ist anders definiert. Das
            Options Array kann ein 'locale' Gebietsschema enthalten, um eine Gruppierung und
            Kommazeichen zu definieren. Das Array kann auch eine Genauigkeit 'precision' enthalten
            um überschüssige Ziffern vom Ergebnis abzuschneiden.
        </para>

        <example xml:id="zend.locale.number.normalize.example-1"><info><title>Normalisieren von Nummern</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::getNumber('13.524,678',
                                        array('locale' => $locale,
                                              'precision' => 3)
                                       );

print $number; // wird 13524.678 zurückgeben
]]></programlisting>
        </example>

        <section xml:id="zend.locale.number.normalize.precision"><info><title>Genauigkeit und Berechnungen</title></info>
            

            <para>
                Da <methodname>getNumber($value, array $options = array())</methodname> extrem lange
                Nummern lokalisieren kann, sollte das Ergebnis sorgfältig geprüft werden bevor
                endlich genaue Berechnungen wie normale mathematische <acronym>PHP</acronym>
                Operationen gemacht werden. Zum Beispiel
                <command>if ((string)int_val($number) != $number) { </command> benutze <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.php.net/bc">BCMath</link> oder
                    <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.php.net/gmp">GMP</link>. Die meisten PHP
                Installationen unterstützen die BCMath Erweiterung.
            </para>

            <para>
                Auch die Genauigkeit des dezimalen Ergebnisses kann zu einer gewünschten Länge
                abgerundet werden bei <methodname>getNumber()</methodname> mit der Option
                '<property>precision</property>'. Wenn keine Genauigkeit angegeben wurde, wird nicht
                abgerundet. Für die Angabe der Genauigkeit dürfen nur <acronym>PHP</acronym> Integer
                Zahlen verwendet werden. Das Ergebnis wird nicht gerundet. Deswegen wird "1.6" auch
                "1" und nicht "2" zurückgeben, wenn als Genauigkeit null angegeben wurde.
            </para>

            <para>
                Wenn das dezimale Ergebnis zu einer gewünschten Länge abgeschnitten statt gerundet
                werden soll kann stattdessen die Option '<property>number_format</property>'
                verwendet werden. Die Länge des gewünschten dezimalen Ergebnisses kann mit der
                gewünschten Länge von Nullen bestimmt werden. Das Ergebnis wird dann nicht gerundet.
                Wenn also die definierte Genauigkeit innerhalb von
                <property>number_format</property> Null ist wird "1.6" den Wert "1" und nicht "2"
                zurückgeben. Siehe das folgende Beispiel:
            </para>

            <example xml:id="zend.locale.number.normalize.precision.example-1"><info><title>Normalisierung von Nummern mit Genauigkeit</title></info>
                

                <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::getNumber('13.524,678',
                                        array('precision' => 1,
                                              'locale' => $locale)
                                       );
print $number; // will 13524.7 zurückgeben

$number = Zend_Locale_Format::getNumber('13.524,678',
                                        array('number_format' => '#.00',
                                              'locale' => $locale)
                                       );
print $number; // will 13524.67 zurückgeben
]]></programlisting>
            </example>
        </section>
    </section>

    <section xml:id="zend.locale.number.localize"><info><title>Lokalisieren von Nummern</title></info>
        

        <para>
            <methodname>toNumber($value, array $options = array())</methodname> kann, mit Hilfe der
            folgenden <link linkend="zend.locale.appendix">unterstützten Gebietsschemata</link>,
            Nummern lokalisieren. Diese Funktion gibt eine lokalisierte Zeichenkette der angegebenen
            Nummer in dem konventionellen Format für ein definiertes Gebietsschema aus. Die Option
            'number_format' definiert ein explizit angegebenes nicht standardmäßiges Nummernformat
            für die Verwendung mit <methodname>toNumber()</methodname>.
        </para>

        <example xml:id="zend.locale.number.localize.example-1"><info><title>Lokalisieren von Nummern</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::toNumber(13547.36,
                                       array('locale' => $locale));

// gibt 13.547,36 zurück
print $number;
]]></programlisting>
        </example>

        <para>
            <note><info><title>Unlimitierte Länge</title></info>
                

                <para>
                    <methodname>toNumber()</methodname> kann Nummern mit unendlicher Länge
                    lokalisieren. Hierbei gibt es keine Abhängigkeiten mit Integer oder Float
                    Limits.
                </para>
            </note>
        </para>

        <para>
            Auf dem selben Web wie unter <methodname>getNumber()</methodname> verwendet
            <methodname>toNumber()</methodname> die Genauigkeit. Wenn keine Genauigkeit angegeben
            wurde, wird die komplette lokalisierte Nummer zurückgegeben.
        </para>

        <example xml:id="zend.locale.number.localize.example-2"><info><title>Nummern mit bestimmter Genauigkeit lokalisieren</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::toNumber(13547.3678,
                                       array('precision' => 2,
                                             'locale' => $locale));

// gibt 13.547,37 zurück
print $number;
]]></programlisting>
        </example>

        <para>
            Wird die Option 'number_format' benutzt, kann ein selbst definiertes Format für das
            erstellen der Nummer definiert werden. Das Format selbst muß im <acronym>CLDR</acronym>
            Format wie anbei beschrieben angegeben werden. Das Gebietsschema wird hierbei benutzt um
            das Trennzeichen, die Genauigkeit und andere Formatierungszeichen für Zahlen zu
            erhalten. Deutsch definiert zum Beispiel ',' als Kommazeichen und im Englischen wird das
            '.' Zeichen benutzt.
        </para>

        <table xml:id="zend.locale.number.localize.table-1"><info><title>Definitionen für selbst erzeugte Zahlenformate</title></info>
            

            <tgroup cols="4">
                <thead>
                    <row>
                        <entry>Definition</entry>
                        <entry>Beschreibung</entry>
                        <entry>Beispiel Format</entry>
                        <entry>Erzeugte Ausgabe</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry>#0</entry>
                        <entry>Erzeugt eine Zahl ohne Genauigkeit und ohne Trennung</entry>
                        <entry>#0</entry>
                        <entry>1234567</entry>
                    </row>

                    <row>
                        <entry>,</entry>

                        <entry>
                            Erzeugt eine Trennung mit der Länge von einem Trennzeichen zum nächsten
                            oder zur 0
                        </entry>

                        <entry>#,##0</entry>
                        <entry>1,234,567</entry>
                    </row>

                    <row>
                        <entry>#,##,##0</entry>

                        <entry>
                            Erzeugt eine Standard Trennung von 3 und alle weiteren Trennungen mit 2
                        </entry>

                        <entry>#,##,##0</entry>
                        <entry>12,34,567</entry>
                    </row>

                    <row>
                        <entry>.</entry>
                        <entry>Erzeugt eine Kommazahl</entry>
                        <entry>#0.#</entry>
                        <entry>1234567.1234</entry>
                    </row>

                    <row>
                        <entry>0</entry>
                        <entry>Erzeugt eine Kommazahl mit definierter Länge</entry>
                        <entry>#0.00</entry>
                        <entry>1234567.12</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <example xml:id="zend.locale.number.localize.example-3"><info><title>Ein selbst definiertes Zahlenformat verwenden</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::toNumber(13547.3678,
                                       array('number_format' => '#,#0.00',
                                             'locale' => 'de')
                                      );

// gibt 1.35.47,36 zurück
print $number;

$number = Zend_Locale_Format::toNumber(13547.3,
                                       array('number_format' => '#,##0.00',
                                             'locale' => 'de')
                                      );

// gibt 13.547,30 zurück
print $number;
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.locale.number.test"><info><title>Testen von Zahlen</title></info>
        

        <para>
            <methodname>isNumber($value, array $options = array())</methodname> prüft ob eine
            gegebene Zeichenkette eine Zahl enthält und gibt <constant>TRUE</constant> oder
            <constant>FALSE</constant> zurück.
        </para>

        <example xml:id="zend.locale.number.test.example-1"><info><title>Testen von Zahlen</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale();
if (Zend_Locale_Format::isNumber('13.445,36', array('locale' => 'de_AT')) {
    print "Zahl";
} else {
    print "keine Zahl";
}
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.locale.float.normalize"><info><title>Gleitkommazahlen normalisieren</title></info>
        

        <para>
            Lokalisierte Gleitkommazahlen können mit <code>getFloat($value, array $options =
                array())</code> analysiert werden. Es wird eine Gleitkommazahl zurückgegeben.
        </para>

        <example xml:id="zend.locale.float.normalize.example-1"><info><title>Gleitkommazahlen normalisieren</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::getFloat('13.524,678',
                                       array('precision' => 2,
                                             'locale' => $locale));

// gibt 13524.68 zurück
print $number;
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.locale.float.localize"><info><title>Lokalisieren von Gleitkommazahlen</title></info>
        

        <para>
            <methodname>toFloat()</methodname> kann Gleitkommazahlen lokalisieren. Diese Funktion
            gibt eine lokalisierte Zeichenkette mit der gegebenen Zahl zurück.
        </para>

        <example xml:id="zend.locale.float.localize.example-1"><info><title>Lokalisieren von Gleitkommazahlen</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::toFloat(13547.3655,
                                      array('precision' => 1,
                                            'locale' => $locale));

// gibt 13.547,4 zurück
print $number;
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.locale.float.test"><info><title>Testen von Gleitkommazahlen</title></info>
        

        <para>
            <methodname>isFloat($value, array $options = array())</methodname> prüft ob eine
            gegebene Zeichenkette eine Gleitkommazahl enthält und gibt <constant>TRUE</constant>
            oder <constant>FALSE</constant> zurück.
        </para>

        <example xml:id="zend.locale.float.test.example-1"><info><title>Testen von Gleitkommazahlen</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
if (Zend_Locale_Format::isFloat('13.445,36', array('locale' => $locale)) {
    print "Gleitkommazahl";
} else {
    print "keine Gleitkommazahl";
}
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.locale.integer.normalize"><info><title>Integer Zahlen normalisieren</title></info>
        

        <para>
            Integer Zahlen können mit der Funktion <methodname>getInteger()</methodname> analysiert
            werden. Es wird ein Integer Wert zurückgegeben.
        </para>

        <example xml:id="zend.locale.integer.normalize.example-1"><info><title>Normalisieren von Integer Zahlen</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::getInteger('13.524,678',
                                         array('locale' => $locale));

// gibt 13524 zurück
print $number;
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.locale.integer.localize"><info><title>Lokalisieren von Integer Zahlen</title></info>
        

        <para>
            <methodname>toInteger($value, array $options = array())</methodname> kann Integer Zahlen
            lokalisieren. Diese Funktion gibt eine lokalisierte Zeichenkette anhand der gegebenen
            Nummer zurück.
        </para>

        <example xml:id="zend.locale.integer.localize.example-1"><info><title>Lokalisieren von Integer Zahlen</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
$number = Zend_Locale_Format::toInteger(13547.3655,
                                        array('locale' => $locale));

// gibt 13.547 zurück
print $number;
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.locale.integer.test"><info><title>Testen von Integer Zahlen</title></info>
        

        <para>
            <methodname>isInteger($value, array $options = array())</methodname> prüft ob eine
            gegebene Zeichenkette eine Integer Zahl enthält und gibt <constant>TRUE</constant> oder
            <constant>FALSE</constant> zurück.
        </para>

        <example xml:id="zend.locale.integer.test.example-1"><info><title>Testen von Integer Zahlen</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
if (Zend_Locale_Format::isInteger('13.445', array('locale' => $locale)) {
    print "Integerzahl";
} else {
    print "keine Integerzahl";
}
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.locale.numbersystems"><info><title>Konvertieren von Zahlensystemen</title></info>
        

        <para>
            <methodname>Zend_Locale_Format::convertNumerals()</methodname> kann die Ziffern zwischen
            den unterschiedlichen <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://en.wikipedia.org/wiki/Arabic_numerals">Zahlensystemen</link> umwandeln.
            Das inkludiert auch das Standard Arabisch/Europäisch/Lateinische Zahlensystem
            (0,1,2,3,4,5,6,7,8,9). Nicht zu verwechseln mit dem
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://en.wikipedia.org/wiki/Eastern_Arabic_numerals">Ost-arabischen
                Zahlensystem</link> welches in der Arabischen Sprache benutzt wird um Zahlen zu
            schreiben. Der Versuch ein nicht unterstütztes Zahlensystem zu benutzen führt zu einer
            Ausnahme um eine irrtümliche falsche Konvertierung wegen eines Schreibfehlers zu
            verhindern. Alle Zeichen der Eingabe, welche keine Ziffern des angegebenen
            Zahlenformates sind, werden in den Ausgabestring kopiert ohne das Sie verändert werden.
            Das beinhaltet auch die Trennzeichen der Zahlen. <classname>Zend_Locale</classname>*
            Komponenten sind abhängig von den Daten welche durch die <acronym>CLDR</acronym> liefert
            (hier ist eine <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://unicode.org/cldr/data/diff/supplemental/languages_and_scripts.html?sortby=date">Liste
                von Schreibweisen gruppiert nach Sprachen</link>).
        </para>

        <para>
            Im <acronym>CLDR</acronym> und auch hier, werden die Europäisch/Lateinischen Zahlen als
            "Latin" bezeichnet und mit dem zugeordneten 4-Zeichen-Code "Latn" referriert. Im
            <acronym>CLDR</acronym> werden Zahlensysteme auch als "Schreibweisen" (Scripts)
            bezeichnet.
        </para>

        <para>
            Nehmen wir an eine Web Form erhält eine nummerische Eingabe welche Ost-Arabische
            Ziffern enthält "١‎٠٠". Die meisten Programme und <acronym>PHP</acronym> Funktionen
            erwarten Eingaben aber als Lateinische Ziffern. Glücklicherweise wird für die
            Konvertierung dieser Eingabe in gleichwertige Lateinische Ziffern "100" sehr wenig
            Aufwand. Es muß nur <code>convertNumerals($inputNumeralString, $sourceNumeralSystem,
                 $destNumeralSystem)</code> benutzt werden werden welches <varname>$input</varname>
            zurückgibt und hierbei die Ziffern der Schreibweise
            <varname>$sourceNumeralSystem</varname> in die Schreibweise
            <varname>$destNumeralSystem</varname> konvertiert.
        </para>

        <example xml:id="zend.locale.numbersystems.example-1"><info><title>Konvertieren von Ost-Arabischen Ziffern in Europäisch Lateinische Ziffern</title></info>
            

            <programlisting language="php"><![CDATA[
$arabicScript = "١‎٠٠";   // Arabisch für "100" (ein Hundert)
$latinScript = Zend_Locale_Format::convertNumerals($arabicScript,
                                                   'Arab',
                                                   'Latn');

print "\nOriginal:   " . $arabicScript;
print "\nNormalisiert: " . $latinScript;
]]></programlisting>
        </example>

        <para>
            Genauso kann jedes unterstützte Zahlensystem in jedes andere unterstützte Zahlensystem
            konvertiert werden.
        </para>

        <example xml:id="zend.locale.numbersystems.example-2"><info><title>Konvertieren von Lateinischen Ziffern in Ost-Arabische Ziffern</title></info>
            

            <programlisting language="php"><![CDATA[
$latinScript = '123';
$arabicScript = Zend_Locale_Format::convertNumerals($latinScript,
                                                    'Latn',
                                                    'Arab');

print "\nOriginal:  " . $latinScript;
print "\nLokalisiert: " . $arabicScript;
]]></programlisting>
        </example>

        <example xml:id="zend.locale.numbersystems.example-3"><info><title>
                Auslesen des 4 Zeichen CLDR Codes durch Benutzen des Namens in der Muttersprache
            </title></info>
            

            <programlisting language="php"><![CDATA[
function getScriptCode($scriptName, $locale)
{
    $scripts2names = Zend_Locale_Data::getList($locale, 'scriptlist');
    $names2scripts = array_flip($scripts2names);
    return $names2scripts[$scriptName];
}
echo getScriptCode('Latin', 'en'); // Ausgabe "Latn"
echo getScriptCode('Tamil', 'en'); // Ausgabe "Taml"
echo getScriptCode('tamoul', 'fr'); // Ausgabe "Taml"
]]></programlisting>
        </example>

        <para>
            Für eine Liste der unterstützten Zahlensysteme kann man
            <methodname>Zend_Locale::getTranslationList('numberingsystem', 'en')</methodname>
            aufrufen.
        </para>
    </section>
</section>
