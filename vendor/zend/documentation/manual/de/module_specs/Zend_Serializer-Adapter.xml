<?xml version="1.0" encoding="utf-8"?>


<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.serializer.adapter"><info><title>Zend_Serializer_Adapter</title></info>
    

    <para>
        <classname>Zend_Serializer</classname> Adapter erzeugen eine Brücke für unterschiedliche
        Methoden der Serialisierung mit geringem Aufwand.
    </para>

    <para>
        Jeder Adpater hat andere Vor- und Nachteile. In einigen Fällen kann nicht jeder
        <acronym>PHP</acronym> Datentyp (z.B. Objekte) in die Repräsentation eines Strings
        konvertiert werden. In den meisten dieser Fälle wird der Typ in einen ähnlichen Typ
        konvertiert der serialisierbar ist -- zum Beispiel werden <acronym>PHP</acronym> Objekte oft
        zu Arrays gecastet. Wenn dies fehlschlägt wird eine
        <classname>Zend_Serializer_Exception</classname> geworfen.
    </para>

    <para>
        Anbei ist eine Liste der vorhandenen Adapter.
    </para>

    <section xml:id="zend.serializer.adapter.phpserialize"><info><title>Zend_Serializer_Adapter_PhpSerialize</title></info>
        

        <para>
            Dieser Adapter verwendet die eingebauten <acronym>PHP</acronym> Funktionen
            <methodname>un/serialize</methodname> und ist eine gute Wahl für einen Standardadapter.
        </para>

        <para>
            Es gibt keine konfigurierbaren Optionen für diesen Adapter.
        </para>
    </section>

    <section xml:id="zend.serializer.adapter.igbinary"><info><title>Zend_Serializer_Adapter_Igbinary</title></info>
        

        <para>
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://opensource.dynamoid.com">Igbinary</link> ist eine Open Source
            Software welche von Sulake Dynamoid Oy herausgegeben wird. Statt Zeit und Platz auf
            eine textuelle Repräsentation zu verschwenden, speichert igbinary Datenstrukturen von
            <acronym>PHP</acronym> in einer kompakten binären Form. Die Einsparungen sind
            signifikant wenn memcached oder ähnliche Hauptspeicher-basierte Speicher für die
            Serialisierung der Daten verwendet wird.
        </para>

        <para>
            Man muss die <acronym>PHP</acronym> Erweiterung igbinary am eigenen System installiert
            haben um diesen Adapter verwenden zu können.
        </para>

        <para>
            Dieser Adapter nimnt keine Optionen zur Konfiguration an.
        </para>
    </section>

    <section xml:id="zend.serializer.adapter.wddx"><info><title>Zend_Serializer_Adapter_Wddx</title></info>
        

        <para>
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://wikipedia.org/wiki/WDDX">WDDX</link> (Web Distributed Data eXchange)
            ist eine Programmier-Sprache-, Plattform- und ein transport-neutraler datentauschender
            Mechanismus für die Übergabe von Daten zwischen unterschiedlichen Umgebungen und
            unterschiedlichen Computern.
        </para>

        <para>
            Der Adapter verwendet einfach die <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://php.net/manual/book.wddx.php">wddx_*()</link> <acronym>PHP</acronym>
            Funktionen. Lesen Sie bitte im <acronym>PHP</acronym> Handbuch um herauszufinden ob man
            Sie in der eigenen <acronym>PHP</acronym> Installation aktivieren kann.
        </para>

        <para>
            Zusätzlich wird die <acronym>PHP</acronym> Erweiterung <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://php.net/manual/book.simplexml.php">SimpleXML</link> verwendet um zu
            prüfen ob ein von  <methodname>wddx_unserialize()</methodname> zurückgegebener
            <constant>NULL</constant> Wert auf einem serialisierten <constant>NULL</constant> Wert
            basiert, oder auf ungültigen Daten.
        </para>

        <para>
            Vorhandene Optionen sind:
        </para>

        <table xml:id="zend.serializer.adapter.wddx.table.options"><info><title>Optionen für Zend_Serializer_Adapter_Wddx</title></info>
            

            <tgroup cols="4">
                <thead>
                    <row>
                        <entry>Option</entry>
                        <entry>Datentyp</entry>
                        <entry>Standardwert</entry>
                        <entry>Beschreibung</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry><emphasis>comment</emphasis></entry>
                        <entry><type>string</type></entry>
                        <entry/>
                        <entry>Ein optionales Kommentar welches im Paket Header vorkommt.</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </section>

    <section xml:id="zend.serializer.adapter.json"><info><title>Zend_Serializer_Adapter_Json</title></info>
        

        <para>
            Der <acronym>JSON</acronym> Adapter bietet eine Brücke zur Komponente
            <classname>Zend_Json</classname> und zu ext/json. Lesen Sie bitte die <link linkend="zend.json.introduction">Zend_Json Dokumentation</link> für weitere
            Informationen.
        </para>

        <para>
            Vorhandene Optionen sind:
        </para>

        <table xml:id="zend.serializer.adapter.json.table.options"><info><title>Optionen für Zend_Serializer_Adapter_Json</title></info>
            

            <tgroup cols="4">
                <thead>
                    <row>
                        <entry>Option</entry>
                        <entry>Datentyp</entry>
                        <entry>Standardwert</entry>
                        <entry>Beschreibung</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry><emphasis>cycleCheck</emphasis></entry>
                        <entry><type>boolean</type></entry>
                        <entry>false</entry>

                        <entry>
                            Siehe <link linkend="zend.json.advanced.objects1">diesen
                                Abschnitt</link>
                        </entry>
                    </row>

                    <row>
                        <entry><emphasis>objectDecodeType</emphasis></entry>
                        <entry><type>Zend_Json::TYPE_*</type></entry>
                        <entry>Zend_Json::TYPE_ARRAY</entry>

                        <entry>
                            Siehe <link linkend="zend.json.advanced.objects1">diesen
                                Abschnitt</link>
                        </entry>
                    </row>

                    <row>
                        <entry><emphasis>enableJsonExprFinder</emphasis></entry>
                        <entry><type>boolean</type></entry>
                        <entry>false</entry>

                        <entry>
                            Siehe <link linkend="zend.json.advanced.expr">diesen
                                Abschnitt</link>
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </section>

    <section xml:id="zend.serializer.adapter.amf03"><info><title>Zend_Serializer_Adapter_Amf 0 und 3</title></info>
        

        <para>
            Die <acronym>AMF</acronym> Adapter <classname>Zend_Serializer_Adapter_Amf0</classname>
            und <classname>Zend_Serializer_Adapter_Amf3</classname> bieten eine Brücke zum
            Serialisierer der Komponente <classname>Zend_Amf</classname>. Lesen Sie bitte die <link linkend="zend.amf.introduction">Zend_Amf Dokumentation</link> für weitere
            Informationen.
        </para>

        <para>
            Es gibt keine Optionen für diese Adapter.
        </para>
    </section>

    <section xml:id="zend.serializer.adapter.pythonpickle"><info><title>Zend_Serializer_Adapter_PythonPickle</title></info>
        

        <para>
            Dieser Adapter konvertiert <acronym>PHP</acronym> Typen in eine <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://docs.python.org/library/pickle.html">Python Pickle</link> String
            Repräsentation. Mit Ihm können die serialisierten Daten mit Python gelesen werden und
            Pickled Daten von Python mit <acronym>PHP</acronym> gelesen werden.
        </para>

        <para>
            Vorhandene Optionen sind:
        </para>

        <table xml:id="zend.serializer.adapter.pythonpickle.table.options"><info><title>Optionen für Zend_Serializer_Adapter_PythonPickle</title></info>
            

            <tgroup cols="4">
                <thead>
                    <row>
                        <entry>Option</entry>
                        <entry>Datentyp</entry>
                        <entry>Standardwert</entry>
                        <entry>Beschreibung</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry><emphasis>protocol</emphasis></entry>
                        <entry><type>integer</type> (0 | 1 | 2 | 3)</entry>
                        <entry>0</entry>

                        <entry>
                            Die Version des Pickle Protokolls welches bei
                            <methodname>serialize</methodname> verwendet wird
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            Der Wechsel von Datentypen (PHP zu Python) findet wie folgt statt:
        </para>

        <table xml:id="zend.serializer.adapter.pythonpickle.table.php2python"><info><title>Wechseln des Datentyps (PHP zu Python)</title></info>
            

            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>PHP Typ</entry>
                        <entry>Python Typ</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry><type>NULL</type></entry>
                        <entry><type>None</type></entry>
                    </row>

                    <row>
                        <entry><type>boolean</type></entry>
                        <entry><type>boolean</type></entry>
                    </row>

                    <row>
                        <entry><type>integer</type></entry>
                        <entry><type>integer</type></entry>
                    </row>

                    <row>
                        <entry><type>float</type></entry>
                        <entry><type>float</type></entry>
                    </row>

                    <row>
                        <entry><type>string</type></entry>
                        <entry><type>string</type></entry>
                    </row>

                    <row>
                        <entry><type>array</type></entry>
                        <entry><type>list</type></entry>
                    </row>

                    <row>
                        <entry><type>associative array</type></entry>
                        <entry><type>dictionary</type></entry>
                    </row>

                    <row>
                        <entry><type>object</type></entry>
                        <entry><type>dictionary</type></entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            Der Wechsel von Datentypen (Python zu <acronym>PHP</acronym>) findet wie folgt statt:
        </para>

        <table xml:id="zend.serializer.adapter.pythonpickle.table.python2php"><info><title>Wechseln des Datentyps (PHP zu Python)</title></info>
            

            <tgroup cols="2">
                <thead>
                    <row>
                        <entry>Python Typ</entry>
                        <entry>PHP Typ</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry><type>None</type></entry>
                        <entry><type>NULL</type></entry>
                    </row>

                    <row>
                        <entry><type>boolean</type></entry>
                        <entry><type>boolean</type></entry>
                    </row>

                    <row>
                        <entry><type>integer</type></entry>
                        <entry><type>integer</type></entry>
                    </row>

                    <row>
                        <entry><type>long</type></entry>

                        <entry>
                              <type>integer</type> | <type>float</type> | <type>string</type>
                              | <classname>Zend_Serializer_Exception</classname>
                        </entry>
                    </row>

                    <row>
                        <entry><type>float</type></entry>
                        <entry><type>float</type></entry>
                    </row>

                    <row>
                        <entry><type>string</type></entry>
                        <entry><type>string</type></entry>
                    </row>

                    <row>
                        <entry><type>bytes</type></entry>
                        <entry><type>string</type></entry>
                    </row>

                    <row>
                        <entry><type>Unicode string</type></entry>
                        <entry><type>UTF-8 string</type></entry>
                    </row>

                    <row>
                        <entry><type>list</type></entry>
                        <entry><type>array</type></entry>
                    </row>

                    <row>
                        <entry><type>tuple</type></entry>
                        <entry><type>array</type></entry>
                    </row>

                    <row>
                        <entry><type>dictionary</type></entry>
                        <entry><type>associative array</type></entry>
                    </row>

                    <row>
                        <entry>Alle anderen Typen</entry>
                        <entry><classname>Zend_Serializer_Exception</classname></entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </section>

    <section xml:id="zend.serializer.adapter.phpcode"><info><title>Zend_Serializer_Adapter_PhpCode</title></info>
        

        <para>
            Dieser Adapter erzeugt eine Repräsentation an <acronym>PHP</acronym> Code der geparst
            werden kann indem <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://php.net/manual/function.var-export.php">var_export()</link>
            verwendet wird. Bei der Wiederherstellung werden die Daten ausgeführt indem <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://php.net/manual/function.eval.php">eval</link> verwendet wird.
        </para>

        <para>
            Es gibt keine Optionen für die Konfiguration dieses Adapters.
        </para>

        <warning><info><title>Objekte deserialisieren</title></info>
            

            <para>
                Objekte werden serialisiert indem die magische Methode <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://php.net/manual/language.oop5.magic.php#language.oop5.magic.set-state">__set_state</link>
                verwendet wird. Wenn die Klasse diese Methode nicht implementiert wird wärend der
                Ausführung ein fataler Fehler auftreten.
            </para>
        </warning>

        <warning><info><title>Verwendet eval()</title></info>
            

            <para>
                Der Adapter <classname>PhpCode</classname> verwendet <methodname>eval()</methodname>
                für die Deserialisierung. Das führt sowohl zu Performanz- als auch zu einem
                potentiellen Sicherheitsproblem da ein neuer Prozess ausgeführt wird. Typischerweise
                sollte der Adapter <methodname>PhpSerialize</methodname> verwendet werden solange
                man die Lesbarkeit der serialisierten Daten durch Menschen benötigt.
            </para>
        </warning>
    </section>
</section>
