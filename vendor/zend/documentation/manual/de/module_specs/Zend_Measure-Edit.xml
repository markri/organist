<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.measure.edit"><info><title>Manipulation von Maßeinheiten</title></info>
    

    <para>
        Analysieren und normalisieren von Eingaben kombiniert mit der Ausgabe in lokalisierter
        Schreibweise macht die Daten für Benutzer in fremden Gebietsschemata benutzbar. Viele
        zusätzliche Methoden existieren in den <classname>Zend_Measure_*</classname> Komponentenum
        diese Daten zu manipulieren und mit Ihnen zu arbeiten nachdem Sie normalisiert wurden.
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <link linkend="zend.measure.edit.convert">Konvertieren</link>
            </para>
        </listitem>

        <listitem>
            <para>
                <link linkend="zend.measure.edit.add">Addieren und Subtrahieren</link>
            </para>
        </listitem>

        <listitem>
            <para>
                <link linkend="zend.measure.edit.equal">Identität Vergleichen</link>
            </para>
        </listitem>

        <listitem>
            <para>
                <link linkend="zend.measure.edit.compare">Werte Vergleichen</link>
            </para>
        </listitem>

        <listitem>
            <para>
                <link linkend="zend.measure.edit.changevalue">Werte per Hand ändern</link>
            </para>
        </listitem>

        <listitem>
            <para>
                <link linkend="zend.measure.edit.changetype">Typ per Hand ändern</link>
            </para>
        </listitem>
    </itemizedlist>

    <section xml:id="zend.measure.edit.convert"><info><title>Konvertieren</title></info>
        

        <para>
            Das warscheinlich wichtigste Feature ist die Konvertierung in verschiedene Maßeinheiten.
            Die Konvertierung von Maßeinheiten kann durch verwendung der Methode
            <methodname>convertTo()</methodname> beliebig oft durchgeführt werden. Maßeinheiten
            können nur in andere Einheiten des gleichen Typs (Klasse) konvertiert werden. Deswegen
            ist es nicht möglich z.B. eine Länge in ein Gewicht zu konvertieren, was ja schlechte
            Programmierpraxis und Fehler erlauben würde ohne das eine Ausnahme geworfen wird.
        </para>

        <para>
            Die <methodname>convertTo()</methodname> Methode akzeptiert einen optionalen Parameter.
            Mit diesem Parameter kann eine Genauigkeit, für den zurückgegebenen Wert, definiert
            werden. Die Standardgenauigkeit ist '2'.
        </para>

        <example xml:id="zend.measure.edit.convert.example-1"><info><title>Konvertieren</title></info>
            

            <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de');
$mystring = "1.234.567,89";
$unit = new Zend_Measure_Weight($mystring,'POND', $locale);

print "Kilo:".$unit->convertTo('KILOGRAM');

// Konstanten sind eine "bessere Praxis" als Zeichenketten
print "Tonne:".$unit->convertTo(Zend_Measure_Weight::TON);

// define a precision for the output
print "Tonne:".$unit->convertTo(Zend_Measure_Weight::TON, 3);
]]></programlisting>
        </example>
    </section>

    <section xml:id="zend.measure.edit.add"><info><title>Addieren und Subtrahieren</title></info>
        

        <para>
            Maßeinheiten können miteinander durch <methodname>add()</methodname> addiert und durch
            <methodname>sub()</methodname> subtrahiert werden. Das Ergebnis ist vom selben Typ die
            das originale Objekt. Dynamische Objekte unterstützen einen flüssigen Programmierstil,
            bei dem komplexe Sequenzen von Operationen geschachtelt werden können ohne das Risiko
            eines Nebeneffekts durch die Veränderung des Eingabe Objektes.
        </para>

        <para>
            <example xml:id="zend.measure.edit.add.example-1"><info><title>Werte addieren</title></info>
                

                <programlisting language="php"><![CDATA[
// Objekte definieren
$unit = new Zend_Measure_Length(200, Zend_Measure_Length::CENTIMETER);
$unit2 = new Zend_Measure_Length(1, Zend_Measure_Length::METER);

// $unit2 zu $unit1 addieren
$sum = $unit->add($unit2);

echo $sum; // Ausgabe "300 cm"
]]></programlisting>
            </example>
        </para>

        <note><info><title>Automatische Konvertierung</title></info>
            

            <para>
                Beim Addieren eines Objektes zu einem anderen wird dieses automatisch in die
                richtige Einheit konvertiert. Es ist nicht notwendig <link linkend="zend.measure.edit.convert"><methodname>convertTo()</methodname></link>
                aufzurufen bevor unterschiedliche Einheiten addiert werden.
            </para>
        </note>

        <para>
            <example xml:id="zend.measure.edit.add.example-2"><info><title>Subtrahieren</title></info>
                

                <para>
                    Das Subtrahieren von Maßeinheiten funktioniert genauso wie das Addieren.
                </para>

                <programlisting language="php"><![CDATA[
// Objekte definieren
$unit = new Zend_Measure_Length(200, Zend_Measure_Length::CENTIMETER);
$unit2 = new Zend_Measure_Length(1, Zend_Measure_Length::METER);

// $unit2 von $unit subtrahieren
$sum = $unit->sub($unit2);

echo $sum;
]]></programlisting>
            </example>
        </para>
    </section>

    <section xml:id="zend.measure.edit.equal"><info><title>Identität Vergleichen</title></info>
        

        <para>
            Maßeinheiten können genauso verglichen werden, aber ohne automatische Konvertierung. Das
            bedeutet das <methodname>equals()</methodname> nur dann <constant>TRUE</constant>
            zurückgibt wenn beide, sowohl der Wert als auch die Einheit identisch sind.
        </para>

        <para>
            <example xml:id="zend.measure.edit.equal.example-1"><info><title>Unterschiedliche Maßeinheiten</title></info>
                

                <programlisting language="php"><![CDATA[
// Maßeinheiten definieren
$unit = new Zend_Measure_Length(100, Zend_Measure_Length::CENTIMETER);
$unit2 = new Zend_Measure_Length(1, Zend_Measure_Length::METER);

if ($unit->equals($unit2)) {
    print "Beide Maßeinheiten sind identisch";
} else {
    print "Das sind unterschiedliche Maßeinheiten";
}
]]></programlisting>
            </example>

            <example xml:id="zend.measure.edit.equal.example-2"><info><title>Identische Maßeinheiten</title></info>
                

                <programlisting language="php"><![CDATA[
// Maßeinheiten definieren
$unit = new Zend_Measure_Length(100, Zend_Measure_Length::CENTIMETER);
$unit2 = new Zend_Measure_Length(1, Zend_Measure_Length::METER);

$unit2->setType(Zend_Measure_Length::CENTIMETER);

if ($unit->equals($unit2)) {
    print "Beide Maßeinheiten sind identisch";
} else {
    print "Das sind unterschiedliche Maßeinheiten";
}
]]></programlisting>
            </example>
        </para>
    </section>

    <section xml:id="zend.measure.edit.compare"><info><title>Werte Vergleichen</title></info>
        

        <para>
            Um herauszufinden ob eine Maßeinheite kleiner oder größer als eine andere ist kann
            <methodname>compare()</methodname> verwendet werden, was 0, -1 oder 1 zurückgibt,
            abhängig von der Differenz zwischen den zwei Objekten. Identische Maßeinheiten geben 0
            zurück, kleinere einen negativen, und größere einen positiven Wert.
        </para>

        <para>
            <example xml:id="zend.measure.edit.compare.example-1"><info><title>Differenz</title></info>
                

                <programlisting language="php"><![CDATA[
$unit = new Zend_Measure_Length(100, Zend_Measure_Length::CENTIMETER);
$unit2 = new Zend_Measure_Length(1, Zend_Measure_Length::METER);
$unit3 = new Zend_Measure_Length(1.2, Zend_Measure_Length::METER);

print "Gleich:".$unit2->compare($unit);
print "Kleiner:".$unit2->compare($unit3);
print "Größer:".$unit3->compare($unit2);
]]></programlisting>
            </example>
        </para>
    </section>

    <section xml:id="zend.measure.edit.changevalue"><info><title>Werte per Hand ändern</title></info>
        

        <para>
            Um den Wert einer Maßeinheit explizit zu Ändern, kann
            <methodname>setValue()</methodname> verwendet werden um den aktuellen Wert zu
            überschreiben. Die Parameter sind identisch mit denen des Konstruktors.
        </para>

        <para>
            <example xml:id="zend.measure.edit.changevalue.example-1"><info><title>Verändern eines Wertes</title></info>
                

                <programlisting language="php"><![CDATA[
$locale = new Zend_Locale('de_AT');
$unit = new Zend_Measure_Length(1,Zend_Measure_Length::METER);

$unit->setValue(1.2);
echo $unit;

$unit->setValue(1.2, Zend_Measure_Length::KILOMETER);
echo $unit;

$unit->setValue("1.234,56", Zend_Measure_Length::MILLIMETER,$locale);
echo $unit;
]]></programlisting>
            </example>
        </para>
    </section>

    <section xml:id="zend.measure.edit.changetype"><info><title>Typ per Hand ändern</title></info>
        

        <para>
            Um den Typ einer Maßeinheit ohne den Wert zu verändern kann
            <methodname>setType()</methodname> verwendet werden.
        </para>

        <example xml:id="zend.measure.edit.changetype.example-1"><info><title>Verändern des Typs</title></info>
            

            <programlisting language="php"><![CDATA[
$unit = new Zend_Measure_Length(1,Zend_Measure_Length::METER);
echo $unit; // Ausgabe "1 m"

$unit->setType(Zend_Measure_Length::KILOMETER);
echo $unit; // Ausgabe "1000 km"
]]></programlisting>
        </example>
    </section>
</section>
