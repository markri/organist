<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.service.strikeiron.advanced-uses"><info><title>Zend_Service_StrikeIron: Erweiterte Verwendung</title></info>
    

    <para>
        Diese Sektion beschreibt die erweiterte Verwendung von
        <classname>Zend_Service_StrikeIron</classname>.
    </para>

    <section xml:id="zend.service.strikeiron.advanced-uses.services-by-wsdl"><info><title>Die Services durch WSDL verwenden</title></info>
        

        <para>
            Für einige StrikeIron Services können <acronym>PHP</acronym> Wrapper Klassen vorhanden
            sein, so wie jene die in <link linkend="zend.service.strikeiron.bundled-services">Bundled Services</link>
            beschrieben werden. Trotzdem bietet StrikeIron hunderte von Services und viele von
            diesen können nicht verwendbar sein wenn keine spezielle Wrapper Klasse erstellt wird.
        </para>

        <para>
            Um ein StrikeIron Service zu probieren für das keine Wrapper Klasse vorhanden ist, muß
            die <property>wsdl</property> Option statt der <property>class</property> Option an
            <methodname>getService()</methodname> übergeben werden:
        </para>

        <programlisting language="php"><![CDATA[
$strikeIron = new Zend_Service_StrikeIron(
    array('username' => 'your-username', 'password' => 'your-password')
);

// Erhalte einen generellen Client zum Reverse Phone Lookup Service
$phone = $strikeIron->getService(
    array('wsdl' => 'http://ws.strikeiron.com/ReversePhoneLookup?WSDL')
);

$result = $phone->lookup(array('Number' => '(408) 253-8800'));
echo $result->listingName;

// Zend Technologies USA Inc
]]></programlisting>

        <para>
            Um StrikeIron Services durch WSDL zu verwenden wird zumindest ein Verständnis für WSDL
            Dateien benötigt. StrikeIron hat viele Ressourcen auf Ihren Seiten die hierbei helfen.
            Auch <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://janschneider.de">Jan Schneider</link> vom
            <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://horde.org">Horde Projekt</link> hat eine <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://janschneider.de/news/25/268">kleine <acronym>PHP</acronym>
                Routine</link> geschrieben die eine WSDL Datei in lesbares <acronym>HTML</acronym>
            konvertiert.
        </para>

        <para>
            Es ist zu beachten das nur die Services die in der
            <link linkend="zend.service.strikeiron.bundled-services">Mitgelieferten Services</link>
            Sektion beschrieben werden auch offiziell unterstützt werden.
        </para>
    </section>

    <section xml:id="zend.service.strikeiron.viewing-soap-transactions"><info><title>SOAP Transaktionen betrachten</title></info>
        

        <para>
            Die gesamte Kommunikation mit StrikeIron wird durch Verwenden der
            <acronym>SOAP</acronym> Erweiterung durchgeführt. Es kann zeitweise nützlich sein das
            mit StrikeIron getauschte <acronym>XML</acronym> für Debugging Zwecke zu betrachten.
        </para>

        <para>
            Jeder StrikeIron Client (Subklasse von
            <classname>Zend_Service_StrikeIron_Base</classname>) enthält eine
            <methodname>getSoapClient()</methodname> Methode um die darunterliegende Instanz von
            <classname>SOAPClient</classname> zu retournieren, die für die Kommunikation mit
            StrikeIron verwendet wird.
        </para>

        <para>
            <acronym>PHP</acronym>'s <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.php.net/manual/de/function.soap-soapclient-construct.php">SOAPClient</link>
            hat eine <property>trace</property> Option die dazu führt dass das
            <acronym>XML</acronym>, das wärend der letzten Transaktion getauscht wurde, gemerkt
            wird. <classname>Zend_Service_StrikeIron</classname> aktiviert die
            <property>trace</property> Option nicht standardmäßig aber das kann einfach getan werden
            durch Spezifizierung der Option die dazu verwendet wird den
            <classname>SOAPClient</classname> Konstruktor zu übergeben.
        </para>

        <para>
            Um die SOAP Transaktion zu betrachten muß die <methodname>getSoapClient()</methodname>
            Methode aufgerufen werden um die <classname>SOAPClient</classname> Instanz zu erhalten
            und anschließend die entsprechenden Methoden wie <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.php.net/manual/de/function.soap-soapclient-getlastrequest.php"><methodname>__getLastRequest()</methodname></link>
            und <link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.php.net/manual/de/function.soap-soapclient-getlastresponse.php"><methodname>__getLastRequest()</methodname></link>:
            aufzurufen:
        </para>

        <programlisting language="php"><![CDATA[
$strikeIron =
    new Zend_Service_StrikeIron(array('username' => 'your-username',
                                      'password' => 'your-password',
                                      'options'  => array('trace' => true)));

// Erstelle einen Client für das Verkaufs & Verwende Steuer BasisService
$taxBasic = $strikeIron->getService(array('class' => 'SalesUseTaxBasic'));

// Einen Methodenaufruf durchführen
$taxBasic->getTaxRateCanada(array('province' => 'ontario'));

// Die SOAPClient Instanz holen und das XML ansehen
$soapClient = $taxBasic->getSoapClient();
echo $soapClient->__getLastRequest();
echo $soapClient->__getLastResponse();
]]></programlisting>
    </section>
</section>
