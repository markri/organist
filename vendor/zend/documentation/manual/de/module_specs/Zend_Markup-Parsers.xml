<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.markup.parsers"><info><title>Zend_Markup Parser</title></info>
    

    <para>
        <classname>Zend_Markup</classname> wird aktuell mit zwei Parsern ausgeliefert, einen BBCode
        Parser und einen Textile Parser.
    </para>

    <section xml:id="zend.markup.parsers.theory"><info><title>Theorie des Parsens</title></info>
        

        <para>
            Die Parser von <classname>Zend_Markup</classname> sind Klasse die Text mit Markup in
            einen Token Baum konvertieren. Auch wenn wir hier den BBCode Parser als Beispiel
            verwenden ist die Idee des Token Baums die gleiche bei allen Parsern. Wir beginnen mit
            diesem Teil von BBCode als Beispiel:
        </para>

        <programlisting><![CDATA[
[b]foo[i]bar[/i][/b]baz
]]></programlisting>

        <para>
            Der BBCode Parser nimmt diesen Wert, teilt Ihn auf und erzeugt den folgenden Baum:
        </para>

        <itemizedlist>
            <listitem>
                <para>[b]</para>

                <itemizedlist>
                    <listitem>
                        <para>foo</para>
                    </listitem>

                    <listitem>
                        <para>[i]</para>

                        <itemizedlist>
                            <listitem>
                                <para>bar</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem>
                <para>baz</para>
            </listitem>
        </itemizedlist>

        <para>
            Wie man sieht sind die schließenden Tags weg. Sie werden nicht als Inhalt der
            Baumstruktur angezeigt. Das ist deswegen der Fall, da schließende Tags kein Teil des
            aktuellen Inhalts sind. Das bedeutet aber nicht das die schließenden Tags einfach
            verloren sind. Sie sind in der Tag Information für das Tag selbst gespeichert. Es ist
            auch zu beachten das dies nur eine vereinfachte Darstelliung des Baumes selbst ist. Der
            aktuelle Baum enthält viel mehr Information, wie die Attribute der Tags und deren Namen.
        </para>
    </section>

    <section xml:id="zend.markup.parsers.bbcode"><info><title>Der BBCode Parser</title></info>
        

        <para>
            Der BBCode Parser ist ein <classname>Zend_Markup</classname> Parser der BBCode in einen
            Token Baum konvertiert. Die Syntax alle BBCode Tags ist:
        </para>

        <programlisting language="text"><![CDATA[
[name(=(value|"value"))( attribute=(value|"value"))*]
]]></programlisting>

        <para>
            Einige Beispiel von gültigen BBCode Tags sind:
        </para>

        <programlisting><![CDATA[
[b]
[list=1]
[code file=Zend/Markup.php]
[url="http://framework.zend.com/" title="Zend Framework!"]
]]></programlisting>

        <para>
            Standardmäßig werden alle Tags durch Verwendung des Formats '[/tagname]' geschlossen.
        </para>
    </section>

    <section xml:id="zend.markup.parsers.textile"><info><title>Der Textile Parser</title></info>
        

        <para>
            Der Textile Parser ist ein <classname>Zend_Markup</classname> Parser der Textile in
            einen Token Baum konvertiert. Weil Textile keine Tag Struktur hat ist nachfolgend eine
            Liste von Beispiel Tags:
        </para>

        <table xml:id="zend.markup.parsers.textile.tags"><info><title>Liste der grundsätzlichen Textile Tags</title></info>
            

            <tgroup cols="2" align="left" colsep="1" rowsep="1">
                <thead>
                    <row>
                        <entry>Beispiel Eingabe</entry>
                        <entry>Beispiel Ausgabe</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry>*foo*</entry>
                        <entry>&lt;strong&gt;foo&lt;/strong&gt;</entry>
                    </row>

                    <row>
                        <entry>_foo_</entry>
                        <entry>&lt;em&gt;foo&lt;/em&gt;</entry>
                    </row>

                    <row>
                        <entry>??foo??</entry>
                        <entry>&lt;cite&gt;foo&lt;/cite&gt;</entry>
                    </row>

                    <row>
                        <entry>-foo-</entry>
                        <entry>&lt;del&gt;foo&lt;/del&gt;</entry>
                    </row>

                    <row>
                        <entry>+foo+</entry>
                        <entry>&lt;ins&gt;foo&lt;/ins&gt;</entry>
                    </row>

                    <row>
                        <entry>^foo^</entry>
                        <entry>&lt;sup&gt;foo&lt;/sup&gt;</entry>
                    </row>

                    <row>
                        <entry>~foo~</entry>
                        <entry>&lt;sub&gt;foo&lt;/sub&gt;</entry>
                    </row>

                    <row>
                        <entry>%foo%</entry>
                        <entry>&lt;span&gt;foo&lt;/span&gt;</entry>
                    </row>

                    <row>
                        <entry>PHP(PHP Hypertext Preprocessor)</entry>

                        <entry>
                            &lt;acronym title="PHP Hypertext Preprocessor"&gt;PHP&lt;/acronym&gt;
                        </entry>
                    </row>

                    <row>
                        <entry>"Zend Framework":http://framework.zend.com/</entry>

                        <entry>
                            &lt;a href="http://framework.zend.com/"&gt;Zend Framework&lt;/a&gt;
                        </entry>
                    </row>

                    <row>
                        <entry>h1. foobar</entry>
                        <entry>&lt;h1&gt;foobar&lt;/h1&gt;</entry>
                    </row>

                    <row>
                        <entry>h6. foobar</entry>
                        <entry>&lt;h6&gt;foobar&lt;/h6&gt;</entry>
                    </row>

                    <row>
                        <entry>!http://framework.zend.com/images/logo.gif!</entry>

                        <entry>
                            &lt;img src="http://framework.zend.com/images/logo.gif" /&gt;
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            Auch der Textile Parser wrappt alle Tags in Paragraphen; ein Paragraph endet mit zwei
            Leerzeilen, und wenn es mehr Tags gibt, wird ein neuer Paragraph hinzugefügt.
        </para>

        <section xml:id="zend.markup.parsers.textile.lists"><info><title>Listen</title></info>
            

            <para>
                Der Textile Parser unterstützt auch zwei Typen von Listen. Den nummerischen Typ
                der das "#" Zeichen verwendet und Bullet-Listen welche das "*" Zeichen verwenden.
                Anbei ein Beispiel für beide Listen:
            </para>

            <programlisting><![CDATA[
# Element 1
# Element 2

* Element 1
* Element 2
]]></programlisting>

            <para>
                Das obige erzeugt zwei Listen: Die erste nummeriert; und die zweite mit Punkten.
                In den Listen Elementen können normale Tags wie dick (*), und hochgestellt (_)
                verwendet werden. Tags die auf einer neuen Zeile beginnen müssen (wie 'h1' usw.)
                können nicht innerhalb von Listen verwendet werden.
            </para>
        </section>
    </section>
</section>
