<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.feed.custom-feed"><info><title>独自のフィードクラスおよびエントリクラス</title></info>
    

    <para>
        独自のフォーマットを提供したい、
        あるいは要素が自動的に所定の名前空間に配置されるなどの素敵な機能を追加したい、
        といった場合は <classname>Zend_Feed</classname> クラスを拡張して対応します。
    </para>

    <para>
        以下に Atom エントリクラスを拡張する例を示します。
        このクラスでは、独自の名前空間 <emphasis>myns:</emphasis> を使用しています。
        また、<methodname>registerNamespace()</methodname> がコールされていることに注意しましょう。
        このクラスの使用者は、名前空間について心配する必要がなくなります。
    </para>

    <example xml:id="zend.feed.custom-feed.example.extending"><info><title>独自の名前空間を使用しての Atom エントリクラスの拡張</title></info>
        

        <programlisting language="php"><![CDATA[
/**
 * この独自エントリクラスは、自動的にフィード URI を識別 (オプション) して
 * 名前空間を追加します
 */
class MyEntry extends Zend_Feed_Entry_Atom
{

    public function __construct($uri = 'http://www.example.com/myfeed/',
                                $xml = null)
    {
        parent::__construct($uri, $xml);

        Zend_Feed::registerNamespace('myns',
                                     'http://www.example.com/myns/1.0');
    }

    public function __get($var)
    {
        switch ($var) {
            case 'myUpdated':
                // myUpdated を myns:updated に変換します
                return parent::__get('myns:updated');

            default:
                return parent::__get($var);
            }
    }

    public function __set($var, $value)
    {
        switch ($var) {
            case 'myUpdated':
                // myUpdated を myns:updated に変換します
                parent::__set('myns:updated', $value);
                break;

            default:
                parent::__set($var, $value);
        }
    }

    public function __call($var, $unused)
    {
        switch ($var) {
            case 'myUpdated':
                // myUpdated を myns:updated に変換します
                return parent::__call('myns:updated', $unused);

            default:
                return parent::__call($var, $unused);
        }
    }
}
]]></programlisting>

        <para>
            そしてこのクラスを使用すると、インスタンスを作成したらすぐに
            <property>myUpdated</property> プロパティを設定できます。
        </para>

        <programlisting language="php"><![CDATA[
$entry = new MyEntry();
$entry->myUpdated = '2005-04-19T15:30';

// メソッド型のコールは __call 関数が処理します
$entry->myUpdated();
// プロパティ型のコールは __get 関数が処理します
$entry->myUpdated;
]]></programlisting>
    </example>

</section>
