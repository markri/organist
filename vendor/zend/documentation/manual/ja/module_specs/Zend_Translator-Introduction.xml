<?xml version="1.0" encoding="utf-8"?>


<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.translator.introduction"><info><title>導入</title></info>

    

    <para>
        <classname>Zend_Translator</classname> は、Zend Framework
        で多言語対応のアプリケーションを作成するためのパッケージです。
    </para>

    <para>
        多言語対応のアプリケーションでは、コンテンツをさまざまな言語に翻訳し、
        それをユーザの言語に応じて表示しなければなりません。
        <acronym>PHP</acronym> にはすでにそのような場合のための手法が用意されています。
        しかし、<acronym>PHP</acronym> の手法にはいくつかの問題があります。
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <emphasis>一貫性のない <acronym>API</acronym>:</emphasis>
                入力フォーマットによって <acronym>API</acronym> が異なります。
                たとえば gettext の使用法は非常に複雑です。
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis><acronym>PHP</acronym> は gettext
                およびネイティブの配列しかサポートしていない:</emphasis>
                <acronym>PHP</acronym> 自身は配列あるいは gettext しかサポートしていません。
                その他の入力フォーマットは、手動で変換する必要があります。
                ネイティブなサポートがないからです。
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis>デフォルト言語の検出方法がない:</emphasis>
                ユーザのデフォルト言語を検出するには、
                個々のブラウザについての深い知識を要します。
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis>Gettext はスレッドセーフでない:</emphasis>
                <acronym>PHP</acronym> の gettext ライブラリはスレッドセーフではないので、
                マルチスレッド環境で使用してはいけません。
                これは gettext 自体の問題であって <acronym>PHP</acronym> のせいではありませんが、
                問題であることには変わりありません。
            </para>
        </listitem>
    </itemizedlist>

    <para>
        <classname>Zend_Translator</classname> にはここであげたような問題はありません。
        というわけで、<acronym>PHP</acronym> のネイティブ関数ではなく
        <classname>Zend_Translator</classname> を使用することを推奨します。
        <classname>Zend_Translator</classname> の利点は、以下のとおりです。
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <emphasis>複数の入力フォーマットのサポート:</emphasis>
                <classname>Zend_Translator</classname> はいくつかの入力フォーマットに対応しています。
                <acronym>PHP</acronym> でサポートしているもののほかに、TMX や CSV
                形式のファイルにも対応しています。
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis>スレッドセーフな gettext:</emphasis>
                <classname>Zend_Translator</classname> の gettext リーダーはスレッドセーフです。
                マルチスレッド環境でも問題なく使用できます。
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis>簡単で汎用的な <acronym>API</acronym>:</emphasis>
                <classname>Zend_Translator</classname> の <acronym>API</acronym> は非常にシンプルで、使用する関数はほんの少しだけです。
                そのため、容易に覚えることができ、保守も簡単です。
                すべての入力フォーマットを同じように処理できます。
                つまり、仮に入力ファイルが gettext から TMX に変わったとしても、
                ストレージアダプタを指定している部分を一行変更するだけで対応できます。
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis>ユーザの標準言語の検出:</emphasis>
                ユーザがサイトにアクセスする際の preferred language
                設定を検出し、<classname>Zend_Translator</classname> で使用できます。
            </para>
        </listitem>

        <listitem>
            <para>
                <emphasis>自動的なソースの検出:</emphasis>
                <classname>Zend_Translator</classname> は、複数のソースファイルを検出して統合できます。
                さらに、ディレクトリやファイル名に応じて使用するロケールを自動検出することもできます。
            </para>
        </listitem>
    </itemizedlist>

    <section xml:id="zend.translator.introduction.adapters"><info><title>多言語対応をはじめよう</title></info>

        

        <para>
            それでは、多言語対応の作業を始めてみましょう。
            まずやってみたいことといえば、出力文字列を翻訳し、
            翻訳結果をビューで表示することですね。
            そうしないと、個々の言語ごとに別のビューを作らなければならなくなります。
            誰もそんなことはしたくないでしょう。
            一般に、多言語対応のサイトの設計は非常にシンプルです。
            必要なのは、以下のたった 4 つの手順だけです。
        </para>

        <orderedlist numeration="arabic">
            <listitem>
                <para>
                    使用するアダプタを決める
                </para>
            </listitem>

            <listitem>
                <para>
                    ビューを作成し、<classname>Zend_Translator</classname> をコードに組み込む
                </para>
            </listitem>

            <listitem>
                <para>
                    コードから入力ファイルを作成する
                </para>
            </listitem>

            <listitem>
                <para>
                    入力ファイルを指定した言語に翻訳する
                </para>
            </listitem>
        </orderedlist>

        <para>
            これ以降の節で、この手順について説明します。
            次の何ページかを読めば、
            あなたも多言語対応のウェブアプリケーションを作れるようになるでしょう。
        </para>

    </section>

</section>
