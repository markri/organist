<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.markup.renderers"><info><title>Moteurs de rendu Zend_Markup</title></info>
    

    <para>
        <classname>Zend_Markup</classname> est fournie avec un moteur de rendu, le
        <acronym>HTML</acronym>.
    </para>

    <section xml:id="zend.markup.renderers.add"><info><title>Ajouter vos propres markups</title></info>
        

        <para>
            En ajoutant vos markups, vous pouvez ajouter vos propres fonctionnalités aux moteurs
            de rendu de <classname>Zend_Markup</classname>. Grâce à la structure en markups, vous
            pouvez ajouter presque toutes les fonctionnalités que vous voulez, depuis des markups
            simples jusqu'à des structures de données complexes. Voici un exemple pour un markup
            simple 'foo' :
        </para>

        <programlisting language="php"><![CDATA[
// Créer une instance de Zend_Markup_Renderer_Html,
// avec Zend_Markup_Parser_BbCode comme analyseur
$bbcode = Zend_Markup::factory('Bbcode');

// Ceci va créer un markup simple 'foo'
// Le premier paramètre définit le nom du markup
// Le second param prend un entier qui définit le type de markup.
// Le troisième param est un tableau qui définit d'autres caractéristiques
// du markup comme son groupe et (dans ce cas) les markups de début et de fin
$bbcode->addMarkup(
    'foo',
    Zend_Markup_Renderer_RendererAbstract::TYPE_REPLACE,
    array(
        'start' => '-bar-',
        'end'   => '-baz-',
        'group' => 'inline'
    )
);

// La sortie sera: 'my -bar-markup-baz-'
echo $bbcode->render('my [foo]markup[/foo]');
]]></programlisting>

        <para>
            Notez que créer vos propres markups n'est utile que si l'analyseur syntaxique en tient
            compte. Actuellement, seul BBCode supporte cela. Textile ne supporte pas les markups
            personnalisés.
        </para>

        <para>
            Certains moteurs de rendu (comme le moteur <acronym>HTML</acronym>) supporte un
            paramètre nommé "markup". Cela remplace les paramètres "start" et "end", et il effectue
            le rendu du markup avec des attributs par défaut ainsi que le markup de fin.
        </para>

        <section xml:id="zend.markup.renderers.add.callback"><info><title>Ajout d'un markup de rappel(callback)</title></info>
            

            <para>
                Ajouter des markups de rappel permet de faire bien plus que de simples
                remplacements. Par exemple, vous pouvez changer le contenu, utiliser
                des paramètres pour changer la sortie, etc.
            </para>

            <para>
                Un rappel est une classe qui implémente
                <classname>Zend_Markup_Renderer_TokenInterface</classname>
                Voici un exemple de classe de markup de rappel :
            </para>

            <programlisting language="php"><![CDATA[
class My_Markup_Renderer_Html_Upper
    implements Zend_Markup_Renderer_TokenConverterInterface
{

    public function convert(Zend_Markup_Token $token, $text)
    {
        return '!up!' . strtoupper($text) . '!up!';
    }

}
]]></programlisting>

            <para>
                Il est possible maintenant d'ajouter le markup "upper", avec comme fonction de
                rappel, une instance de <classname>My_Markup_Renderer_Html_Upper</classname>.
                Voici un exemple :
            </para>

            <programlisting language="php"><![CDATA[
// Créer une instance de Zend_Markup_Renderer_Html,
// avec Zend_Markup_Parser_BbCode comme analyseur
$bbcode = Zend_Markup::factory('Bbcode');

// Ceci va créer un markup simple 'foo'
// Le premier paramètre définit le nom du markup
// Le second param prend un entier qui définit le type de markup.
// Le troisième param est un tableau qui définit d'autres caractéristiques
// du markup comme son groupe et (dans ce cas) les markups de début et de fin
$bbcode->addMarkup(
    'upper',
    Zend_Markup_Renderer_RendererAbstract::TYPE_CALLBACK,
    array(
        'callback' => new My_Markup_Renderer_Html_Upper(),
        'group'    => 'inline'
    )
);

// La sortie sera: 'my !up!MARKUP!up!'
echo $bbcode->render('my [upper]markup[/upper]');
]]></programlisting>
        </section>
    </section>

    <section xml:id="zend.markup.renderers.list"><info><title>Liste de markups</title></info>
        

        <table xml:id="zend.markup.renderers.list.tags"><info><title>Liste de markups</title></info>
            

            <tgroup cols="2" align="left" colsep="1" rowsep="1">
                <thead>
                    <row>
                        <entry>Entrée (bbcode)</entry>
                        <entry>Sortie</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry>[b]foo[/b]</entry>
                        <entry>&lt;strong&gt;foo&lt;/strong&gt;</entry>
                    </row>

                    <row>
                        <entry>[i]foo[/i]</entry>
                        <entry>&lt;em&gt;foo&lt;/em&gt;</entry>
                    </row>

                    <row>
                        <entry>[cite]foo[/cite]</entry>
                        <entry>&lt;cite&gt;foo&lt;/cite&gt;</entry>
                    </row>

                    <row>
                        <entry>[del]foo[/del]</entry>
                        <entry>&lt;del&gt;foo&lt;/del&gt;</entry>
                    </row>

                    <row>
                        <entry>[ins]foo[/ins]</entry>
                        <entry>&lt;ins&gt;foo&lt;/ins&gt;</entry>
                    </row>

                    <row>
                        <entry>[sup]foo[/sup]</entry>
                        <entry>&lt;sup&gt;foo&lt;/sup&gt;</entry>
                    </row>

                    <row>
                        <entry>[sub]foo[/sub]</entry>
                        <entry>&lt;sub&gt;foo&lt;/sub&gt;</entry>
                    </row>

                    <row>
                        <entry>[span]foo[/span]</entry>
                        <entry>&lt;span&gt;foo&lt;/span&gt;</entry>
                    </row>

                    <row>
                        <entry>[acronym title="PHP Hypertext Preprocessor]PHP[/acronym]</entry>
                        <entry>
                            &lt;acronym title="PHP Hypertext Preprocessor"&gt;PHP&lt;/acronym&gt;
                        </entry>
                    </row>

                    <row>
                        <entry>[url=http://framework.zend.com/]Zend Framework[/url]</entry>
                        <entry>
                            &lt;a href="http://framework.zend.com/"&gt;Zend Framework&lt;/a&gt;
                        </entry>
                    </row>

                    <row>
                        <entry>[h1]foobar[/h1]</entry>
                        <entry>&lt;h1&gt;foobar&lt;/h1&gt;</entry>
                    </row>

                    <row>
                        <entry>[img]http://framework.zend.com/images/logo.gif[/img]</entry>
                        <entry>
                            &lt;img src="http://framework.zend.com/images/logo.gif" /&gt;
                        </entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </section>
</section>
