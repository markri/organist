<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.filter.writing_filters"><info><title>Écriture de filtres</title></info>
    

    <para>
        <classname>Zend_Filter</classname> fournit un ensemble de filtres usuels. Cependant,
        les développeurs auront souvent besoin d'écrire des filtres personnalisés pour leurs besoins
        propres. L'écriture de filtre personnalisés est rendue plus facile via l'implémentation de
        <classname>Zend_Filter_Interface</classname>.
    </para>

    <para>
        <classname>Zend_Filter_Interface</classname> définit une méthode unique,
        <methodname>filter()</methodname>, qui peut être implémentée dans les classes créées. Un objet qui
        implémente cette interface peut être ajouté à une chaîne de filtrage via
        <methodname>Zend_Filter::addFilter()</methodname>.
    </para>

    <para>
        L'exemple suivant démontre comment écrire un filtre personnalisé :
        <programlisting language="php"><![CDATA[
class MonFiltre implements Zend_Filter_Interface
{
    public function filter($valeur)
    {
        // application de transformations sur $valeur
        // pour parvenir à $valeurFiltree

        return $valeurFiltree;
    }
}
]]></programlisting>
    </para>

    <para>
        Pour ajouter une instance du filtre défini ci-dessus à une chaîne de filtrage :
        <programlisting language="php"><![CDATA[
$filtreChaine = new Zend_Filter();
$filtreChaine->addFilter(new MonFiltre());
]]></programlisting>
    </para>
</section>
