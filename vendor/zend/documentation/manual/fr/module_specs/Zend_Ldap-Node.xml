<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.ldap.node"><info><title>Accès à l'arbre LDAP de manière orientée objet avec Zend_Ldap_Node</title></info>
    

    <section xml:id="zend.ldap.node.basic"><info><title>Opérations CRUD basiques</title></info>
        

        <section xml:id="zend.ldap.node.basic.retrieve"><info><title>Récupérer des données depuis LDAP</title></info>
            

            <section xml:id="zend.ldap.node.basic.retrieve.dn"><info><title>Récupérer un noeud par son DN</title></info>
                
                <para/>
            </section>

            <section xml:id="zend.ldap.node.basic.retrieve.search"><info><title>Chercher les sous-arbres d'un noeud</title></info>
                
                <para/>
            </section>
        </section>

        <section xml:id="zend.ldap.node.basic.add"><info><title>Ajouter un nouveau noeud à LDAP</title></info>
            
            <para/>
        </section>

        <section xml:id="zend.ldap.node.basic.delete"><info><title>Supprimer un noeud de LDAP</title></info>
            
            <para/>
        </section>

        <section xml:id="zend.ldap.node.basic.update"><info><title>Mettre à jour un noeud de LDAP</title></info>
            
            <para/>
        </section>
    </section>

    <section xml:id="zend.ldap.node.extended"><info><title>Opérations avancées</title></info>
        

        <section xml:id="zend.ldap.node.extended.copy-and-move"><info><title>Copier et déplacer des noeuds dans LDAP</title></info>
            
            <para/>
        </section>
    </section>

    <section xml:id="zend.ldap.node.traversal"><info><title>Parcours d'un arbre</title></info>
        

        <example><info><title>Parcours récursif d'un arbre LDAP</title></info>
            
<programlisting language="php"><![CDATA[
$options = array(/* ... */);
$ldap = new Zend_Ldap($options);
$ldap->bind();
$ri = new RecursiveIteratorIterator($ldap->getBaseNode(),
                                    RecursiveIteratorIterator::SELF_FIRST);
foreach ($ri as $rdn => $n) {
    var_dump($n);
}
]]></programlisting>
            </example>
    </section>
</section>
