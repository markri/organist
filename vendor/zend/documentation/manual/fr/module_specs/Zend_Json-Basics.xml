<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.json.basics"><info><title>Utilisation de base</title></info>
    

    <para>
        L'utilisation de <classname>Zend_Json</classname> implique l'emploi des deux m√©thodes
        statiques publiques disponibles : <methodname>Zend_Json::encode()</methodname> et
        <methodname>Zend_Json::decode()</methodname>. <programlisting language="php"><![CDATA[
// Obtention d'une valeur
$phpNatif = Zend_Json::decode($valeurCodee);

// Codage pour renvoi au client :
$json = Zend_Json::encode($phpNatif);
]]></programlisting></para>

    <section xml:id="zend.json.basics.prettyprint"><info><title>Pretty-printing JSON</title></info>
        

        <para>
            Sometimes, it may be hard to explore <acronym>JSON</acronym>  data generated by
            <methodname>Zend_Json::encode()</methodname>,
            since it has no spacing or indentation. In order to make it easier, <classname>Zend_Json</classname>
            allows you to pretty-print <acronym>JSON</acronym> data in the human-readable format
            with <methodname>Zend_Json::prettyPrint()</methodname>.
        </para>

        <programlisting language="php"><![CDATA[
// Encode it to return to the client:
$json = Zend_Json::encode($phpNative);
if($debug) {
echo Zend_Json::prettyPrint($json, array("indent" => " "));
}
]]></programlisting>

        <para>
            Second optional argument of <methodname>Zend_Json::prettyPrint()</methodname> is an option array.
            Option <code>indent</code> allows to set indentation string - by default it's a single tab character.
        </para>
    </section>
</section>
