<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.validate.set.notempty"><info><title>NotEmpty</title></info>
    

    <para>
        Ce validateur permet de déterminer si une valeur est non vide. C'est utile lorsque vous travaillez
        avec des formulaires ou des entrées utilisateur, là où vous pouvez l'utiliser pour savoir si des
        éléments requis ont été saisis.
    </para>

    <section xml:id="zend.validate.set.notempty.options"><info><title>Options supportées par Zend_Validate_NotEmpty</title></info>
        

        <para>
            Les options suivantes sont supportées par
            <classname>Zend_Validate_NotEmpty</classname> :
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis><property>type</property></emphasis> : paramètre le type de
                    validation qui sera réalisée. Pour plus de détails, reportez vous à
                    <link linkend="zend.validate.set.notempty.types">cette section</link>.
                </para>
            </listitem>
        </itemizedlist>
    </section>

    <section xml:id="zend.validate.set.notempty.default"><info><title>Comportement par défaut de Zend_Validate_NotEmpty</title></info>
        

        <para>
            Par défaut, ce validateur fonctionne différement de la fonction
            <acronym>PHP</acronym> <methodname>empty()</methodname>. En particulier, ce validateur va
            évaluer l'entier <emphasis>0</emphasis> et la chaine '<emphasis>0</emphasis>' comme vides.
        </para>

        <programlisting language="php"><![CDATA[
$valid = new Zend_Validate_NotEmpty();
$value  = '';
$result = $valid->isValid($value);
// retourne false
]]></programlisting>

        <note><info><title>Le comportement par défaut diffère de PHP</title></info>
            

            <para>
                Sans configuration ajoutée, <classname>Zend_Validate_NotEmpty</classname> diffère
                de <acronym>PHP</acronym>.
            </para>
        </note>
    </section>

    <section xml:id="zend.validate.set.notempty.types"><info><title>Changer le comportement de Zend_Validate_NotEmpty</title></info>
        

        <para>
            Certains projets ont des opinions différentes sur ce qui peut être considéré comme 'vide'.
            Une chaine seulement composée d'espaces blancs pourrait être considérée comme vide, ou
            <emphasis>0</emphasis> pourrait être considéré comme non-vide (surtout dans les séquences
            logiques booléennes). Pour correspondre aux différents besoins,
            <classname>Zend_Validate_NotEmpty</classname> vous permet de configurer les types que vous
            considérez comme vides.
        </para>

        <para>
            Les types suivants sont gérés :
        </para>

        <itemizedlist>
            <listitem>
                <para>
                    <emphasis>booléen</emphasis> : Retourne <constant>FALSE</constant> lorsque
                    la valeur booléenne est <constant>FALSE</constant>.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>entier</emphasis> : Retourne <constant>FALSE</constant> lorsque l'entier
                    <emphasis>0</emphasis> est passé. Par défaut cette validation n'est pas activée et
                    retourne <constant>TRUE</constant> pour toute valeur d'entier.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>flottant</emphasis> : Retourne <constant>FALSE</constant> lorsque le flottant
                    <emphasis>0.0</emphasis> est passé. Par défaut cette validation n'est pas activée et
                    retourne <constant>TRUE</constant> pour toute valeur de flottant.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>chaine</emphasis> : Retourne <constant>FALSE</constant> lorsque la chaine vide
                    <emphasis>''</emphasis> est passée.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>zero</emphasis> : Retourne <constant>FALSE</constant> lorsque le seul caractère
                    zéro (<emphasis>'0'</emphasis>) est passé.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>tableau_vide</emphasis> : Retourne <constant>FALSE</constant> lorsqu'un tableau vide
                    <emphasis>array()</emphasis> est passé.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>null</emphasis> : Retourne <constant>FALSE</constant> lorsqu'une valeur
                    <constant>NULL</constant> est passée.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>php</emphasis> : Retourne <constant>FALSE</constant> lorsque la fonction
                    <acronym>PHP</acronym> <methodname>empty()</methodname> retournerait
                    <constant>TRUE</constant>.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>espace</emphasis> : Retourne <constant>FALSE</constant> lorsqu'une chaine
                    ne contenant que des caractères espace est passée.
                </para>
            </listitem>

            <listitem>
                <para>
                    <emphasis>tout</emphasis> : Retourne <constant>FALSE</constant> pour tous les
                    types gérés cités ci-dessus.
                </para>
            </listitem>
        </itemizedlist>

        <para>
            Toute autre valeur passée retourne <constant>TRUE</constant> par défaut.
        </para>

        <para>
            Il existe différentes manières de selectionner les types ci-dessus. Vous pouvez en spécifier
            un ou plusieurs, sous forme de tableau ou de constantes ou encore de chaines.
            Voyez les exemples ci-après :
        </para>

        <programlisting language="php"><![CDATA[
// Retourne false pour 0
$validator = new Zend_Validate_NotEmpty(Zend_Validate_NotEmpty::INTEGER);

// Retourne false pour 0 ou '0'
$validator = new Zend_Validate_NotEmpty(
    Zend_Validate_NotEmpty::INTEGER + Zend_NotEmpty::ZERO
);

// Retourne false pour 0 ou '0'
$validator = new Zend_Validate_NotEmpty(array(
    Zend_Validate_NotEmpty::INTEGER,
    Zend_Validate_NotEmpty::ZERO
));

// Retourne false pour 0 ou '0'
$validator = new Zend_Validate_NotEmpty(array(
    'integer',
    'zero',
));
]]></programlisting>

        <para>
            Il est aussi possible de passer un objet <classname>Zend_Config</classname> afin de
            préciser les types à utiliser. Après instantiation, <methodname>setType()</methodname>
            peut être utilisée.
        </para>
    </section>
</section>
