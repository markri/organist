<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.markup.parsers"><info><title>Analyseurs Zend_Markup (parsers)</title></info>
    

    <para>
        <classname>Zend_Markup</classname> est fourni avec deux analyseurs, BBCode et
        Textile.
    </para>

    <section xml:id="zend.markup.parsers.theory"><info><title>Theorie de l'analyse</title></info>
        

        <para>
            Les analyseurs syntaxiques de <classname>Zend_Markup</classname> sont des classes
            qui convertissent du texte balisé en un arbre d'identifiants d'analyses, appelées 'tokens'.
            Même si nous utilisons par la suite l'analyseur BBCode, le principe de l'arbre à
            tokens est le même pour tous les analyseurs syntaxiques. Essayons avec un morceau
            de BBCode par exemple:
        </para>

        <programlisting><![CDATA[
[b]foo[i]bar[/i][/b]baz
]]></programlisting>

        <para>
            L'analyseur BBCode va analyser syntaxiquement ce code et en déduire l'arbre suivant:
        </para>

        <itemizedlist>
            <listitem>
                <para>[b]</para>

                <itemizedlist>
                    <listitem>
                        <para>foo</para>
                    </listitem>

                    <listitem>
                        <para>[i]</para>

                        <itemizedlist>
                            <listitem>
                                <para>bar</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </itemizedlist>
            </listitem>

            <listitem>
                <para>baz</para>
            </listitem>
        </itemizedlist>

        <para>
            Notez que les tags de fermeture n'existent plus dans l'arbre généré. Ceci car ils
            n'ont pas de valeur particulière pour la sémantique, ils ne sont pas perdus mais stockés
            grâce au seul tag d'ouverture. Notez aussi que ceci n'est qu'une vue simplifiée de l'arbre
            réel qui contient en réalité bien plus d'informations comme les attributs éventuels du tag
            et son nom.
        </para>
    </section>

    <section xml:id="zend.markup.parsers.bbcode"><info><title>L'analyseur BBCode</title></info>
        

        <para>
            L'analyseur BBCode est un analyseur de <classname>Zend_Markup</classname> qui
            transforme un code BBCode en arbres à tokens. La syntaxe des tags BBCode est:
        </para>

        <programlisting language="text"><![CDATA[
[name(=(value|"value"))( attribute=(value|"value"))*]
]]></programlisting>

        <para>
            Des exemples de tags BBCode valides:
        </para>

        <programlisting><![CDATA[
[b]
[list=1]
[code file=Zend/Markup.php]
[url="http://framework.zend.com/" title="Zend Framework!"]
]]></programlisting>

        <para>
            Par défaut, tous les tags sont fermés avec la syntaxe '[/tagname]'.
        </para>
    </section>

    <section xml:id="zend.markup.parsers.textile"><info><title>L'analyseur Textile</title></info>
        

        <para>
            L'analyseur Textile de <classname>Zend_Markup</classname> convertit du texte au format Textile
            en un arbre à tokens. Textile n'ayant pas de structure à base de tags, la liste suivante est un
            exemple de tags:
        </para>

        <table xml:id="zend.markup.parsers.textile.tags"><info><title>Liste de tags Textile basiques</title></info>
            

            <tgroup cols="2" align="left" colsep="1" rowsep="1">
                <thead>
                    <row>
                        <entry>Entrée</entry>

                        <entry>Sortie</entry>
                    </row>
                </thead>

                <tbody>
                    <row>
                        <entry>*foo*</entry>

                        <entry>&lt;strong&gt;foo&lt;/strong&gt;</entry>
                    </row>

                    <row>
                        <entry>_foo_</entry>

                        <entry>&lt;em&gt;foo&lt;/em&gt;</entry>
                    </row>

                    <row>
                        <entry>??foo??</entry>

                        <entry>&lt;cite&gt;foo&lt;/cite&gt;</entry>
                    </row>

                    <row>
                        <entry>-foo-</entry>

                        <entry>&lt;del&gt;foo&lt;/del&gt;</entry>
                    </row>

                    <row>
                        <entry>+foo+</entry>

                        <entry>&lt;ins&gt;foo&lt;/ins&gt;</entry>
                    </row>

                    <row>
                        <entry>^foo^</entry>

                        <entry>&lt;sup&gt;foo&lt;/sup&gt;</entry>
                    </row>

                    <row>
                        <entry>~foo~</entry>

                        <entry>&lt;sub&gt;foo&lt;/sub&gt;</entry>
                    </row>

                    <row>
                        <entry>%foo%</entry>

                        <entry>&lt;span&gt;foo&lt;/span&gt;</entry>
                    </row>

                    <row>
                        <entry>PHP(PHP Hypertext Preprocessor)</entry>

                        <entry>&lt;acronym title="PHP Hypertext Preprocessor"&gt;PHP&lt;/acronym&gt;</entry>
                    </row>

                    <row>
                        <entry>"Zend Framework":http://framework.zend.com/</entry>

                        <entry>&lt;a href="http://framework.zend.com/"&gt;Zend Framework&lt;/a&gt;</entry>
                    </row>

                    <row>
                        <entry>h1. foobar</entry>

                        <entry>&lt;h1&gt;foobar&lt;/h1&gt;</entry>
                    </row>

                    <row>
                        <entry>h6. foobar</entry>

                        <entry>&lt;h6&gt;foobar&lt;/h6&gt;</entry>
                    </row>

                    <row>
                        <entry>!http://framework.zend.com/images/logo.gif!</entry>

                        <entry>&lt;img src="http://framework.zend.com/images/logo.gif" /&gt;</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>

        <para>
            L'analyseur Textile encapsule tous les tags dans des paragraphes; un paragraphe se termine par
            deux nouvelles lignes, et s'il y a des tags supplémentaires, un nouveau paragraphe sera ajouté.
        </para>

        <section xml:id="zend.markup.parsers.textile.lists"><info><title>Listes</title></info>
            

            <para>
                L'analyseur Textile supporte aussi deux types de listes. Le type numérique, utilisant
                le caractère "#" et le type anonyme qui utilise lui l'étoile "*".
                Exemple des deux listes:
            </para>

            <programlisting><![CDATA[
# Item 1
# Item 2

* Item 1
* Item 2
]]></programlisting>

            <para>
                Le code ci-dessus génèrera deux listes, la première, numérique; et la seconde, anonyme.
                Dans les éléments des listes, vous pouvez utiliser des tags classiques comme le gras
                (*), et l'emphase(italique) (_). Les tags ayant besoin de créer une nouvelle ligne
                (comme 'h1' etc.) ne peuvent être utilisés au sein des listes.
            </para>
        </section>
    </section>
</section>
