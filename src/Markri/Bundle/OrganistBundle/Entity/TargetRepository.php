<?php
/**
 * This file is part of Organist
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @author: markri <mdekrijger@netvlies.nl>
 */

namespace Markri\Bundle\OrganistBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

use PDO;

/**
 * TargetRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TargetRepository extends EntityRepository
{

    /**
     *
     * @param $app
     * @return array
     */
    public function getOrderedByDTAP($app)
    {
        $entityManager = $this->getEntityManager();
        $query = $entityManager->createQuery('
            SELECT t FROM Markri\Bundle\OrganistBundle\Entity\Target t
            WHERE t.application = :app
            AND t.inactive <> 1
        ');

        $query->setParameter('app', $app);
        $result = $query->getResult();

        usort($result, function($targetA, $targetB){

            $order = array('D'=>0, 'T'=>1, 'A'=>2, 'P'=>3);

            if(!array_key_exists($targetA->getEnvironment()->getType(), $order)
            || !array_key_exists($targetB->getEnvironment()->getType(), $order)){
                return -1;
            }

            $orderA = $order[$targetA->getEnvironment()->getType()];
            $orderB = $order[$targetB->getEnvironment()->getType()];

            if($orderA > $orderB){
                return 1;
            }

            if($orderA < $orderB){
                return -1;
            }

            return 0;

        });


        return $result;
    }
}