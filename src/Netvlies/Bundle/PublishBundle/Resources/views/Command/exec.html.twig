{% extends 'NetvliesPublishBundle::layout.html.twig' %}

{% block head %}
    {{ parent() }}
    <script src="/socket.io/socket.io.js"></script>
    <script src="/term.js"></script>
{% endblock %}

{% block content %}
    <h3>Executing command
        {% if command.target is not empty %}
            on ({{ command.target.environment.type }}) {{ command.target.environment.hostname }}
        {% endif %}
    </h3>
    <hr>
    <div>
        <h4>Deployment command</h4>
        <pre>{{ command.command | replace({' && ': '<br>', ' &&': '<br>', '&& ': '<br>', '&&': '<br>'}) | raw }}</pre>
    </div>
{% endblock %}


{% block postpanel %}
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="term"></div>
            <script>
                (function() {
                    window.onload = function() {

                        $.ajax({
                            // Create remote terminal through express app (this prepares a socket listener)
                            url: '/cmd_{{ command.id }}',
                            success: function (result) {
                                // Ignore returned HTML client in result, we use our own here to have more control
                                // This way URL can be used standalone when accessing http://host/cmd_x

                                // And connect to it using socket.io
                                var socket = io.connect('/cmd_{{ command.id }}');

                                socket.on('connect', function() {

                                    var term = new Terminal({
                                        cols: 140,
                                        rows: 30,
                                        useStyle: true,
                                        screenKeys: true,
                                        cursorBlink: false
                                    });

                                    term.on('data', function(data) {
                                        socket.emit('data', data);
                                    });

                                    term.on('title', function(title) {
                                        document.title = title;
                                    });

                                    term.open(document.getElementById('term'));

                                    socket.on('data', function(data) {
                                        term.write(data);
                                    });

                                    socket.on('disconnect', function() {
                                        term.destroy();
                                    });
                                });
                            }
                        });
                    };
                }).call(this);
            </script>
        </div>
    </div>
{% endblock %}