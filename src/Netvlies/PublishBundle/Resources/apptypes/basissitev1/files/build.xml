<?xml version="1.0" encoding="utf-8"?>
<project name="${project}" default="info">

	<target name="info">
		<echo msg="todo"/>
	</target>

	<target name="setup_O" description="- Setup DEVELOPMENT server to latest code revision">
		
		<ssh 
			username="${username}" 
			host="${hostname}"
            port="${sshport}"
			pubkeyfile="${pubkeyfile}" 
			privkeyfile="${privkeyfile}" 
			command="ls /${approot} | grep 'No such file or directory'" 
			property="exists" />
		
		<!-- check if project is already there -->
		<if>
			<equals arg1="${exists}" arg2="" />
			<then>
				<input propertyname="rmrf" validArgs="y,n" defaultValue="n">Uh-oh project seems to be already there, remove it and do a fresh checkout ?: </input>
				
				<if>
					<equals arg1="${rmrf}" arg2="y" />
					<then>
						<echo msg="Removing previous setup..."/>
						<ssh 
							username="${username}" 
							host="${hostname}"
                            port="${sshport}"
							pubkeyfile="${pubkeyfile}" 
							privkeyfile="${privkeyfile}" 
							command="rm -rf /${approot}"/>
					</then>
					<else>
						<fail message="Project already exists in your workingcopy. Please work from there (git pull) or remove it." />	
					</else>
				</if>				
			</then>
		</if> 
		
		<!-- Initial deployment -->
		<echo msg="executing: ssh -A -p ${sshport} ${username}@${hostname} 'git clone ${gitrepo} ${approot}; cd /${approot}; git checkout -b workingcopy ${revision}'"/>
		<exec command="ssh -A -p ${sshport} ${username}@${hostname} 'git clone ${gitrepo} ${approot}; cd /${approot}; git checkout -b workingcopy ${revision}'" />

		<!-- create database and user -->
		<echo msg="ssh -A -p ${sshport} ${sudouser}@${hostname} 'sudo ${bridgebin} mysql -u ${project} -p ${mysqlpw} -d ${project}'"/>
		<exec command="ssh -A -p ${sshport} ${sudouser}@${hostname} 'sudo ${bridgebin} mysql -u ${project} -p ${mysqlpw} -d ${project}'" outputProperty="output"/>
		<echo msg="${output}"/>
		
		<!-- Generate config files -->
		<ssh 
			username="${username}" 
			host="${hostname}"
            port="${sshport}"
			pubkeyfile="${pubkeyfile}" 
			privkeyfile="${privkeyfile}" 
			command="
				cp -f -p ${approot}/siteConfig.dist.inc.php ${approot}/siteConfig.local.inc.php;
				sed -i -e 's#\$absolute_sitepath =.*$#\$absolute_sitepath = '\''http://${project}.${hostname}/'\'';'# ${approot}/siteConfig.local.inc.php ;
				cp -f -p ${approot}/cms/cmsConfig.dist.inc.php ${approot}/cms/cmsConfig.local.inc.php ;
				sed -i -e 's/\$site_mysql_database =.*$/\$site_mysql_database = '\''${project}'\'';'/ ${approot}/cms/cmsConfig.local.inc.php ;			
				sed -i -e 's/\$site_mysql_user =.*$/\$site_mysql_user = '\''${project}'\'';'/ ${approot}/cms/cmsConfig.local.inc.php ;
				sed -i -e 's/\$site_mysql_password =.*$/\$site_mysql_password = '\''${mysqlpw}'\'';'/ ${approot}/cms/cmsConfig.local.inc.php ;
				" />
		
		<!-- create vhost and reload -->
		<!--@todo support multiple variable domain names -->
		<ssh 
			username="${sudouser}" 
			host="${hostname}"
            port="${sshport}"
			pubkeyfile="${pubkeyfile}" 
			privkeyfile="${privkeyfile}" 
			command="sudo ${bridgebin} apache -dn ${project}.${hostname} -s /${approot} -d /${webroot}" />
	</target>
	
	
	<target name="copycontent">
		
		<!-- @todo other directory than git repo -->
		<!-- @todo other environment should be passed as well -->
		<property name="filelist" value="./filelist.txt"/>
		<property name="rsyncdir" value="./mnt_rsync"/>

		<echo msg="Make sure that my public key is in your authorized_keys file. So I can connect to your given destination host and username"/>
		<input propertyname="dest_host" defaultValue="dev1.netvlies.net">Please supply host to copy content to: </input>
		<input propertyname="dest_user" defaultValue="support">Please supply user to connect to destination host: </input>
		<input propertyname="dest_path" defaultValue="/home/${dest_user}/vhosts/${project}">Please supply destinationpath where to deploy in: </input>

        <!-- @todo put ssh port in here -->
		<property name="command" value="
			mkdir -p ${rsyncdir};
			rm -f ${filelist};
			sshfs -o ro -o follow_symlinks ${username}@${hostname}:${webroot} ${rsyncdir};
			echo ${userdirs} | tr ',' '\n' >> ${filelist};
			echo ${userfiles} | tr ',' '\n' >> ${filelist};
			rsync -avz --copy-links --files-from=${filelist} -e ssh ${rsyncdir} ${dest_user}@${dest_host}:${dest_path};
			fusermount -u ${rsyncdir};
			rmdir ${rsyncdir};
		"/>
		
		<echo msg="Executing: ${command}"/>
		
		<exec command="${command}" outputProperty="output"/>		
		<echo msg="${output}"/>
		
	</target>


	<target name="copymysql">
		<echo msg="Make sure that my public key is in your authorized_keys file. So I can connect to your given destination host and username"/>
		
		<!-- these variables should be passed on by using a wizard, which selects the other environment-->
		<!-- @todo These input should be wizard like in publication tool. As well as the homedir variable -->
		<input propertyname="dest_host" defaultValue="dev1.netvlies.net">Please supply destination host: </input>
		<input propertyname="dest_user" defaultValue="support">Please supply destination mysql user: </input>	
		<input propertyname="dest_mysqldb" defaultValue="${mysqldb}">Please supply mysqldb of destination: </input>	
		<input propertyname="dest_mysqluser" defaultValue="${mysqluser}">Please supply mysql user of destination: </input>	
		<input propertyname="dest_mysqlpw" defaultValue="${mysqlpw}">Please supply mysql password of destination: </input>	
		
		<php function="time" returnProperty="timestamp"/>
		<property name="dumpfile" value="mysql_dump_${project}_${timestamp}.sql"/>
		<property name="backupfile" value="mysql_backup_${project}_${timestamp}.sql"/>
		
		<!-- create dump -->
		<ssh 
			username="${username}" 
			host="${hostname}"
            port="${sshport}"
			pubkeyfile="${pubkeyfile}" 
			privkeyfile="${privkeyfile}" 
			command="mysqldump -h localhost ${mysqldb} -u ${mysqluser} --password=${mysqlpw} > ${dumpfile}" 
			property="output"
		/>
		<echo msg="${output}"/>
		
		<!-- download dump -->
		<scp
			username="${username}" 
			host="${hostname}"
            port="${sshport}"
			pubkeyfile="${pubkeyfile}" 
			privkeyfile="${privkeyfile}" 
			fetch="true"
			file="${dumpfile}"
			todir="."
		/>		
		
		<!-- remove initially created dump on source server -->
		<ssh 
			username="${username}" 
			host="${hostname}"
            port="${sshport}"
			pubkeyfile="${pubkeyfile}" 
			privkeyfile="${privkeyfile}" 
			command="rm ${dumpfile}" 
			property="output"
		/>
		<echo msg="${output}"/>		
		
		<!-- 
		Copy dump to target host
		-->
		<scp
			username="${dest_user}" 
			host="${dest_host}"
            port="${sshport}"
			pubkeyfile="${pubkeyfile}" 
			privkeyfile="${privkeyfile}" 
			fetch="false"
			file="${dumpfile}"
			todir="/home/${dest_user}"
		/>
		
		<!-- 
		backup current database 
		import dump in mysql
		-->
		<ssh 
			username="${dest_user}" 
			host="${dest_host/}"
            port="${sshport}"
			pubkeyfile="${pubkeyfile}" 
			privkeyfile="${privkeyfile}" 
			command="
				mysqldump -h localhost ${dest_mysqldb} -u ${dest_mysqluser} --password=${dest_mysqlpw} > ${backupfile};
				mysql -u ${dest_mysqluser} -p ${dest_mysqldb} -e 'DROP DATABASE ${dest_mysqldb}; CREATE DATABASE ${dest_mysqldb};' --password=${dest_mysqlpw};
				mysql -u ${dest_mysqluser} -p ${dest_mysqldb} &lt; /home/${dest_user}/${dumpfile} --password=${dest_mysqlpw};
				rm ${dumpfile};
			" 
			property="output"
		/>
		<echo msg="mysql -u ${dest_mysqluser} --password=${dest_mysqlpw} -p ${dest_mysqldb} &lt; /home/${dest_user}/${dumpfile};"/>
		
	</target>

</project>
