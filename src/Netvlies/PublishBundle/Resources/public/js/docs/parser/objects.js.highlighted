<div class="highlight"><pre><span class="cm">/**</span>
<span class="cm"> * Netvlies OMS</span>
<span class="cm"> * Uses jQuery 1.6.2</span>
<span class="cm"> * @module OMS</span>
<span class="cm"> */</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">OMS</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
	<span class="s2">&quot;use strict&quot;</span><span class="p">;</span>	
	<span class="kd">var</span> <span class="nx">OMS</span> <span class="o">=</span> <span class="p">{};</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * Sortable table class that allows the user to order a table</span>
<span class="cm">	 * &lt;p&gt;Usage: &lt;code&gt;var sTable = new OMS.SortableTable($(&#39;table&#39;)[0]);&lt;/code&gt;&lt;/p&gt;</span>
<span class="cm">	 * @class SortableTable</span>
<span class="cm">	 * @namespace OMS</span>
<span class="cm">	 * @constructor</span>
<span class="cm">	 * @param {HTMLTableElement} context &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; to use</span>
<span class="cm">	 */</span>
	<span class="nx">OMS</span><span class="p">.</span><span class="nx">SortableTable</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>		
		<span class="cm">/**</span>
<span class="cm">		 * jQuery reference to the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;</span>
<span class="cm">		 * @property _table</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type jQueryObject</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_table</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">context</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;sortable&#39;</span><span class="p">);</span>

		<span class="k">this</span><span class="p">.</span><span class="nx">_headerEvents</span><span class="p">();</span>
		<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[data-default-sort]&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[data-default-sort]&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;[data-default-sort]&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-default-sort&#39;</span><span class="p">));</span>
		<span class="p">}</span>
	<span class="p">};</span>
	<span class="nx">OMS</span><span class="p">.</span><span class="nx">SortableTable</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
		<span class="cm">/**</span>
<span class="cm">		 * Sorts the table with the given column and sort order</span>
<span class="cm">		 * @method sort</span>
<span class="cm">		 * @param {HTMLTableCellElement} columnHeader The column to sort by</span>
<span class="cm">		 * @param {String} sortOrder The sort order (&#39;asc&#39; or &#39;desc&#39;)</span>
<span class="cm">		 * @param {Function} callback Callback function which fires after sorting the table</span>
<span class="cm">		 */</span>
		<span class="nx">sort</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">columnHeader</span><span class="p">,</span> <span class="nx">sortOrder</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">sortOrder</span> <span class="o">===</span> <span class="s1">&#39;undefined&#39;</span> <span class="o">||</span> <span class="o">!</span><span class="nx">sortOrder</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">sortOrder</span> <span class="o">=</span> <span class="s1">&#39;asc&#39;</span><span class="p">;</span>
			<span class="p">}</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">_sortColumn</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_sortValues</span><span class="p">(</span><span class="nx">columnHeader</span><span class="p">,</span> <span class="nx">sortOrder</span><span class="p">),</span> <span class="nx">callback</span><span class="p">);</span>
		<span class="p">},</span>
		<span class="cm">/**</span>
<span class="cm">		 * Adds click events to the headers</span>
<span class="cm">		 * @method _headerEvents</span>
<span class="cm">		 * @private</span>
<span class="cm">		 */</span>
		<span class="nx">_headerEvents</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">currentList</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">).</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;thead&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;th:not([data-not-sortable])&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;sortable&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
				<span class="kd">var</span> <span class="nx">sortOrder</span> <span class="o">=</span> <span class="s1">&#39;asc&#39;</span><span class="p">,</span>
					<span class="nx">columnHeader</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">columnHeader</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-sort-order&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="s1">&#39;asc&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nx">sortOrder</span> <span class="o">=</span> <span class="s1">&#39;desc&#39;</span><span class="p">;</span> <span class="p">}</span>
				<span class="nx">currentList</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">columnHeader</span><span class="p">,</span> <span class="nx">sortOrder</span><span class="p">);</span>
			<span class="p">});</span>
		<span class="p">},</span>
		<span class="cm">/**</span>
<span class="cm">		 * Sort the values of the column</span>
<span class="cm">		 * @method _sortValues</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @param {HTMLTableCellElement} columnHeader The column to sort by</span>
<span class="cm">		 * @param {String} sortOrder The sort order (&#39;asc&#39; or &#39;desc&#39;)</span>
<span class="cm">		 * @return {Object} values sorted with original index </span>
<span class="cm">		 */</span>
		<span class="nx">_sortValues</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">columnHeader</span><span class="p">,</span> <span class="nx">sortOrder</span><span class="p">)</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">[],</span>
				<span class="nx">numbers</span> <span class="o">=</span> <span class="kc">true</span><span class="p">,</span>
				<span class="nx">index</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">columnHeader</span><span class="p">).</span><span class="nx">index</span><span class="p">();</span>
				
			<span class="nx">$</span><span class="p">(</span><span class="nx">columnHeader</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-sort-order&#39;</span><span class="p">,</span> <span class="nx">sortOrder</span><span class="p">);</span>
			<span class="c1">//push all values in the column with their index in the array</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;tbody&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;tr&#39;</span><span class="p">).</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;:nth-child(&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
				<span class="nx">values</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">name</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span> <span class="nx">index</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">index</span><span class="p">()</span> <span class="p">});</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">{</span> <span class="nx">numbers</span> <span class="o">=</span> <span class="o">!</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span> <span class="p">}</span>
			<span class="p">});</span>
		
			<span class="c1">//sort the values</span>
			<span class="nx">values</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">numbers</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//string sort</span>
					<span class="kd">var</span> <span class="nx">nameA</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">(),</span> 
						<span class="nx">nameB</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
					<span class="k">if</span> <span class="p">(</span><span class="nx">sortOrder</span> <span class="o">===</span> <span class="s1">&#39;asc&#39;</span><span class="p">)</span> <span class="p">{</span>
						<span class="k">if</span> <span class="p">(</span><span class="nx">nameA</span> <span class="o">&lt;</span> <span class="nx">nameB</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
						<span class="k">if</span> <span class="p">(</span><span class="nx">nameA</span> <span class="o">&gt;</span> <span class="nx">nameB</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
						<span class="k">if</span> <span class="p">(</span><span class="nx">nameA</span> <span class="o">&lt;</span> <span class="nx">nameB</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
						<span class="k">if</span> <span class="p">(</span><span class="nx">nameA</span> <span class="o">&gt;</span> <span class="nx">nameB</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
					<span class="p">}</span>
					<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">//numbers sort					</span>
					<span class="k">if</span> <span class="p">(</span><span class="nx">sortOrder</span> <span class="o">===</span> <span class="s1">&#39;asc&#39;</span><span class="p">)</span> <span class="p">{</span>
						<span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">name</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
						<span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">name</span> <span class="o">-</span> <span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>					
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">});</span>
			<span class="k">return</span> <span class="nx">values</span><span class="p">;</span>
		<span class="p">},</span>
		<span class="cm">/**</span>
<span class="cm">		 * Sort the table using the returned values from _sortValues </span>
<span class="cm">		 * @method _sortColumn</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @param {Object} values values sorted with original index</span>
<span class="cm">		 * @param {Function} callback Callback function which fires after sorting the table</span>
<span class="cm">		 */</span>
		<span class="nx">_sortColumn</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">$newBody</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tbody /&gt;&#39;</span><span class="p">),</span>
				<span class="nx">$oldBody</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;tbody&#39;</span><span class="p">),</span>
				<span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
				<span class="nx">l</span> <span class="o">=</span> <span class="nx">values</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
			<span class="k">for</span> <span class="p">(;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">$newBody</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">$oldBody</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;:nth-child(&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">values</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;)&#39;</span><span class="p">).</span><span class="nx">clone</span><span class="p">());</span>
			<span class="p">}</span>
			<span class="nx">$oldBody</span><span class="p">.</span><span class="nx">replaceWith</span><span class="p">(</span><span class="nx">$newBody</span><span class="p">);</span>
			<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">callback</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">callback</span><span class="p">();</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">};</span>

	<span class="cm">/**</span>
<span class="cm">	 * A tabbed list with ajax calls.</span>
<span class="cm">	 * &lt;p&gt;Usage: &lt;code&gt;var tabs = new OMS.Tabs($(&#39;ul&#39;)[0]);&lt;/code&gt;&lt;/p&gt;</span>
<span class="cm">	 * @class Tabs</span>
<span class="cm">	 * @constructor</span>
<span class="cm">	 * @param {HTMLUListElement} context &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; to use</span>
<span class="cm">	 * @namespace OMS</span>
<span class="cm">	 */</span>
	<span class="nx">OMS</span><span class="p">.</span><span class="nx">Tabs</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
		<span class="cm">/**</span>
<span class="cm">		 * jQuery reference to the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;</span>
<span class="cm">		 * @property _tabs</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type jQueryObject</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_tabs</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">context</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;tabs&#39;</span><span class="p">);</span>
		<span class="cm">/**</span>
<span class="cm">		 * Element to put results in</span>
<span class="cm">		 * @property resultElem</span>
<span class="cm">		 * @type jQueryObject</span>
<span class="cm">		 * @default undefined</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">resultElem</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">_tabs</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-ajax-results&#39;</span><span class="p">));</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">resultElem</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">resultElem</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_setClickEvents</span><span class="p">();</span>
	<span class="p">};</span>
	<span class="nx">OMS</span><span class="p">.</span><span class="nx">Tabs</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
		<span class="cm">/**</span>
<span class="cm">		 * Sets the click events to the list items</span>
<span class="cm">		 * @method _setClickEvents</span>
<span class="cm">		 * @private</span>
<span class="cm">		 */</span>
		<span class="nx">_setClickEvents</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">thisObject</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
			    <span class="nx">$listItem</span><span class="p">,</span>
			    <span class="nx">jqXHR</span><span class="p">;</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">_tabs</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;li:not(.current)&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">$listItem</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
				
				<span class="c1">//switches the current class</span>
				<span class="nx">$listItem</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;current&#39;</span><span class="p">).</span><span class="nx">siblings</span><span class="p">().</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;current&#39;</span><span class="p">);</span> 
				<span class="c1">//if the listitem has child listitems, but no child item with current class, make the first child the current</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">$listItem</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">$listItem</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;li.current&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span> 
					<span class="nx">$listItem</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">first</span><span class="p">().</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;current&#39;</span><span class="p">);</span>
				<span class="p">}</span>
				<span class="c1">//if the listitem has a child listitem with the class current and a data-ajax-doc attribute, make it the current list item to get the data for</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">$listItem</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.current[data-ajax-doc]&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">$listItem</span> <span class="o">=</span> <span class="nx">$listItem</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.current[data-ajax-doc]&#39;</span><span class="p">).</span><span class="nx">last</span><span class="p">();</span>
				<span class="p">}</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">$listItem</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-ajax-doc&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">thisObject</span><span class="p">.</span><span class="nx">resultElem</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&lt;span class=&quot;loader&quot;&gt;loading...&lt;/span&gt;&#39;</span><span class="p">);</span>
					<span class="k">if</span> <span class="p">(</span><span class="nx">jqXHR</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//Removes the current request.</span>
						<span class="nx">jqXHR</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
					<span class="p">}</span>
					<span class="nx">jqXHR</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
						<span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span><span class="p">,</span>
						<span class="nx">url</span><span class="o">:</span> <span class="nx">$listItem</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-ajax-doc&#39;</span><span class="p">),</span>
						<span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
							<span class="nx">thisObject</span><span class="p">.</span><span class="nx">resultElem</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
						<span class="p">},</span>
						<span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
							<span class="nx">thisObject</span><span class="p">.</span><span class="nx">resultElem</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;&lt;span class=&quot;error&quot;&gt;ERROR: &#39;</span> <span class="o">+</span> <span class="nx">c</span> <span class="o">+</span> <span class="s1">&#39;&lt;/span&gt;&#39;</span><span class="p">);</span>
						<span class="p">}</span>
					<span class="p">});</span>
				<span class="p">}</span>
				<span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span> <span class="c1">//to prevent links in list items to work</span>
			<span class="p">});</span>
		<span class="p">}</span>
	<span class="p">};</span>
	
	<span class="cm">/** </span>
<span class="cm">	 * A table that has an infinite scroll</span>
<span class="cm">	 * &lt;p&gt;Usage: &lt;code&gt;var infiniteScroll = new OMS.InfiniteScroll($(&#39;table&#39;)[0]);&lt;/code&gt;&lt;/p&gt;</span>
<span class="cm">	 * @class InfiniteScroll</span>
<span class="cm">	 * @constructor</span>
<span class="cm">	 * @param {HTMLTableElement} context &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; to use</span>
<span class="cm">	 * @namespace OMS</span>
<span class="cm">	 */</span>
	<span class="nx">OMS</span><span class="p">.</span><span class="nx">InfiniteScroll</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>		
		<span class="cm">/**</span>
<span class="cm">		 * Reference to the &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;</span>
<span class="cm">		 * @property _table</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type HTMLTableElement</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_table</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">context</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;infinite-scroll&#39;</span><span class="p">);</span>
		<span class="cm">/**</span>
<span class="cm">		 * The &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; of the table</span>
<span class="cm">		 * @property _tableBody</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type HTMLTableRowElement</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_tableBody</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;tbody&#39;</span><span class="p">);</span>
		<span class="cm">/**</span>
<span class="cm">		 * Document to get the new rows</span>
<span class="cm">		 * @property ajaxDoc</span>
<span class="cm">		 * @type String</span>
<span class="cm">		 * @default &#39;&#39;</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">ajaxDoc</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-ajax-doc&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
		<span class="cm">/**</span>
<span class="cm">		 * Maximum number of rows to get</span>
<span class="cm">		 * @property maxRows</span>
<span class="cm">		 * @type Number</span>
<span class="cm">		 * @default 10</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">maxRows</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">((</span><span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-number-of-rows&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">10</span><span class="p">),</span> <span class="mi">10</span><span class="p">);</span>
		<span class="cm">/**</span>
<span class="cm">		 * Text to show when there are no more results</span>
<span class="cm">		 * @property noMoreResults</span>
<span class="cm">		 * @type String</span>
<span class="cm">		 * @default &#39;Geen resultaten meer&#39;</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">noMoreResults</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-no-more-results&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;Geen resultaten meer&#39;</span><span class="p">;</span>
		<span class="cm">/**</span>
<span class="cm">		 * If new rows are loading</span>
<span class="cm">		 * @property _loading</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type Boolean</span>
<span class="cm">		 * @default false</span>
<span class="cm">		 */</span>		 
		<span class="k">this</span><span class="p">.</span><span class="nx">_loading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>	
		
		<span class="k">this</span><span class="p">.</span><span class="nx">addScrollEvents</span><span class="p">();</span>
		
		<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ajaxDoc</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;[data-init-load]&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">loadRows</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">};</span>
	<span class="nx">OMS</span><span class="p">.</span><span class="nx">InfiniteScroll</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
		<span class="cm">/**</span>
<span class="cm">		 * Loads the rows from the ajaxDoc and adds them to the tbody</span>
<span class="cm">		 * @method loadRows</span>
<span class="cm">		 * @param {Function} callback Callback function which fires after adding the results in the DOM</span>
<span class="cm">		 */</span>
		<span class="nx">loadRows</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_loading</span><span class="p">)</span> <span class="p">{</span>
				<span class="kd">var</span> <span class="nx">cells</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span>
				    <span class="nx">thisObject</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
				<span class="k">this</span><span class="p">.</span><span class="nx">_loading</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
				<span class="k">this</span><span class="p">.</span><span class="nx">_tableBody</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;span class=&quot;loader&quot;&gt;loading...&lt;/span&gt;&#39;</span><span class="p">);</span>
				<span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ajaxDoc</span><span class="p">,</span> <span class="p">{</span>
					<span class="nx">rows</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">maxRows</span><span class="p">,</span>
					<span class="nx">loadedRows</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_tableBody</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;tr&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">,</span>
					<span class="nx">lastId</span><span class="o">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">_tableBody</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;tr&#39;</span><span class="p">).</span><span class="nx">last</span><span class="p">().</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span>
				<span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
						<span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//loop through rows</span>
							<span class="nx">cells</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
							<span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">d</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//loop through cells</span>
								<span class="nx">cells</span> <span class="o">+=</span> <span class="s1">&#39;&lt;td&gt;&#39;</span> <span class="o">+</span> <span class="nx">d</span> <span class="o">+</span> <span class="s1">&#39;&lt;/td&gt;&#39;</span><span class="p">;</span>
							<span class="p">});</span>
							<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_tableBody</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;.loader&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
							<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_tableBody</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span>
								<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;tr /&gt;&#39;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="nx">a</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">cells</span><span class="p">)</span>
							<span class="p">);</span>
							<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_loading</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
						<span class="p">});</span>
					<span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">//no more results</span>
						<span class="nx">thisObject</span><span class="p">.</span><span class="nx">removeScrollEvents</span><span class="p">();</span>
						<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_tableBody</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;.loader&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
						<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_table</span><span class="p">.</span><span class="nx">after</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;no-more-results&quot;&gt;Geen resultaten meer&lt;/div&gt;&#39;</span><span class="p">);</span>
					<span class="p">}</span>
					<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">callback</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span>
						<span class="nx">callback</span><span class="p">();</span>
					<span class="p">}</span>
				<span class="p">});</span>
			<span class="p">}</span>
		<span class="p">},</span>
		<span class="cm">/**</span>
<span class="cm">		 * Adds the scroll events to the window for loading new rows when the bottom is in view</span>
<span class="cm">		 * @method addScrollEvents</span>
<span class="cm">		 */</span>
		<span class="nx">addScrollEvents</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">thisObject</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
			    <span class="nx">table</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_table</span><span class="p">;</span>
			
			<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;scroll&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">((</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">scrollTop</span><span class="p">()</span> <span class="o">+</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">height</span><span class="p">())</span> <span class="o">&gt;</span> <span class="p">(</span><span class="nx">table</span><span class="p">.</span><span class="nx">offset</span><span class="p">().</span><span class="nx">top</span> <span class="o">+</span> <span class="nx">table</span><span class="p">.</span><span class="nx">height</span><span class="p">()))</span> <span class="p">{</span>
					<span class="nx">thisObject</span><span class="p">.</span><span class="nx">loadRows</span><span class="p">();</span>
				<span class="p">}</span>
			<span class="p">});</span>
		<span class="p">},</span>
		<span class="cm">/**</span>
<span class="cm">		 * Removes the scroll events from the window</span>
<span class="cm">		 * @method removeScrollEvents</span>
<span class="cm">		 */</span>
		<span class="nx">removeScrollEvents</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
			<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s1">&#39;scroll&#39;</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">};</span>
	
	<span class="cm">/** </span>
<span class="cm">	 * An input field that can complete text while typing</span>
<span class="cm">	 * &lt;p&gt;Usage: &lt;code&gt;var autoCompleteField = new OMS.InfiniteScroll($(&#39;input&#39;)[0]);&lt;/code&gt;&lt;/p&gt;</span>
<span class="cm">	 * @class AutoComplete</span>
<span class="cm">	 * @constructor</span>
<span class="cm">	 * @param {HTMLInputElement} context &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; to use</span>
<span class="cm">	 * @namespace OMS</span>
<span class="cm">	 */</span>
	<span class="nx">OMS</span><span class="p">.</span><span class="nx">AutoComplete</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
		<span class="cm">/**</span>
<span class="cm">		 * jQuery Reference to the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;</span>
<span class="cm">		 * @property _input</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type jQueryObject</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_input</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">context</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;autocomplete&#39;</span><span class="p">);</span>
		<span class="cm">/**</span>
<span class="cm">		 * Document to call for the results</span>
<span class="cm">		 * @property ajaxDoc</span>
<span class="cm">		 * @type String</span>
<span class="cm">		 * @default &#39;&#39;</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">ajaxDoc</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_input</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-ajax-doc&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
		
		<span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ajaxDoc</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">addEvents</span><span class="p">();</span>
		<span class="p">}</span>
	<span class="p">};</span>
	<span class="nx">OMS</span><span class="p">.</span><span class="nx">AutoComplete</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
		<span class="cm">/**</span>
<span class="cm">		 * Adds the keyup and blur event to the input for loading and showing the results</span>
<span class="cm">		 * @method addEvents</span>
<span class="cm">		 */</span>
		<span class="nx">addEvents</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">thisObject</span> <span class="o">=</span> <span class="k">this</span><span class="p">,</span>
			    <span class="nx">jqXHR</span><span class="p">,</span>
					<span class="nx">typWait</span><span class="p">;</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">_input</span><span class="p">.</span><span class="nx">keyup</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
				<span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">typWait</span><span class="p">);</span>
				<span class="nx">typWait</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
					<span class="k">if</span> <span class="p">(</span><span class="nx">jqXHR</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//Removes the current request.</span>
						<span class="nx">jqXHR</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
					<span class="p">}</span>
					<span class="nx">jqXHR</span> <span class="o">=</span> <span class="nx">$</span><span class="p">.</span><span class="nx">getJSON</span><span class="p">(</span><span class="nx">thisObject</span><span class="p">.</span><span class="nx">ajaxDoc</span><span class="p">,</span> <span class="p">{</span>
						<span class="nx">text</span><span class="o">:</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_input</span><span class="p">.</span><span class="nx">val</span><span class="p">()</span>
					<span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
						<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.autocomplete-data&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
							<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;ul class=&quot;autocomplete-data&quot;&gt; /&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span>
								<span class="nx">top</span><span class="o">:</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_input</span><span class="p">.</span><span class="nx">offset</span><span class="p">().</span><span class="nx">top</span> <span class="o">+</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_input</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">offsetHeight</span><span class="p">,</span>
								<span class="nx">left</span><span class="o">:</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_input</span><span class="p">.</span><span class="nx">offset</span><span class="p">().</span><span class="nx">left</span>
							<span class="p">}));</span>
						<span class="p">}</span>
						<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.autocomplete-data&#39;</span><span class="p">).</span><span class="nx">empty</span><span class="p">();</span>
						<span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
							<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.autocomplete-data&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;li /&gt;&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="nx">b</span><span class="p">));</span>
						<span class="p">});</span>
						<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.autocomplete-data li&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
							<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_input</span><span class="p">.</span><span class="nx">val</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">());</span>
						<span class="p">});</span>
					<span class="p">});</span>
				<span class="p">},</span> <span class="mi">300</span><span class="p">);</span>
			<span class="p">});</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">_input</span><span class="p">.</span><span class="nx">blur</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
				<span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">typWait</span><span class="p">);</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">jqXHR</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">jqXHR</span><span class="p">.</span><span class="nx">abort</span><span class="p">();</span>
				<span class="p">}</span>
				<span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
					<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.autocomplete-data&#39;</span><span class="p">).</span><span class="nx">fadeOut</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
						<span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
					<span class="p">});</span>
				<span class="p">},</span> <span class="mi">200</span><span class="p">);</span>
			<span class="p">});</span>
		<span class="p">}</span>
	<span class="p">};</span>
	
	<span class="cm">/**</span>
<span class="cm">	 * A list with drag and drop functionalities</span>
<span class="cm">	 * &lt;p&gt;Usage: &lt;code&gt;var dndTree = new OMS.Tree($(&#39;ul&#39;)[0]);&lt;/code&gt;&lt;/p&gt;</span>
<span class="cm">	 * @class Tree</span>
<span class="cm">	 * @constructor</span>
<span class="cm">	 * @param {HTMLUListElement} context &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; to use</span>
<span class="cm">	 * @namespace OMS</span>
<span class="cm">	 */</span>
	<span class="nx">OMS</span><span class="p">.</span><span class="nx">Tree</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">context</span><span class="p">)</span> <span class="p">{</span>
		<span class="cm">/**</span>
<span class="cm">		 * jQuery reference to the &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;</span>
<span class="cm">		 * @property _tree</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type jQueryObject</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_tree</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">context</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;dnd-tree&#39;</span><span class="p">);</span>
		<span class="cm">/**</span>
<span class="cm">		 * jQuery reference to the list items in the _tree</span>
<span class="cm">		 * @property _listItems</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type jQueryArray</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_listItems</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">);</span>
		<span class="cm">/**</span>
<span class="cm">		 * The horizontal coordinate of the mouse relative to whole document on initialisation of the drag.</span>
<span class="cm">		 * @property _startX</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type Number</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_startX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="cm">/**</span>
<span class="cm">		 * The vertical coordinate of the mouse relative to whole document on initialisation of the drag.</span>
<span class="cm">		 * @property _startY</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type Number</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_startY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="cm">/**</span>
<span class="cm">		 * The horizontal coordinate of the dragging to _tree on initialisation of the drag.</span>
<span class="cm">		 * @property _elemX</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type Number</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_elemX</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="cm">/**</span>
<span class="cm">		 * The vertical coordinate of the dragging to _tree on initialisation of the drag.</span>
<span class="cm">		 * @property _elemY</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type Number</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_elemY</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="cm">/**</span>
<span class="cm">		 * The element that is being dragged.</span>
<span class="cm">		 * @property _dragElement</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type jQueryObject</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">;</span>
		<span class="cm">/**</span>
<span class="cm">		 * The element that is being hovered when dragging.</span>
<span class="cm">		 * @property _targetElement</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type jQueryObject</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_targetElement</span><span class="p">;</span>		
		<span class="cm">/**</span>
<span class="cm">		 * Array which holds the tree&#39;s edit hisory</span>
<span class="cm">		 * @property history</span>
<span class="cm">		 * @type Object</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">history</span> <span class="o">=</span> <span class="p">[];</span>
		<span class="cm">/**</span>
<span class="cm">		 * The (line-)height of a list item without children lists.</span>
<span class="cm">		 * @property itemHeight</span>
<span class="cm">		 * @type Number</span>
<span class="cm">		 * @default 32</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">itemHeight</span> <span class="o">=</span> <span class="mi">32</span><span class="p">;</span>
		<span class="cm">/**</span>
<span class="cm">		 * The timeout for the alert-bar</span>
<span class="cm">		 * @property _alertTimer</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @type Number</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">_alertTimer</span><span class="p">;</span>
		<span class="cm">/**</span>
<span class="cm">		 * The time to wait until ajaxDoc is called.</span>
<span class="cm">		 * @property alertTimeout</span>
<span class="cm">		 * @type Number</span>
<span class="cm">		 * @default 6000</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">alertTimeout</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">((</span><span class="k">this</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-save-wait&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="mi">6000</span><span class="p">),</span> <span class="mi">10</span><span class="p">);</span>
		<span class="cm">/**</span>
<span class="cm">		 * Document to call to save</span>
<span class="cm">		 * @property ajaxDoc</span>
<span class="cm">		 * @type String</span>
<span class="cm">		 * @default &#39;&#39;</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">ajaxDoc</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-ajax-doc&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
		<span class="cm">/**</span>
<span class="cm">		 * The element where the ajax resultt is placed in.</span>
<span class="cm">		 * @property ajaxResultElement</span>
<span class="cm">		 * @type jQueryElement</span>
<span class="cm">		 * @default undefined</span>
<span class="cm">		 */</span>
		<span class="k">this</span><span class="p">.</span><span class="nx">ajaxResultElement</span><span class="p">;</span>
		<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ajaxDoc</span><span class="p">.</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-ajax-results&#39;</span><span class="p">))</span> <span class="p">{</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">ajaxResultElement</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-ajax-results&#39;</span><span class="p">));</span>
		<span class="p">}</span>
		
		<span class="k">this</span><span class="p">.</span><span class="nx">_addEvents</span><span class="p">();</span>
	<span class="p">};</span>
	<span class="nx">OMS</span><span class="p">.</span><span class="nx">Tree</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
		<span class="cm">/**</span>
<span class="cm">		 * Adds the events to the elements</span>
<span class="cm">		 * @method _addEvents</span>
<span class="cm">		 * @private</span>
<span class="cm">		 */</span>
		<span class="nx">_addEvents</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">thisObject</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
			
			<span class="k">this</span><span class="p">.</span><span class="nx">_listItems</span><span class="p">.</span><span class="nx">live</span><span class="p">(</span><span class="s1">&#39;mousedown&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-no-drag&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="p">}</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_startX</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span><span class="p">;</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_startY</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span><span class="p">;</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_elemX</span> <span class="o">=</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">offsetLeft</span><span class="p">;</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_elemY</span> <span class="o">=</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">offsetTop</span><span class="p">;</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">.</span><span class="nx">before</span><span class="p">(</span><span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;clone&#39;</span><span class="p">))</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_listItems</span> <span class="o">=</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">);</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;dragging&#39;</span><span class="p">).</span><span class="nx">css</span><span class="p">({</span>
						<span class="nx">left</span><span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">-</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_startX</span> <span class="o">+</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_elemX</span><span class="p">,</span>
						<span class="nx">top</span><span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">-</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_startY</span> <span class="o">+</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_elemY</span>
				<span class="p">});</span>
				
				<span class="c1">//Removes default events to avoid text selection</span>
				<span class="nb">document</span><span class="p">.</span><span class="nx">onselectstart</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="p">};</span>
				<span class="nb">document</span><span class="p">.</span><span class="nx">ondragstart</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="p">};</span>
				
				<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mousemove&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_moveElement</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">thisObject</span><span class="p">)</span> <span class="p">});</span>
				<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">bind</span><span class="p">(</span><span class="s1">&#39;mouseup&#39;</span><span class="p">,</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_placeElement</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">thisObject</span><span class="p">)</span> <span class="p">});</span>
				
				<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
			<span class="p">});</span>
			
			<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.undo-save&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">thisObject</span><span class="p">.</span><span class="nx">_alertTimer</span><span class="p">);</span>
				<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.alert-bar&#39;</span><span class="p">).</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;cancelled!&#39;</span><span class="p">).</span><span class="nx">delay</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
					<span class="s1">&#39;height&#39;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
					<span class="s1">&#39;line-height&#39;</span><span class="o">:</span> <span class="mi">0</span>
				<span class="p">},</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
					<span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
				<span class="p">});</span>
				<span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
			<span class="p">});</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">).</span><span class="nx">live</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">e</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
			<span class="p">});</span>
			<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;[data-undo-tree=&#39;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;]&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">undo</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">thisObject</span><span class="p">);</span>
			<span class="p">});</span>
			<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;[data-save-tree=&#39;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;]&#39;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">thisObject</span><span class="p">);</span>
			<span class="p">});</span>
		<span class="p">},</span>
		<span class="cm">/**</span>
<span class="cm">		 * Move the current element and find the target element</span>
<span class="cm">		 * @method _moveElement</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @param {Object} e The event</span>
<span class="cm">		 * @param {Object} thisObject The current tree object</span>
<span class="cm">		 */</span>
		<span class="nx">_moveElement</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">thisObject</span><span class="p">)</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">$item</span><span class="p">,</span>
			    <span class="nx">itemTop</span><span class="p">,</span>
			    <span class="nx">mouseY</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span><span class="p">,</span>
			    <span class="nx">position</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">;</span>
					
			<span class="c1">//Find the target</span>
			<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_listItems</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
				<span class="nx">$item</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
				<span class="nx">itemTop</span> <span class="o">=</span> <span class="nx">$item</span><span class="p">.</span><span class="nx">offset</span><span class="p">().</span><span class="nx">top</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">mouseY</span> <span class="o">&gt;</span> <span class="nx">itemTop</span> <span class="o">&amp;&amp;</span> <span class="nx">mouseY</span> <span class="o">&lt;</span> <span class="nx">itemTop</span> <span class="o">+</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">itemHeight</span> <span class="o">&amp;&amp;</span> <span class="nx">$item</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
					<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_targetElement</span> <span class="o">=</span> <span class="nx">$item</span><span class="p">;</span>
					<span class="k">if</span> <span class="p">(</span><span class="nx">mouseY</span> <span class="o">&lt;</span> <span class="nx">itemTop</span> <span class="o">+</span> <span class="mi">8</span><span class="p">)</span> <span class="p">{</span>
						<span class="nx">position</span> <span class="o">=</span> <span class="s1">&#39;top&#39;</span><span class="p">;</span>
					<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">mouseY</span> <span class="o">&gt;</span> <span class="nx">itemTop</span> <span class="o">+</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">itemHeight</span> <span class="o">-</span> <span class="mi">8</span><span class="p">)</span> <span class="p">{</span>
						<span class="nx">position</span> <span class="o">=</span> <span class="s1">&#39;bottom&#39;</span><span class="p">;</span>						
					<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">mouseY</span> <span class="o">&gt;</span> <span class="nx">itemTop</span> <span class="o">+</span> <span class="mi">8</span> <span class="o">&amp;&amp;</span> <span class="nx">mouseY</span> <span class="o">&lt;</span> <span class="nx">itemTop</span> <span class="o">+</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">itemHeight</span> <span class="o">-</span> <span class="mi">8</span><span class="p">)</span> <span class="p">{</span>
						<span class="nx">position</span> <span class="o">=</span> <span class="s1">&#39;on&#39;</span><span class="p">;</span>
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">});</span>
			<span class="c1">//target must not be the clone</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">_listItems</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;target top bottom on&#39;</span><span class="p">);</span>
			<span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_targetElement</span> <span class="o">&amp;&amp;</span> 
					<span class="k">this</span><span class="p">.</span><span class="nx">_targetElement</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;:not(.clone)&#39;</span><span class="p">).</span><span class="nx">length</span> <span class="o">&amp;&amp;</span> 
					<span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">_targetElement</span><span class="p">.</span><span class="nx">parents</span><span class="p">(</span><span class="s1">&#39;.clone&#39;</span><span class="p">).</span><span class="nx">length</span> <span class="o">&amp;&amp;</span>
					<span class="p">(</span><span class="nx">position</span> <span class="o">!==</span> <span class="s1">&#39;on&#39;</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">_targetElement</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-no-children&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
					<span class="p">((</span><span class="nx">position</span> <span class="o">!==</span> <span class="s1">&#39;top&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">position</span> <span class="o">!==</span> <span class="s1">&#39;bottom&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">_targetElement</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;data-no-siblings&#39;</span><span class="p">)</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">))</span> <span class="p">{</span>
				<span class="k">this</span><span class="p">.</span><span class="nx">_targetElement</span><span class="p">.</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;target&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="nx">position</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="k">this</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span> <span class="p">{</span>
				<span class="nx">left</span><span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageX</span> <span class="o">-</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_startX</span> <span class="o">+</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_elemX</span><span class="p">,</span>
				<span class="nx">top</span><span class="o">:</span> <span class="nx">e</span><span class="p">.</span><span class="nx">pageY</span> <span class="o">-</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_startY</span> <span class="o">+</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_elemY</span>
			<span class="p">});</span>
		<span class="p">},</span>
		<span class="cm">/**</span>
<span class="cm">		 * Places the element on the position targeted</span>
<span class="cm">		 * @method _placeElement</span>
<span class="cm">		 * @private</span>
<span class="cm">		 * @param {Object} e The event</span>
<span class="cm">		 * @param {Object} thisObject The current tree object</span>
<span class="cm">		 */</span>
		<span class="nx">_placeElement</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span> <span class="nx">thisObject</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.clone&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
			<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_listItems</span> <span class="o">=</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">);</span>
			<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;dragging&#39;</span><span class="p">);</span>
			<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span>
				<span class="nx">left</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
				<span class="nx">top</span><span class="o">:</span> <span class="mi">0</span>
			<span class="p">});</span>
			
			<span class="k">if</span><span class="p">(</span><span class="nx">thisObject</span><span class="p">.</span><span class="nx">_listItems</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;.top, .bottom, .on&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//change tree when new position</span>
				
				<span class="c1">//add to history</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">history</span><span class="p">[</span><span class="nx">thisObject</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">length</span> <span class="o">||</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
					<span class="s1">&#39;node&#39;</span><span class="o">:</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">),</span>
					<span class="s1">&#39;parent&#39;</span><span class="o">:</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">.</span><span class="nx">parents</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">).</span><span class="nx">first</span><span class="p">().</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">),</span>
					<span class="s1">&#39;prevSibling&#39;</span><span class="o">:</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">.</span><span class="nx">prev</span><span class="p">().</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">)</span>
				<span class="p">};</span>
			
				<span class="kd">var</span> <span class="nx">$clone</span> <span class="o">=</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">css</span><span class="p">({</span><span class="nx">left</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">top</span><span class="o">:</span><span class="mi">0</span><span class="p">});</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_dragElement</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
				
				<span class="k">if</span> <span class="p">(</span><span class="nx">thisObject</span><span class="p">.</span><span class="nx">_listItems</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;.top&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_targetElement</span><span class="p">.</span><span class="nx">before</span><span class="p">(</span><span class="nx">$clone</span><span class="p">);</span>
				<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">thisObject</span><span class="p">.</span><span class="nx">_listItems</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;.bottom&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_targetElement</span><span class="p">.</span><span class="nx">after</span><span class="p">(</span><span class="nx">$clone</span><span class="p">);</span>
				<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">thisObject</span><span class="p">.</span><span class="nx">_listItems</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;.on&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">thisObject</span><span class="p">.</span><span class="nx">_targetElement</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
						<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_targetElement</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;ul /&gt;&#39;</span><span class="p">);</span>
					<span class="p">}</span>
					<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_targetElement</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$clone</span><span class="p">);</span>
				<span class="p">}</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">index</span><span class="p">)</span> <span class="p">{</span> 
						<span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">children</span><span class="p">().</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">;</span> 
				<span class="p">}).</span><span class="nx">remove</span><span class="p">();</span>
				

			<span class="p">}</span>
			
			<span class="c1">//remove classes and reset eventListeners</span>
			<span class="nx">thisObject</span><span class="p">.</span><span class="nx">listItems</span> <span class="o">=</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;li&#39;</span><span class="p">);</span>
			<span class="nx">thisObject</span><span class="p">.</span><span class="nx">listItems</span><span class="p">.</span><span class="nx">removeClass</span><span class="p">(</span><span class="s1">&#39;target top bottom on&#39;</span><span class="p">);</span>
			<span class="nb">document</span><span class="p">.</span><span class="nx">onselectstart</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
			<span class="nb">document</span><span class="p">.</span><span class="nx">ondragstart</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
			<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s1">&#39;mousemove&#39;</span><span class="p">);</span>
			<span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">unbind</span><span class="p">(</span><span class="s1">&#39;mouseup&#39;</span><span class="p">);</span>
			<span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
		<span class="p">},</span>
		<span class="cm">/**</span>
<span class="cm">		 * Reverts the last change done in the tree and removes it from the history;</span>
<span class="cm">		 * @method undo</span>
<span class="cm">		 * @param {Object | Function} eCallback The event or a callback</span>
<span class="cm">		 * @param {Object} thisObject The current tree object</span>
<span class="cm">		 */</span>
		<span class="nx">undo</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">eCallback</span><span class="p">,</span> <span class="nx">thisObject</span><span class="p">)</span> <span class="p">{</span>
			<span class="kd">var</span> <span class="nx">change</span> <span class="o">=</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">pop</span><span class="p">(),</span>
				<span class="nx">node</span> <span class="o">=</span> <span class="nx">change</span> <span class="o">&amp;&amp;</span> <span class="nx">change</span><span class="p">.</span><span class="nx">node</span> <span class="o">?</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">change</span><span class="p">.</span><span class="nx">node</span><span class="p">)</span> <span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span>
				<span class="nx">parent</span> <span class="o">=</span> <span class="nx">change</span> <span class="o">&amp;&amp;</span> <span class="nx">change</span><span class="p">.</span><span class="nx">parent</span> <span class="o">?</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">change</span><span class="p">.</span><span class="nx">parent</span><span class="p">)</span> <span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span>
				<span class="nx">sibling</span> <span class="o">=</span> <span class="nx">change</span> <span class="o">&amp;&amp;</span> <span class="nx">change</span><span class="p">.</span><span class="nx">prevSibling</span> <span class="o">?</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#&#39;</span> <span class="o">+</span> <span class="nx">change</span><span class="p">.</span><span class="nx">prevSibling</span><span class="p">)</span> <span class="o">:</span> <span class="kc">undefined</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="nx">sibling</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">sibling</span><span class="p">.</span><span class="nx">after</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
			<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">parent</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">parent</span><span class="p">.</span><span class="nx">children</span><span class="p">(</span><span class="s1">&#39;ul&#39;</span><span class="p">).</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_tree</span><span class="p">.</span><span class="nx">prepend</span><span class="p">(</span><span class="nx">node</span><span class="p">);</span>
			<span class="p">}</span>
			<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">eCallback</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nx">eCallback</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span> <span class="p">}</span>
			<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">eCallback</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nx">eCallback</span><span class="p">();</span> <span class="p">}</span>
		<span class="p">},</span>
		<span class="cm">/**</span>
<span class="cm">		 * Call the ajax-doc to save the tree</span>
<span class="cm">		 * @method save</span>
<span class="cm">		 * @param {Object | Function} eCallback The event or a callback</span>
<span class="cm">		 * @param {Object} thisObject The current tree object</span>
<span class="cm">		 */</span>
		<span class="nx">save</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">eCallback</span><span class="p">,</span> <span class="nx">thisObject</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="p">(</span><span class="nx">thisObject</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span> <span class="nx">thisObject</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span> <span class="p">}</span>
			<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.alert-bar.tree-save&#39;</span><span class="p">).</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.alert-bar&#39;</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
				<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;body&#39;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div class=&quot;alert-bar tree-save&quot; /&gt;&#39;</span><span class="p">)</span>
					<span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="s1">&#39;Uw wijzigingen worden opgeslagen. &lt;a href=&quot;#&quot; class=&quot;undo-save&quot;&gt;annuleren&lt;/a&gt;&#39;</span><span class="p">)</span>
					<span class="p">.</span><span class="nx">animate</span><span class="p">({</span>
						<span class="s1">&#39;height&#39;</span><span class="o">:</span> <span class="mi">40</span><span class="p">,</span>
						<span class="s1">&#39;line-height&#39;</span><span class="o">:</span> <span class="s1">&#39;40px&#39;</span>
					<span class="p">}));</span>
			<span class="p">}</span>
			<span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">thisObject</span><span class="p">.</span><span class="nx">_alertTimer</span><span class="p">);</span>
			<span class="nx">thisObject</span><span class="p">.</span><span class="nx">_alertTimer</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
				<span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
					<span class="nx">url</span><span class="o">:</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">ajaxDoc</span><span class="p">,</span>
					<span class="nx">success</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
						<span class="nx">thisObject</span><span class="p">.</span><span class="nx">history</span> <span class="o">=</span> <span class="p">[];</span>
						<span class="k">if</span> <span class="p">(</span><span class="nx">thisObject</span><span class="p">.</span><span class="nx">ajaxResultElement</span><span class="p">)</span> <span class="p">{</span>
							<span class="nx">thisObject</span><span class="p">.</span><span class="nx">ajaxResultElement</span><span class="p">.</span><span class="nx">html</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
						<span class="p">}</span>
					<span class="p">}</span>
				<span class="p">});</span>
				<span class="nx">$</span><span class="p">(</span><span class="s1">&#39;.alert-bar&#39;</span><span class="p">).</span><span class="nx">animate</span><span class="p">({</span>
					<span class="s1">&#39;height&#39;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
					<span class="s1">&#39;line-height&#39;</span><span class="o">:</span> <span class="mi">0</span>
				<span class="p">},</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
					<span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">remove</span><span class="p">();</span>
				<span class="p">});</span>
			<span class="p">},</span> <span class="nx">thisObject</span><span class="p">.</span><span class="nx">alertTimeout</span><span class="p">);</span>
			<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">eCallback</span> <span class="o">===</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nx">eCallback</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span> <span class="p">}</span>
			<span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">eCallback</span> <span class="o">===</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="nx">eCallback</span><span class="p">();</span> <span class="p">}</span>
		<span class="p">}</span>
	<span class="p">};</span>	
	<span class="k">return</span> <span class="nx">OMS</span><span class="p">;</span>
<span class="p">}();</span>
</pre></div>
