#!/usr/bin/php -q
<?php
// Be sure to have this script in file mode 700 and ownned by root:root
// This script functions as a container for some commands to execute as root. So anything that isnt available in here cant be executed by user deploy
    
$arguments = $_SERVER['argv'];

if(count($arguments)<2){
	showhelp();
	exit;
}

$filename = $arguments[0];
$currentdir = dirname(__FILE__);
$basedir = '';
$user = '';

// Delete first argument (which is symfony2acl)
array_shift($arguments);


while(!empty($arguments)){

	$argument = array_shift($arguments);
	
	switch($argument){
		case '-h':
		case '--help':
			showhelp();
			exit(0);
			break;		
		case '-b':
		case '--basedir':			
			$basedir = array_shift($arguments);
			break;
		case '-u':
		case '--user':
			$user = array_shift($arguments);
			break;
		default:
			echo "$argument is not a valid option";
			showhelp();
			exit(1);
			break;
	}
}

validate($basedir, $user);
setacl($basedir, $user);


function showhelp()
{
	echo "\n";
	echo "Set symfony2 ACL for logs and cache folder\n";
    echo "Usage: symfony2acl [options]\n";
	echo "-h, --help            This help\n";
	echo "-b, --basedir         Base directory of Symfony2 application\n";
	echo "-u, --user            User to set permission for\n";
	echo "\n";
}


function validate($basedir, $user)
{
	if(empty($basedir) || empty($user)){
		showhelp();
		exit(1);
	}
}


function setacl($basedir, $user)
{
	include 'settings.php';
	shell_exec('cd '.escapeshellarg($basedir).' && sudo setfacl -R -m '.escapeshellarg('u:'.$httpd_user.':rwx').' -m '.escapeshellarg('u:'.$user.':rwx').' app/logs app/cache');
	shell_exec('cd '.escapeshellarg($basedir).' && sudo setfacl -dR -m '.escapeshellarg('u:'.$httpd_user.':rwx').' -m '.escapeshellarg('u:'.$user.':rwx').' app/logs app/cache');
}
